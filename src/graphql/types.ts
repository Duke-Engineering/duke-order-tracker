export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Any: { input: any; output: any; }
  Date: { input: any; output: any; }
  DateTime: { input: any; output: any; }
  JSON: { input: any; output: any; }
  JSONObject: { input: any; output: any; }
  Money: { input: any; output: any; }
};

export type ActivateShopRequestDto = {
  supplierId?: InputMaybe<Scalars['ID']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};

export type AddItemToCartInput = {
  cart_qty: Scalars['Int']['input'];
  product_id: Scalars['ID']['input'];
  profit: Scalars['Float']['input'];
  profit_type?: InputMaybe<ProfitType>;
  user_id: Scalars['ID']['input'];
};

export type AddPluginToUserRequestDto = {
  plugin_id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type AddProductConditionToDiscountRequestDto = {
  discountId: Scalars['ID']['input'];
  productCondition: DiscountProductConditionRequestDto;
};

export type AddProductsToCollectionInput = {
  collectionId: Scalars['ID']['input'];
  productIds: Array<Scalars['ID']['input']>;
};

export type AddSupplierAgreementTermsInput = {
  agreed_term?: InputMaybe<SupplierAgreementTerms>;
  supplier_id: Scalars['ID']['input'];
};

export type AddSupplierLocationInput = {
  address: Scalars['String']['input'];
  address_ext?: InputMaybe<Scalars['String']['input']>;
  business_id: Scalars['ID']['input'];
  city: Scalars['String']['input'];
  gmap_data: Scalars['String']['input'];
  lat: Scalars['String']['input'];
  lng: Scalars['String']['input'];
  name: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  postal_code: Scalars['String']['input'];
  state: Scalars['String']['input'];
  state_code: Scalars['String']['input'];
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
};

export type Address = {
  __typename?: 'Address';
  area?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  customer_id?: Maybe<Scalars['ID']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  landmark?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['String']['output']>;
  lng?: Maybe<Scalars['String']['output']>;
};

export type AddressInput = {
  area: Scalars['String']['input'];
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  landmark?: InputMaybe<Scalars['String']['input']>;
  lat?: InputMaybe<Scalars['String']['input']>;
  lng?: InputMaybe<Scalars['String']['input']>;
};

export type AgencyDetails = {
  __typename?: 'AgencyDetails';
  logo?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type AppBanner = {
  __typename?: 'AppBanner';
  banner_code?: Maybe<Scalars['String']['output']>;
  collection: Catalog;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['DateTime']['output'];
  url: Scalars['String']['output'];
};

export type AppBannerFilter = {
  active?: InputMaybe<BooleanOperator>;
  country?: InputMaybe<StringOperator>;
  createdAt?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
};

export type AppBannerInput = {
  banner_code?: InputMaybe<Scalars['String']['input']>;
  collection_id?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  url: Scalars['String']['input'];
};

export type Auth = {
  __typename?: 'Auth';
  token: Scalars['String']['output'];
  user: User;
};

export type AutogeneratedMainType = {
  __typename?: 'AutogeneratedMainType';
  agency_details?: Maybe<AgencyDetails>;
  currency_code?: Maybe<Scalars['String']['output']>;
  currency_name?: Maybe<Scalars['String']['output']>;
  currency_symbol?: Maybe<Scalars['String']['output']>;
  discount?: Maybe<Scalars['Int']['output']>;
  end_time?: Maybe<Scalars['Date']['output']>;
  estimate_id?: Maybe<Scalars['String']['output']>;
  estimate_type_details?: Maybe<EstimateTypeDetails>;
  full_price?: Maybe<Scalars['Int']['output']>;
  time_string?: Maybe<Scalars['String']['output']>;
  total_distance?: Maybe<Scalars['Float']['output']>;
};

export enum BillingCycle {
  Annual = 'annual',
  Monthly = 'monthly'
}

export type BobAddress = {
  __typename?: 'BobAddress';
  city?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  entered_address?: Maybe<Scalars['String']['output']>;
  gs_hash?: Maybe<Scalars['String']['output']>;
  hash?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  lat?: Maybe<Scalars['Float']['output']>;
  lng?: Maybe<Scalars['Float']['output']>;
  local_area?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  street_address?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  zone?: Maybe<Scalars['String']['output']>;
  zone_name?: Maybe<Scalars['String']['output']>;
};

export type BobAddressInput = {
  city?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  entered_address?: InputMaybe<Scalars['String']['input']>;
  lat?: InputMaybe<Scalars['Float']['input']>;
  lng?: InputMaybe<Scalars['Float']['input']>;
  local_area?: InputMaybe<Scalars['String']['input']>;
  street_address?: InputMaybe<Scalars['String']['input']>;
  zone?: InputMaybe<Scalars['String']['input']>;
};

export type BobBillingBillingTransaction = {
  __typename?: 'BobBillingBillingTransaction';
  account_code?: Maybe<Scalars['String']['output']>;
  account_id?: Maybe<Scalars['Int']['output']>;
  amount?: Maybe<Scalars['Float']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  payment?: Maybe<Scalars['String']['output']>;
  payment_id?: Maybe<Scalars['String']['output']>;
  payment_provider_id?: Maybe<Scalars['String']['output']>;
  provider_doc_number?: Maybe<Scalars['String']['output']>;
  shipment_id?: Maybe<Scalars['Int']['output']>;
  shipment_reference?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  transaction_date?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  ua_doc_number?: Maybe<Scalars['String']['output']>;
  vat?: Maybe<Scalars['Float']['output']>;
};

export type BobCancelShipmentRequestDto = {
  tracking_reference?: InputMaybe<Scalars['String']['input']>;
};

export type BobChannel = {
  __typename?: 'BobChannel';
  account_id?: Maybe<Scalars['Int']['output']>;
  channel_type?: Maybe<Scalars['String']['output']>;
  channel_type_logo_square_url?: Maybe<Scalars['String']['output']>;
  channel_type_logo_url?: Maybe<Scalars['String']['output']>;
  channel_type_slug?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};

export type BobCheckpoint = {
  __typename?: 'BobCheckpoint';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  status_friendly?: Maybe<Scalars['String']['output']>;
  time?: Maybe<Scalars['String']['output']>;
  zip?: Maybe<Scalars['String']['output']>;
  zone?: Maybe<Scalars['String']['output']>;
};

export type BobCollectionAddressBook = {
  __typename?: 'BobCollectionAddressBook';
  account_id?: Maybe<Scalars['Int']['output']>;
  additional_instructions?: Maybe<Scalars['String']['output']>;
  address?: Maybe<BobAddress>;
  address_id?: Maybe<Scalars['Int']['output']>;
  collect_after?: Maybe<Scalars['String']['output']>;
  collect_before?: Maybe<Scalars['String']['output']>;
  collection_lead_time?: Maybe<Scalars['Int']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  contact_name?: Maybe<Scalars['String']['output']>;
  contact_surname?: Maybe<Scalars['String']['output']>;
  created_by?: Maybe<Scalars['Int']['output']>;
  custom_logo?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  include_packing_slip?: Maybe<Scalars['Boolean']['output']>;
  is_collection_address?: Maybe<Scalars['Boolean']['output']>;
  is_default?: Maybe<Scalars['Boolean']['output']>;
  meta?: Maybe<BobOrderMeta>;
  mobile_number?: Maybe<Scalars['String']['output']>;
  modified_by?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  request_collection_at?: Maybe<Scalars['String']['output']>;
  shipping_label_email?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
};

export type BobCreateOrderRequestDto = {
  buyer_selected_shipping_cost: Scalars['Float']['input'];
  buyer_selected_shipping_method: Scalars['String']['input'];
  currency: Scalars['String']['input'];
  customer_email: Scalars['String']['input'];
  customer_name: Scalars['String']['input'];
  customer_phone: Scalars['String']['input'];
  customer_surname: Scalars['String']['input'];
  delivery_address: BobAddressInput;
  order_items: Array<BobOrderItemInput>;
  payment_status: BobOrderPaymentStatus;
};

export type BobCreateShipmentRequestDto = {
  collection_address?: InputMaybe<BobAddressInput>;
  collection_after?: InputMaybe<Scalars['String']['input']>;
  collection_before?: InputMaybe<Scalars['String']['input']>;
  collection_contact_company?: InputMaybe<Scalars['String']['input']>;
  collection_contact_email?: InputMaybe<Scalars['String']['input']>;
  collection_contact_mobile_number?: InputMaybe<Scalars['String']['input']>;
  collection_contact_name?: InputMaybe<Scalars['String']['input']>;
  collection_min_date?: InputMaybe<Scalars['String']['input']>;
  custom_tracking_reference?: InputMaybe<Scalars['String']['input']>;
  declared_value?: InputMaybe<Scalars['Int']['input']>;
  delivery_address?: InputMaybe<BobAddressInput>;
  delivery_contact_company?: InputMaybe<Scalars['String']['input']>;
  delivery_contact_email?: InputMaybe<Scalars['String']['input']>;
  delivery_contact_mobile_number?: InputMaybe<Scalars['String']['input']>;
  delivery_contact_name?: InputMaybe<Scalars['String']['input']>;
  instructions_collection?: InputMaybe<Scalars['String']['input']>;
  instructions_delivery?: InputMaybe<Scalars['String']['input']>;
  parcels?: InputMaybe<Array<InputMaybe<BobParcelInput>>>;
  provider_slug?: InputMaybe<Scalars['String']['input']>;
  service_level_code?: InputMaybe<Scalars['String']['input']>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetCourierRatesRequestDto = {
  collection_address: BobAddressInput;
  declared_value?: InputMaybe<Scalars['Int']['input']>;
  delivery_address: BobAddressInput;
  parcels: Array<BobParcelInput>;
  providers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  service_levels?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetCourierRatesResponseDto = {
  __typename?: 'BobGetCourierRatesResponseDto';
  account_id?: Maybe<Scalars['Int']['output']>;
  collection_address?: Maybe<BobAddress>;
  declared_value?: Maybe<Scalars['Int']['output']>;
  delivery_address?: Maybe<BobAddress>;
  id?: Maybe<Scalars['Int']['output']>;
  parcels?: Maybe<Array<Maybe<BobParcel>>>;
  provider_rate_requests?: Maybe<Array<Maybe<BobProviderRateRequest>>>;
  request_timeout?: Maybe<Scalars['String']['output']>;
  surcharge?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  timeout?: Maybe<Scalars['Int']['output']>;
  total_submitted_weight_kg?: Maybe<Scalars['Float']['output']>;
  webhook_url?: Maybe<Scalars['String']['output']>;
};

export type BobGetOrderFulfillmentsRequestDto = {
  order_id?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetOrderFulfillmentsResponseDto = {
  __typename?: 'BobGetOrderFulfillmentsResponseDto';
  count?: Maybe<Scalars['Int']['output']>;
  order_fulfillments?: Maybe<Array<Maybe<BobOrderFulfillments>>>;
};

export type BobGetOrdersRequestDto = {
  /** Province */
  delivery_address_zone?: InputMaybe<Scalars['String']['input']>;
  end_date?: InputMaybe<Scalars['Date']['input']>;
  fulfillment_status?: InputMaybe<Scalars['String']['input']>;
  has_delivery_address?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  order_by?: InputMaybe<Scalars['String']['input']>;
  payment_status?: InputMaybe<BobOrderPaymentStatus>;
  start_date?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
  tag_id?: InputMaybe<Scalars['Int']['input']>;
  /** The reference of the fulfillment (shipment) created in the order */
  tracking_reference?: InputMaybe<Scalars['String']['input']>;
};

export type BobGetOrdersResponseDto = {
  __typename?: 'BobGetOrdersResponseDto';
  count?: Maybe<Scalars['Int']['output']>;
  orders?: Maybe<Array<Maybe<BobOrder>>>;
};

export type BobGetRateRequestsRequestDto = {
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetRateRequestsResponseDto = {
  __typename?: 'BobGetRateRequestsResponseDto';
  count?: Maybe<Scalars['Int']['output']>;
  rate_requests?: Maybe<Array<Maybe<BobRateRequest>>>;
};

export type BobGetRatesAtCheckoutRequestDto = {
  collection_address: BobAddressInput;
  declared_value?: InputMaybe<Scalars['Int']['input']>;
  delivery_address: BobAddressInput;
  handling_time?: InputMaybe<Scalars['Int']['input']>;
  items: Array<BobRateItem>;
};

export type BobGetRatesAtCheckoutResponseDto = {
  __typename?: 'BobGetRatesAtCheckoutResponseDto';
  count?: Maybe<Scalars['Int']['output']>;
  rates?: Maybe<Array<Maybe<BobRate>>>;
};

export type BobGetShipmentWaybillRequestDto = {
  paper_size?: InputMaybe<Scalars['String']['input']>;
  show_email_address?: InputMaybe<Scalars['Boolean']['input']>;
  show_order_items?: InputMaybe<Scalars['Boolean']['input']>;
  tracking_references?: InputMaybe<Scalars['String']['input']>;
  waybill_size?: InputMaybe<Scalars['String']['input']>;
  waybills_per_shipment?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetShipmentsRequestDto = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

export type BobGetShipmentsResponseDto = {
  __typename?: 'BobGetShipmentsResponseDto';
  count?: Maybe<Scalars['Int']['output']>;
  shipments?: Maybe<Array<Maybe<BobShipment>>>;
};

export type BobGetTrackingEventsRequestDto = {
  tracking_reference?: InputMaybe<Scalars['String']['input']>;
};

export type BobLiabilityCover = {
  __typename?: 'BobLiabilityCover';
  declared_value?: Maybe<Scalars['Int']['output']>;
  price?: Maybe<Scalars['Int']['output']>;
  provider_liability_cover?: Maybe<Scalars['Boolean']['output']>;
};

export type BobOrder = {
  __typename?: 'BobOrder';
  account_id?: Maybe<Scalars['Int']['output']>;
  archived_by_user?: Maybe<Scalars['String']['output']>;
  buyer_selected_shipping_cost?: Maybe<Scalars['Float']['output']>;
  buyer_selected_shipping_method?: Maybe<Scalars['String']['output']>;
  channel?: Maybe<BobChannel>;
  channel_order_number?: Maybe<Scalars['String']['output']>;
  channel_order_url?: Maybe<Scalars['String']['output']>;
  channel_ref_id?: Maybe<Scalars['String']['output']>;
  created_by?: Maybe<Scalars['Int']['output']>;
  created_by_user?: Maybe<BobUser>;
  currency?: Maybe<Scalars['String']['output']>;
  customer_email?: Maybe<Scalars['String']['output']>;
  customer_name?: Maybe<Scalars['String']['output']>;
  customer_phone?: Maybe<Scalars['String']['output']>;
  customer_surname?: Maybe<Scalars['String']['output']>;
  date_placed_on_channel?: Maybe<Scalars['String']['output']>;
  delivery_address?: Maybe<BobAddress>;
  delivery_address_id?: Maybe<Scalars['Int']['output']>;
  fulfillment_status?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  last_modified_on_channel?: Maybe<Scalars['String']['output']>;
  line_item_total?: Maybe<Scalars['Int']['output']>;
  meta?: Maybe<BobOrderMeta>;
  note?: Maybe<Scalars['String']['output']>;
  order_fulfillment_presets?: Maybe<BobOrderFulfillmentPreset>;
  order_fulfillments?: Maybe<Scalars['String']['output']>;
  order_items?: Maybe<Array<Maybe<BobOrderItem>>>;
  payment_status?: Maybe<BobOrderPaymentStatus>;
  rate_request?: Maybe<BobRateRequest>;
  rate_request_id?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Scalars['String']['output']>;
  taxes_included?: Maybe<Scalars['Boolean']['output']>;
  time_archived?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  total_discount?: Maybe<Scalars['Int']['output']>;
  total_fulfilled_qty?: Maybe<Scalars['Int']['output']>;
  total_price?: Maybe<Scalars['Float']['output']>;
  total_qty?: Maybe<Scalars['Int']['output']>;
  total_tax?: Maybe<Scalars['Int']['output']>;
  total_weight_kg?: Maybe<Scalars['Float']['output']>;
};

export type BobOrderFulfillment = {
  __typename?: 'BobOrderFulfillment';
  account_id?: Maybe<Scalars['Int']['output']>;
  batch_number?: Maybe<Scalars['String']['output']>;
  channel_ref_id?: Maybe<Scalars['String']['output']>;
  failed_reason?: Maybe<Scalars['String']['output']>;
  fulfilled_by_user?: Maybe<BobUser>;
  fulfillment_provider?: Maybe<Scalars['String']['output']>;
  fulfillment_service_level_code?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  items?: Maybe<Array<Maybe<BobOrderFulfillmentItem>>>;
  method?: Maybe<Scalars['String']['output']>;
  method_id?: Maybe<Scalars['Int']['output']>;
  method_reference?: Maybe<Scalars['String']['output']>;
  method_status?: Maybe<Scalars['String']['output']>;
  modified_by?: Maybe<Scalars['Int']['output']>;
  order_id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['Int']['output']>;
};

export type BobOrderFulfillmentItem = {
  __typename?: 'BobOrderFulfillmentItem';
  id?: Maybe<Scalars['Int']['output']>;
  order_fulfillment_id?: Maybe<Scalars['Int']['output']>;
  order_id?: Maybe<Scalars['Int']['output']>;
  order_item?: Maybe<BobOrderItem>;
  order_item_id?: Maybe<Scalars['Int']['output']>;
  qty?: Maybe<Scalars['Int']['output']>;
};

export type BobOrderFulfillmentPreset = {
  __typename?: 'BobOrderFulfillmentPreset';
  buyer_contact_number?: Maybe<Scalars['String']['output']>;
  buyer_email?: Maybe<Scalars['String']['output']>;
  buyer_name?: Maybe<Scalars['String']['output']>;
  collection_address_book?: Maybe<BobCollectionAddressBook>;
  collection_address_book_id?: Maybe<Scalars['Int']['output']>;
  collection_address_book_name?: Maybe<Scalars['String']['output']>;
  method?: Maybe<Scalars['String']['output']>;
  parcels?: Maybe<Array<Maybe<BobParcel>>>;
  provider_slug?: Maybe<Scalars['String']['output']>;
  service_level_code?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type BobOrderFulfillments = {
  __typename?: 'BobOrderFulfillments';
  buyer_collection?: Maybe<Scalars['String']['output']>;
  order_fulfillment?: Maybe<BobOrderFulfillment>;
  shipment?: Maybe<BobShipment>;
};

export type BobOrderItem = {
  __typename?: 'BobOrderItem';
  channel_location?: Maybe<Scalars['String']['output']>;
  channel_ref_id?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  fulfilled_qty?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  image_url?: Maybe<Scalars['String']['output']>;
  qty?: Maybe<Scalars['Int']['output']>;
  sku?: Maybe<Scalars['String']['output']>;
  total_price?: Maybe<Scalars['Int']['output']>;
  total_weight_kg?: Maybe<Scalars['Float']['output']>;
  unit_price?: Maybe<Scalars['Int']['output']>;
  unit_weight_kg?: Maybe<Scalars['Float']['output']>;
  vendor?: Maybe<Scalars['String']['output']>;
};

export type BobOrderItemInput = {
  channel_location?: InputMaybe<Scalars['String']['input']>;
  channel_ref_id?: InputMaybe<Scalars['Int']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  fulfilled_qty?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  image_url?: InputMaybe<Scalars['String']['input']>;
  qty?: InputMaybe<Scalars['Int']['input']>;
  sku?: InputMaybe<Scalars['String']['input']>;
  total_price?: InputMaybe<Scalars['Int']['input']>;
  total_weight_kg?: InputMaybe<Scalars['Float']['input']>;
  unit_price?: InputMaybe<Scalars['Int']['input']>;
  unit_weight_kg?: InputMaybe<Scalars['Float']['input']>;
  vendor?: InputMaybe<Scalars['String']['input']>;
};

export type BobOrderMeta = {
  __typename?: 'BobOrderMeta';
  buyer_selected_shipping_method_codes?: Maybe<Scalars['String']['output']>;
  original_address?: Maybe<Scalars['String']['output']>;
};

export enum BobOrderPaymentStatus {
  Paid = 'paid',
  /** partially-paid */
  Unpaid = 'unpaid'
}

export type BobParcel = {
  __typename?: 'BobParcel';
  actual_height_cm?: Maybe<Scalars['String']['output']>;
  actual_length_cm?: Maybe<Scalars['String']['output']>;
  actual_weight_kg?: Maybe<Scalars['String']['output']>;
  actual_width_cm?: Maybe<Scalars['String']['output']>;
  custom_parcel_reference?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  is_additional?: Maybe<Scalars['String']['output']>;
  package_id?: Maybe<Scalars['Int']['output']>;
  provider_tracking_reference?: Maybe<Scalars['String']['output']>;
  submitted_height_cm?: Maybe<Scalars['Float']['output']>;
  submitted_length_cm?: Maybe<Scalars['Float']['output']>;
  submitted_weight_kg?: Maybe<Scalars['Float']['output']>;
  submitted_width_cm?: Maybe<Scalars['Float']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  tracking_reference?: Maybe<Scalars['String']['output']>;
};

export type BobParcelInput = {
  custom_parcel_reference?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  submitted_height_cm?: InputMaybe<Scalars['Float']['input']>;
  submitted_length_cm?: InputMaybe<Scalars['Float']['input']>;
  submitted_weight_kg?: InputMaybe<Scalars['Float']['input']>;
  submitted_width_cm?: InputMaybe<Scalars['Float']['input']>;
};

export type BobProviderRateRequest = {
  __typename?: 'BobProviderRateRequest';
  failed_reason?: Maybe<Scalars['String']['output']>;
  is_custom_account?: Maybe<Scalars['String']['output']>;
  provider_id?: Maybe<Scalars['Int']['output']>;
  provider_name?: Maybe<Scalars['String']['output']>;
  provider_slug?: Maybe<Scalars['String']['output']>;
  rate_response_id?: Maybe<Scalars['Int']['output']>;
  responses?: Maybe<Array<Maybe<Scalars['Any']['output']>>>;
  status?: Maybe<Scalars['String']['output']>;
};

export type BobRate = {
  __typename?: 'BobRate';
  base_rate?: Maybe<Scalars['Int']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  liability_cover?: Maybe<BobLiabilityCover>;
  max_delivery_date?: Maybe<Scalars['String']['output']>;
  min_delivery_date?: Maybe<Scalars['String']['output']>;
  service_code?: Maybe<Scalars['String']['output']>;
  service_name?: Maybe<Scalars['String']['output']>;
  surcharges?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  total_price?: Maybe<Scalars['Int']['output']>;
};

export type BobRateItem = {
  description?: InputMaybe<Scalars['String']['input']>;
  height_cm?: InputMaybe<Scalars['Float']['input']>;
  length_cm?: InputMaybe<Scalars['Float']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  weight_kg?: InputMaybe<Scalars['Float']['input']>;
  width_cm?: InputMaybe<Scalars['Float']['input']>;
};

export type BobRateRequest = {
  __typename?: 'BobRateRequest';
  account?: Maybe<BobShipmentAccount>;
  account_id?: Maybe<Scalars['Int']['output']>;
  collection_address?: Maybe<BobAddress>;
  declared_value?: Maybe<Scalars['Int']['output']>;
  delivery_address?: Maybe<BobAddress>;
  id?: Maybe<Scalars['Int']['output']>;
  parcels?: Maybe<Array<Maybe<BobParcel>>>;
  provider_rate_requests?: Maybe<Array<Maybe<BobProviderRateRequest>>>;
  request_timeout?: Maybe<Scalars['String']['output']>;
  surcharge?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  timeout?: Maybe<Scalars['Int']['output']>;
  total_submitted_weight_kg?: Maybe<Scalars['Float']['output']>;
  webhook_url?: Maybe<Scalars['String']['output']>;
};

export type BobShipment = {
  __typename?: 'BobShipment';
  account?: Maybe<BobShipmentAccount>;
  account_id?: Maybe<Scalars['Int']['output']>;
  billing_transactions?: Maybe<Array<Maybe<BobBillingBillingTransaction>>>;
  charged_amount?: Maybe<Scalars['Float']['output']>;
  charged_weight_kg?: Maybe<Scalars['Int']['output']>;
  collected_date?: Maybe<Scalars['String']['output']>;
  collection_address?: Maybe<BobAddress>;
  collection_address_id?: Maybe<Scalars['Int']['output']>;
  collection_after?: Maybe<Scalars['String']['output']>;
  collection_before?: Maybe<Scalars['String']['output']>;
  collection_contact_email?: Maybe<Scalars['String']['output']>;
  collection_contact_mobile_number?: Maybe<Scalars['String']['output']>;
  collection_contact_name?: Maybe<Scalars['String']['output']>;
  collection_min_date?: Maybe<Scalars['String']['output']>;
  courier_confirmed_rate?: Maybe<Scalars['String']['output']>;
  created_by?: Maybe<Scalars['Int']['output']>;
  created_by_user?: Maybe<BobUser>;
  custom_account?: Maybe<Scalars['Boolean']['output']>;
  custom_account_code?: Maybe<Scalars['String']['output']>;
  custom_tracking_reference?: Maybe<Scalars['String']['output']>;
  declared_value?: Maybe<Scalars['String']['output']>;
  delivered_date?: Maybe<Scalars['String']['output']>;
  delivery_address?: Maybe<BobAddress>;
  delivery_address_id?: Maybe<Scalars['Int']['output']>;
  delivery_contact_email?: Maybe<Scalars['String']['output']>;
  delivery_contact_mobile_number?: Maybe<Scalars['String']['output']>;
  delivery_contact_name?: Maybe<Scalars['String']['output']>;
  failed_reason?: Maybe<Scalars['String']['output']>;
  has_provider_doc?: Maybe<Scalars['Boolean']['output']>;
  health_status?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  last_response_code?: Maybe<Scalars['Int']['output']>;
  manifest_id?: Maybe<Scalars['Int']['output']>;
  meta?: Maybe<BobShipmentMeta>;
  modified_by?: Maybe<Scalars['Int']['output']>;
  modified_by_user?: Maybe<Scalars['String']['output']>;
  next_retry_time?: Maybe<Scalars['String']['output']>;
  order_fulfillment?: Maybe<Scalars['String']['output']>;
  order_fulfillment_id?: Maybe<Scalars['Int']['output']>;
  parcel_count?: Maybe<Scalars['Int']['output']>;
  parcels?: Maybe<Array<Maybe<BobParcel>>>;
  provider?: Maybe<BobShipmentProvider>;
  provider_id?: Maybe<Scalars['Int']['output']>;
  provider_shipment_id?: Maybe<Scalars['String']['output']>;
  provider_slug?: Maybe<Scalars['String']['output']>;
  rate?: Maybe<Scalars['Float']['output']>;
  rate_response_id?: Maybe<Scalars['Int']['output']>;
  retry_count?: Maybe<Scalars['Int']['output']>;
  service_level?: Maybe<BobShipmentServiceLevel>;
  service_level_code?: Maybe<Scalars['String']['output']>;
  service_level_cut_off_time?: Maybe<Scalars['String']['output']>;
  service_level_id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  submission_status?: Maybe<Scalars['String']['output']>;
  submitted_weight_kg?: Maybe<Scalars['Float']['output']>;
  surcharge?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  timeout?: Maybe<Scalars['Int']['output']>;
  tracking_expiry_date?: Maybe<Scalars['String']['output']>;
  tracking_last_event_time?: Maybe<Scalars['String']['output']>;
  tracking_reference?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentAccount = {
  __typename?: 'BobShipmentAccount';
  account_code?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentMeta = {
  __typename?: 'BobShipmentMeta';
  collection_address_book_id?: Maybe<Scalars['Int']['output']>;
  collection_reference?: Maybe<Scalars['String']['output']>;
  estimated_collection_date?: Maybe<Scalars['String']['output']>;
  estimated_delivery_date?: Maybe<Scalars['String']['output']>;
  health_status_reason?: Maybe<Scalars['String']['output']>;
  sl_collection_agent_id?: Maybe<Scalars['String']['output']>;
  sl_collection_agent_zone?: Maybe<Scalars['String']['output']>;
  sl_collection_branch?: Maybe<Scalars['String']['output']>;
  sl_delivery_agent_id?: Maybe<Scalars['String']['output']>;
  sl_delivery_agent_zone?: Maybe<Scalars['String']['output']>;
  sl_delivery_branch?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentMovementEvent = {
  __typename?: 'BobShipmentMovementEvent';
  collected_time?: Maybe<Scalars['String']['output']>;
  delivered_time?: Maybe<Scalars['String']['output']>;
  in_transit_time?: Maybe<Scalars['String']['output']>;
  out_for_delivery_time?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentProvider = {
  __typename?: 'BobShipmentProvider';
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone_number?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentServiceLevel = {
  __typename?: 'BobShipmentServiceLevel';
  code?: Maybe<Scalars['String']['output']>;
  collection_cut_off_time?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  expected_delivery_time_hours?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type BobShipmentWaybill = {
  __typename?: 'BobShipmentWaybill';
  download_url?: Maybe<Scalars['String']['output']>;
  file_history_id?: Maybe<Scalars['String']['output']>;
  pdf_queued?: Maybe<Scalars['Boolean']['output']>;
  shipments?: Maybe<Array<Maybe<BobShipment>>>;
  waybills_ready?: Maybe<Scalars['Boolean']['output']>;
};

export type BobTrackingEvent = {
  __typename?: 'BobTrackingEvent';
  checkpoints?: Maybe<Array<Maybe<BobCheckpoint>>>;
  courier_logo?: Maybe<Scalars['String']['output']>;
  courier_name?: Maybe<Scalars['String']['output']>;
  courier_phone?: Maybe<Scalars['String']['output']>;
  courier_slug?: Maybe<Scalars['String']['output']>;
  custom_order_name?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  last_checkpoint_time?: Maybe<Scalars['String']['output']>;
  merchant_logo?: Maybe<Scalars['String']['output']>;
  merchant_name?: Maybe<Scalars['String']['output']>;
  order_number?: Maybe<Scalars['String']['output']>;
  service_level?: Maybe<Scalars['String']['output']>;
  shipment_movement_events?: Maybe<BobShipmentMovementEvent>;
  shipment_time_created?: Maybe<Scalars['String']['output']>;
  shipment_tracking_reference?: Maybe<Scalars['String']['output']>;
  show_branding?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  status_friendly?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type BobUser = {
  __typename?: 'BobUser';
  accepted_terms?: Maybe<Scalars['String']['output']>;
  account_id?: Maybe<Scalars['Int']['output']>;
  api_key?: Maybe<Scalars['String']['output']>;
  created_by_user?: Maybe<BobUser>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone_number?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  role_id?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  time_created?: Maybe<Scalars['String']['output']>;
  time_modified?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type BooleanOperator = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BreakDownItems = {
  __typename?: 'BreakDownItems';
  average: Scalars['Int']['output'];
  excellent: Scalars['Int']['output'];
  good: Scalars['Int']['output'];
  poor: Scalars['Int']['output'];
  veryGood: Scalars['Int']['output'];
};

export type Campaign = {
  __typename?: 'Campaign';
  campaign_count?: Maybe<Scalars['Int']['output']>;
  campaign_id: Scalars['String']['output'];
  campaign_image_url?: Maybe<Scalars['String']['output']>;
  campaign_text: Scalars['String']['output'];
  campaign_type: Scalars['String']['output'];
  category?: Maybe<Scalars['String']['output']>;
  code_redemption_is_unlimited: Scalars['Boolean']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  customer_count?: Maybe<Scalars['Int']['output']>;
  days?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  draft: Scalars['Boolean']['output'];
  end_time: Scalars['Date']['output'];
  expiration_date: Scalars['Date']['output'];
  has_advance_time?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  leader_board_id?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  per_customer_per_day?: Maybe<Scalars['Int']['output']>;
  per_customer_per_month?: Maybe<Scalars['Int']['output']>;
  per_customer_total_limit?: Maybe<Scalars['Int']['output']>;
  start_date: Scalars['Date']['output'];
  start_time: Scalars['Date']['output'];
  status?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type CampaignFilter = {
  campaign_count?: InputMaybe<NumberOperator>;
  campaign_id?: InputMaybe<StringOperator>;
  campaign_image_url?: InputMaybe<StringOperator>;
  campaign_text?: InputMaybe<StringOperator>;
  campaign_type?: InputMaybe<StringOperator>;
  category?: InputMaybe<StringOperator>;
  code_redemption_is_unlimited?: InputMaybe<BooleanOperator>;
  created_at?: InputMaybe<DateOperator>;
  customer_count?: InputMaybe<NumberOperator>;
  days?: InputMaybe<StringOperator>;
  draft?: InputMaybe<BooleanOperator>;
  end_time?: InputMaybe<DateOperator>;
  expiration_date?: InputMaybe<DateOperator>;
  has_advance_time?: InputMaybe<BooleanOperator>;
  id?: InputMaybe<IdOperator>;
  leader_board_id?: InputMaybe<StringOperator>;
  name?: InputMaybe<StringOperator>;
  per_customer_per_day?: InputMaybe<NumberOperator>;
  per_customer_per_month?: InputMaybe<NumberOperator>;
  per_customer_total_limit?: InputMaybe<NumberOperator>;
  start_date?: InputMaybe<DateOperator>;
  start_time?: InputMaybe<DateOperator>;
  status?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
};

export type Cart = {
  products: Array<CartProduct>;
};

export type CartFilter = {
  cart_number?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  customer_id?: InputMaybe<IdOperator>;
  id?: InputMaybe<IdOperator>;
  payment_id?: InputMaybe<StringOperator>;
  source?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  tracking_code?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type CartItem = {
  __typename?: 'CartItem';
  cart_qty?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  in_stock?: Maybe<Scalars['Boolean']['output']>;
  product?: Maybe<Product>;
  product_id: Scalars['ID']['output'];
  profit?: Maybe<Scalars['Float']['output']>;
  profit_type?: Maybe<ProfitType>;
};

export type CartProduct = {
  productPrice: Scalars['String']['input'];
  productQty: Scalars['Int']['input'];
  productSKU: Scalars['String']['input'];
  profitAdded: Scalars['String']['input'];
  uuid: Scalars['String']['input'];
};

export type CashRewardHistory = {
  __typename?: 'CashRewardHistory';
  amount: Scalars['Float']['output'];
  created_at: Scalars['Date']['output'];
  id: Scalars['ID']['output'];
  previous_balance: Scalars['Float']['output'];
  reference?: Maybe<Scalars['String']['output']>;
  transaction_type: Scalars['String']['output'];
};

export type CashRewardsFilter = {
  amount?: InputMaybe<MoneyOperator>;
  id?: InputMaybe<IdOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  user_id?: InputMaybe<IdOperator>;
  wallet_id?: InputMaybe<IdOperator>;
};

export type Catalog = {
  __typename?: 'Catalog';
  banner: Scalars['String']['output'];
  config?: Maybe<CollectionConfig>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isFreeDelivery?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type CatalogCollection = {
  __typename?: 'CatalogCollection';
  catalog?: Maybe<Catalog>;
  collection?: Maybe<Catalog>;
  id?: Maybe<Scalars['ID']['output']>;
};

export type CatalogConfigInput = {
  collection_id: Scalars['ID']['input'];
  free_delivery_locations?: InputMaybe<Array<Scalars['ID']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  is_free_delivery: Scalars['Boolean']['input'];
  reduction_type?: InputMaybe<ReductionType>;
  reduction_value?: InputMaybe<Scalars['Float']['input']>;
};

export type CatalogData = CatalogCollection | CategoryCollection | ProductCollection;

export type CatalogFilter = {
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
};

export type CatalogInput = {
  banner: Scalars['String']['input'];
  config?: InputMaybe<CatalogConfigInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
};

export type CatalogMedia = {
  __typename?: 'CatalogMedia';
  id?: Maybe<Scalars['ID']['output']>;
  media?: Maybe<Scalars['String']['output']>;
};

export enum CatalogType {
  Catalog = 'CATALOG',
  Category = 'CATEGORY',
  Product = 'PRODUCT'
}

export type CategoryCollection = {
  __typename?: 'CategoryCollection';
  category?: Maybe<ProductCategory>;
  collection?: Maybe<Catalog>;
  id?: Maybe<Scalars['ID']['output']>;
};

export enum ChannelType {
  Sms = 'sms',
  Whatsapp = 'whatsapp'
}

export type ClaimCouponInput = {
  code: Scalars['String']['input'];
  user_id: Scalars['ID']['input'];
};

export type ClaimDiscountRequestDto = {
  discount_code: Scalars['String']['input'];
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type CollectionConfig = {
  __typename?: 'CollectionConfig';
  /** this array carries location ids if the collection is restricted to certain locations */
  free_delivery_locations?: Maybe<Array<Maybe<Scalars['ID']['output']>>>;
  id: Scalars['ID']['output'];
  is_free_delivery?: Maybe<Scalars['Boolean']['output']>;
  /** The reduction type can be either percentage or amount */
  reduction_type?: Maybe<ReductionType>;
  /** The reduction value can be either a percentage or an amount depending on the reduction type */
  reduction_value?: Maybe<Scalars['Float']['output']>;
};

export enum Condition {
  And = 'and',
  Or = 'or'
}

export enum ConditionalOperator {
  Any = 'Any',
  ArrayContainedBy = 'ArrayContainedBy',
  ArrayContains = 'ArrayContains',
  ArrayNotContainedBy = 'ArrayNotContainedBy',
  ArrayNotContains = 'ArrayNotContains',
  ArrayNotOverlap = 'ArrayNotOverlap',
  ArrayOverlap = 'ArrayOverlap',
  Between = 'Between',
  Equal = 'Equal',
  ILike = 'ILike',
  In = 'In',
  IsNotNull = 'IsNotNull',
  IsNull = 'IsNull',
  LessThan = 'LessThan',
  LessThanOrEqual = 'LessThanOrEqual',
  Like = 'Like',
  MoreThan = 'MoreThan',
  MoreThanOrEqual = 'MoreThanOrEqual',
  Not = 'Not',
  NotAny = 'NotAny',
  NotBetween = 'NotBetween',
  NotEqual = 'NotEqual',
  NotILike = 'NotILike',
  NotIn = 'NotIn',
  NotLessThan = 'NotLessThan',
  NotLessThanOrEqual = 'NotLessThanOrEqual',
  NotLike = 'NotLike',
  NotMoreThan = 'NotMoreThan',
  NotMoreThanOrEqual = 'NotMoreThanOrEqual',
  Raw = 'Raw'
}

export enum CountryCode {
  Gh = 'GH',
  Ng = 'NG',
  Za = 'ZA'
}

export type Coupon = {
  __typename?: 'Coupon';
  cash_rewards?: Maybe<Scalars['Float']['output']>;
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  expired: Scalars['Boolean']['output'];
  expires_on?: Maybe<Scalars['DateTime']['output']>;
  free_deliveries?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  number_of_days?: Maybe<Scalars['Int']['output']>;
  redemption?: Maybe<CouponRedemption>;
  start_date?: Maybe<Scalars['Date']['output']>;
  type: CouponType;
  updatedAt: Scalars['DateTime']['output'];
};

export type CouponFilter = {
  cash_rewards?: InputMaybe<NumberOperator>;
  code?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  createdAt?: InputMaybe<DateOperator>;
  expires_on?: InputMaybe<DateOperator>;
  free_deliveries?: InputMaybe<NumberOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  number_of_days?: InputMaybe<NumberOperator>;
  type?: InputMaybe<CouponType>;
  user_id?: InputMaybe<IdOperator>;
};

export type CouponInput = {
  cash_rewards?: InputMaybe<Scalars['Float']['input']>;
  code: Scalars['String']['input'];
  expires_on?: InputMaybe<Scalars['DateTime']['input']>;
  free_deliveries?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  neverEnds: Scalars['Boolean']['input'];
  number_of_days?: InputMaybe<Scalars['Int']['input']>;
  start_date: Scalars['Date']['input'];
  type: CouponType;
};

export type CouponRedemption = {
  __typename?: 'CouponRedemption';
  cash_rewards_exhausted?: Maybe<Scalars['Float']['output']>;
  coupon?: Maybe<Coupon>;
  free_delivery_exhausted?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
};

export type CouponRedemptionFilter = {
  user_id?: InputMaybe<IdOperator>;
};

export enum CouponType {
  CashRewards = 'cash_rewards',
  Combo = 'combo',
  FreeDelivery = 'free_delivery'
}

export type CreateCampaignInput = {
  campaign_count?: InputMaybe<Scalars['Int']['input']>;
  campaign_id: Scalars['String']['input'];
  campaign_image_url?: InputMaybe<Scalars['String']['input']>;
  campaign_text: Scalars['String']['input'];
  campaign_type: Scalars['String']['input'];
  category?: InputMaybe<Scalars['String']['input']>;
  code_redemption_is_unlimited: Scalars['Boolean']['input'];
  customer_count?: InputMaybe<Scalars['Int']['input']>;
  days?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  draft: Scalars['Boolean']['input'];
  end_time: Scalars['Date']['input'];
  expiration_date: Scalars['Date']['input'];
  has_advance_time?: InputMaybe<Scalars['Boolean']['input']>;
  leader_board_id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  per_customer_per_day?: InputMaybe<Scalars['Int']['input']>;
  per_customer_per_month?: InputMaybe<Scalars['Int']['input']>;
  per_customer_total_limit?: InputMaybe<Scalars['Int']['input']>;
  start_date: Scalars['Date']['input'];
  start_time: Scalars['Date']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
};

export type CreateCustomerSubscriptionRequestDto = {
  billing_cycle: BillingCycle;
  subscription_id: Scalars['ID']['input'];
  user_email: Scalars['String']['input'];
  user_id: Scalars['ID']['input'];
};

export type CreateDiscountRequestDto = {
  amount?: InputMaybe<Scalars['Float']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  created_by?: InputMaybe<UserType>;
  description: Scalars['String']['input'];
  expiry_date: Scalars['String']['input'];
  fixed_amount_allocation?: InputMaybe<FixedAmountAllocation>;
  is_draft: Scalars['Boolean']['input'];
  locations?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  locations_tagname?: InputMaybe<Scalars['String']['input']>;
  percentage?: InputMaybe<Scalars['Float']['input']>;
  product_condition?: InputMaybe<ProductCondition>;
  products?: InputMaybe<Array<Scalars['String']['input']>>;
  redemptions_limit?: InputMaybe<Scalars['Int']['input']>;
  start_date: Scalars['String']['input'];
  type: DiscountType;
  user_id?: InputMaybe<Scalars['ID']['input']>;
  valid_country: Scalars['String']['input'];
};

export type CreatePluginRequestDto = {
  banner_image?: InputMaybe<Scalars['String']['input']>;
  category: Scalars['String']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  developer?: InputMaybe<Scalars['String']['input']>;
  endpoint: Scalars['String']['input'];
  logo: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type CreateSharedProductRequestDto = {
  product_cost_price: Scalars['Float']['input'];
  product_id: Scalars['ID']['input'];
  profit_added_by_reseller: Scalars['Float']['input'];
  shared_by: Scalars['ID']['input'];
  total_selling_price: Scalars['Float']['input'];
};

export type CreateSharedProductResponseDto = {
  __typename?: 'CreateSharedProductResponseDto';
  sharedProduct?: Maybe<SharedProduct>;
};

export type CreateShopRequestDto = {
  /** Profile image */
  avatar?: InputMaybe<Scalars['String']['input']>;
  /** The public-facing contact email address for the shop. Customers will use this email to communicate with the shop owner. */
  contactEmail: Scalars['String']['input'];
  /** Country code of where shop is located */
  country: CountryCode;
  /** Backdrop banner image */
  coverImage?: InputMaybe<Scalars['String']['input']>;
  /** Currency code the shop will receive payouts in. */
  currency: CurrencyCode;
  deliveryAgent?: InputMaybe<DeliveryAgent>;
  deliveryOption?: InputMaybe<DeliveryOption>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** The shop owner's email address. Tendo will use this email address to communicate with the shop owner. */
  email: Scalars['String']['input'];
  location?: InputMaybe<ShopLocationRequestDto>;
  /** Full name of shop */
  name: Scalars['String']['input'];
  ownerId: Scalars['ID']['input'];
  paymentOptions: Array<InputMaybe<PaymentOption>>;
  phone: Scalars['String']['input'];
  /** Tags used to identify the shop */
  shopTags: Array<InputMaybe<Scalars['String']['input']>>;
  shortUrl?: InputMaybe<Scalars['String']['input']>;
  /** The host name only. Should NOT contain .mysoko.shop. */
  sokoWorldHostname: Scalars['String']['input'];
  supplierId?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateShopResponseDto = {
  __typename?: 'CreateShopResponseDto';
  shopId?: Maybe<Scalars['ID']['output']>;
};

export type CreateSubscriptionRequestDto = {
  annual_plan_cost: Scalars['Float']['input'];
  monthly_plan_cost: Scalars['Float']['input'];
  name: SubscriptionType;
};

export type CreateTopDealBannerInput = {
  url: Scalars['String']['input'];
};

export enum CurrencyCode {
  Ghs = 'GHS',
  Ngn = 'NGN',
  Zar = 'ZAR'
}

export type Customer = {
  __typename?: 'Customer';
  address?: Maybe<Array<Maybe<CustomerAddress>>>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  reseller?: Maybe<User>;
};

export type CustomerAddress = {
  __typename?: 'CustomerAddress';
  area: Scalars['String']['output'];
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  landmark?: Maybe<Scalars['String']['output']>;
  lat?: Maybe<Scalars['String']['output']>;
  lng?: Maybe<Scalars['String']['output']>;
};

export type CustomerAuthPayload = {
  __typename?: 'CustomerAuthPayload';
  token: Scalars['String']['output'];
  user?: Maybe<Customer>;
};

export type CustomerFilter = {
  address?: InputMaybe<StringOperator>;
  email?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  phone?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type CustomerInput = {
  address?: InputMaybe<AddressInput>;
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type CustomerLoginInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type CustomerSubscription = {
  __typename?: 'CustomerSubscription';
  billing_cycle?: Maybe<BillingCycle>;
  created_at?: Maybe<Scalars['Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  next_billing_date?: Maybe<Scalars['Date']['output']>;
  payment_history?: Maybe<Array<Maybe<SubscriptionPaymentHistory>>>;
  status?: Maybe<SubscriptionStatus>;
  subscription?: Maybe<Subscription>;
  subscription_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_email?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type CustomerSubscriptionFilter = {
  billing_cycle?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
  next_billing_date?: InputMaybe<DateOperator>;
  status?: InputMaybe<StringOperator>;
  subscription_id?: InputMaybe<IdOperator>;
  updated_at?: InputMaybe<DateOperator>;
  user_email?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type CustomerSubscriptionInput = {
  billing_cycle: BillingCycle;
  created_at?: InputMaybe<Scalars['Date']['input']>;
  id: Scalars['ID']['input'];
  next_billing_date: Scalars['Date']['input'];
  status: SubscriptionStatus;
  subscription?: InputMaybe<SubscriptionInput>;
  subscription_id: Scalars['ID']['input'];
  updated_at?: InputMaybe<Scalars['Date']['input']>;
  user_email: Scalars['String']['input'];
  user_id: Scalars['ID']['input'];
};

export type DateOperator = {
  after?: InputMaybe<Scalars['DateTime']['input']>;
  before?: InputMaybe<Scalars['DateTime']['input']>;
  between?: InputMaybe<DateRange>;
  eq?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DateRange = {
  end: Scalars['DateTime']['input'];
  start: Scalars['DateTime']['input'];
};

export type DeliveredOrders = {
  __typename?: 'DeliveredOrders';
  cart_id?: Maybe<Scalars['ID']['output']>;
  cart_number?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['Date']['output']>;
  date_to_credit?: Maybe<Scalars['Date']['output']>;
  days_profit_has_delayed?: Maybe<Scalars['Int']['output']>;
  deposit_refunded?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  order_id?: Maybe<Scalars['ID']['output']>;
  order_number?: Maybe<Scalars['String']['output']>;
  profit_added?: Maybe<Scalars['Float']['output']>;
  profit_credit_status?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type DeliveredOrdersFilter = {
  cart_id?: InputMaybe<IdOperator>;
  cart_number?: InputMaybe<StringOperator>;
  date_to_credit?: InputMaybe<DateOperator>;
  days_profit_has_delayed?: InputMaybe<NumberOperator>;
  id?: InputMaybe<IdOperator>;
  order_id?: InputMaybe<IdOperator>;
  order_number?: InputMaybe<StringOperator>;
  profit_credit_status?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type Delivery = {
  __typename?: 'Delivery';
  country?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isPayOnline: Scalars['Boolean']['output'];
  location: Scalars['String']['output'];
  price: Scalars['Float']['output'];
  remarks?: Maybe<Scalars['String']['output']>;
};

export enum DeliveryAgent {
  Shop = 'SHOP',
  Tendo = 'TENDO'
}

export type DeliveryFilter = {
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<StringOperator>;
  isPayOnline?: InputMaybe<BooleanOperator>;
  location?: InputMaybe<StringOperator>;
  price?: InputMaybe<NumberOperator>;
  remarks?: InputMaybe<StringOperator>;
};

export type DeliveryInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  isPayOnline: Scalars['Boolean']['input'];
  location: Scalars['String']['input'];
  price: Scalars['Float']['input'];
  remarks?: InputMaybe<Scalars['String']['input']>;
};

export enum DeliveryOption {
  Manual = 'Manual',
  Swoove = 'Swoove'
}

export type DeliveryPricesInput = {
  address: Scalars['String']['input'];
  destination?: InputMaybe<Latlng>;
  source?: InputMaybe<Latlng>;
};

export type DeliveryZone = {
  __typename?: 'DeliveryZone';
  base_price: Scalars['Float']['output'];
  coordinates: Array<LatLng>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type DeliveryZonesFilter = {
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
};

export type DeliveryZonesInput = {
  base_price: Scalars['Float']['input'];
  coordinates: Array<InputMaybe<Scalars['Any']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
};

export type Details = {
  dob?: InputMaybe<Scalars['Date']['input']>;
  gender?: InputMaybe<Scalars['String']['input']>;
  referred_by?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type Discount = {
  __typename?: 'Discount';
  amount?: Maybe<Scalars['Float']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['Date']['output']>;
  created_by?: Maybe<UserType>;
  description: Scalars['String']['output'];
  expiry_date: Scalars['String']['output'];
  fixed_amount_allocation?: Maybe<FixedAmountAllocation>;
  has_expired?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  is_draft: Scalars['Boolean']['output'];
  locations?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  locations_tagname?: Maybe<Scalars['String']['output']>;
  number_of_times_used?: Maybe<Scalars['Int']['output']>;
  percentage?: Maybe<Scalars['Float']['output']>;
  product_condition?: Maybe<ProductCondition>;
  products?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  redemptions_limit?: Maybe<Scalars['Int']['output']>;
  start_date: Scalars['String']['output'];
  type: DiscountType;
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
  valid_country: Scalars['String']['output'];
};

export type DiscountFilter = {
  amount?: InputMaybe<NumberOperator>;
  code?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<DateOperator>;
  created_by?: InputMaybe<StringOperator>;
  description?: InputMaybe<StringOperator>;
  expiry_date?: InputMaybe<DateOperator>;
  fixed_amount_allocation?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  is_draft?: InputMaybe<BooleanOperator>;
  locations?: InputMaybe<StringOperator>;
  number_of_times_used?: InputMaybe<NumberOperator>;
  percentage?: InputMaybe<NumberOperator>;
  redemptions_limit?: InputMaybe<NumberOperator>;
  start_date?: InputMaybe<DateOperator>;
  type?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
  user_id?: InputMaybe<IdOperator>;
  valid_country?: InputMaybe<StringOperator>;
};

export type DiscountProductCondition = {
  __typename?: 'DiscountProductCondition';
  condition: ProductCondition;
  created_at?: Maybe<Scalars['Date']['output']>;
  discount_id: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  product_sku: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type DiscountProductConditionFilter = {
  condition?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<DateOperator>;
  discount_id?: InputMaybe<IdOperator>;
  id?: InputMaybe<IdOperator>;
  product_sku?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
};

export type DiscountProductConditionRequestDto = {
  condition: ProductCondition;
  product_sku: Scalars['String']['input'];
};

export enum DiscountType {
  FixedAmount = 'FIXED_AMOUNT',
  FreeDelivery = 'FREE_DELIVERY',
  Percentage = 'PERCENTAGE'
}

export type DiscountUseFilter = {
  country_code?: InputMaybe<StringOperator>;
  discount_code?: InputMaybe<StringOperator>;
  discount_id?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type DoesShopExistResponseDto = {
  __typename?: 'DoesShopExistResponseDto';
  shopExists?: Maybe<Scalars['Boolean']['output']>;
};

export enum EftProviders {
  Ozow = 'ozow'
}

export type EstimateTypeDetails = {
  __typename?: 'EstimateTypeDetails';
  icon?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type FeaturedCategories = {
  __typename?: 'FeaturedCategories';
  banners?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  category?: Maybe<ProductCategory>;
  color?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};

export type FeaturedCategoriesFilter = {
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
};

export type FeaturedCategoryInput = {
  category_id: Scalars['ID']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FetchShopifyShopInput = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<ShopifyShopFilter>;
};

export type FetchShopifyShopsInput = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<ShopifyShopFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type FetchUserInput = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<UserFilter>;
  pagination?: InputMaybe<Pagination>;
};

export type FilterDto = {
  filters: Array<FilterMemberDto>;
  logicalOperator: LogicalOperator;
};

export type FilterMemberDto = {
  fields: Array<Scalars['String']['input']>;
  operators: Array<ConditionalOperator>;
  values: Array<Scalars['String']['input']>;
};

export type FindOptionsDto = {
  order?: InputMaybe<OrderByDto>;
  where?: InputMaybe<FilterDto>;
};

export enum FixedAmountAllocation {
  ProductSpecific = 'PRODUCT_SPECIFIC',
  TotalAmount = 'TOTAL_AMOUNT'
}

export type FlutterwaveCard = {
  __typename?: 'FlutterwaveCard';
  country: Scalars['String']['output'];
  expiry: Scalars['String']['output'];
  first_6digits: Scalars['String']['output'];
  issuer: Scalars['String']['output'];
  last_4digits: Scalars['String']['output'];
  type: Scalars['String']['output'];
};

export type FlutterwaveCheckUserBackgroundRequestDto = {
  /** This is the value being checked. */
  entity: Scalars['String']['input'];
  /** This is the type of entity passed to the API. Expected types are PHONE_NUMBER, BVN and EMAIL_ADDRESS */
  type: Scalars['String']['input'];
};

export type FlutterwaveCheckUserBackgroundResponseDto = {
  __typename?: 'FlutterwaveCheckUserBackgroundResponseDto';
  data: Scalars['Boolean']['output'];
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveCustomer = {
  __typename?: 'FlutterwaveCustomer';
  created_at: Scalars['String']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  phone_number?: Maybe<Scalars['String']['output']>;
};

export type FlutterwaveListBankBranchesData = {
  __typename?: 'FlutterwaveListBankBranchesData';
  bank_id: Scalars['Int']['output'];
  bic: Scalars['String']['output'];
  branch_code: Scalars['String']['output'];
  branch_name: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  swift_code: Scalars['String']['output'];
};

export type FlutterwaveListBankBranchesRequestDto = {
  /** This is the Bank's unique ID, it is returned in the call to fetch banks as data.id. */
  id: Scalars['ID']['input'];
};

export type FlutterwaveListBankBranchesResponseDto = {
  __typename?: 'FlutterwaveListBankBranchesResponseDto';
  data?: Maybe<Array<Maybe<FlutterwaveListBankBranchesData>>>;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveListBanksData = {
  __typename?: 'FlutterwaveListBanksData';
  code: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type FlutterwaveListBanksRequestDto = {
  /** This is the country code of the Banks being queried. Expected values include: NG, GH, KE, UG, ZA or TZ. */
  country: Scalars['String']['input'];
};

export type FlutterwaveListBanksResponseDto = {
  __typename?: 'FlutterwaveListBanksResponseDto';
  data?: Maybe<Array<Maybe<FlutterwaveListBanksData>>>;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveMobileMoneyInitialiseChargeMeta = {
  /** Cart object, JSON */
  cart: Scalars['JSON']['input'];
  /** This could be the extra information you want to pass */
  flightID?: InputMaybe<Scalars['String']['input']>;
  /** This could be any message you'd like to associate with this call */
  sideNote?: InputMaybe<Scalars['String']['input']>;
};

export type FlutterwaveMobileMoneyInitialiseChargeRequestDto = {
  /** This is the amount to be charged. */
  amount: Scalars['Int']['input'];
  /** IP - Internet Protocol. This represents the current IP address of the customer carrying out the transaction. */
  client_ip?: InputMaybe<Scalars['String']['input']>;
  /** This is the specified currency to charge in. e.g GHS */
  currency: Scalars['String']['input'];
  /** This is the fingerprint for the device being used. It can be generated using a library on whatever platform is being used. */
  device_fingerprint?: InputMaybe<Scalars['String']['input']>;
  /** This is the email address of the customer */
  email: Scalars['String']['input'];
  /** This is the name of the customer making the payment. */
  fullname?: InputMaybe<Scalars['String']['input']>;
  /** This is used to include additional payment information. */
  meta?: InputMaybe<FlutterwaveMobileMoneyInitialiseChargeMeta>;
  /** This is the customer's mobile money network provider (possible values: mtn, vod,  'VOD', 'TGO', 'MTN',tgo) */
  network: Scalars['String']['input'];
  /** This is the phone number linked to the customer's Bank account or mobile money account */
  phone_number: Scalars['String']['input'];
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** This is a url you provide, we redirect to it after the customer completes payment and append the response to it as query parameters. */
  redirect_url?: InputMaybe<Scalars['String']['input']>;
  /** This is a unique reference peculiar to the transaction being carried out. */
  tx_ref: Scalars['String']['input'];
};

export type FlutterwaveMobileMoneyInitialiseChargeResponseDto = {
  __typename?: 'FlutterwaveMobileMoneyInitialiseChargeResponseDto';
  message: Scalars['String']['output'];
  meta: FlutterwaveMobileMoneyInitialiseChargeResponseMeta;
  status: Scalars['String']['output'];
};

export type FlutterwaveMobileMoneyInitialiseChargeResponseMeta = {
  __typename?: 'FlutterwaveMobileMoneyInitialiseChargeResponseMeta';
  authorization: FlutterwaveMobileMoneyInitialiseChargeResponseMetaAuthorisation;
};

export type FlutterwaveMobileMoneyInitialiseChargeResponseMetaAuthorisation = {
  __typename?: 'FlutterwaveMobileMoneyInitialiseChargeResponseMetaAuthorisation';
  mode: Scalars['String']['output'];
  redirect: Scalars['String']['output'];
};

export type FlutterwaveResolveAccountNumberData = {
  __typename?: 'FlutterwaveResolveAccountNumberData';
  account_name: Scalars['String']['output'];
  account_number: Scalars['String']['output'];
};

export type FlutterwaveResolveAccountNumberRequestDto = {
  /** This is the code for the Bank. You can get this code using the flutterwave/banks endpoint. */
  account_bank: Scalars['String']['input'];
  /** This is the account number (could also be a Merchant ID or MPesa mobile number) to be resolved. If you are resolving a Flutterwave account or MPesa mobile number, You should pass the merchant ID or mobile number. */
  account_number: Scalars['String']['input'];
  /** This is the country associated with the payment type. Expected values include NG, KE and US */
  country?: InputMaybe<Scalars['String']['input']>;
  /** This is the payment type. This is only needed for resolving Mpesa mobile numbers. */
  type?: InputMaybe<Scalars['String']['input']>;
};

export type FlutterwaveResolveAccountNumberResponseDto = {
  __typename?: 'FlutterwaveResolveAccountNumberResponseDto';
  data: FlutterwaveResolveAccountNumberData;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveResolveBvnDetailsData = {
  __typename?: 'FlutterwaveResolveBVNDetailsData';
  address?: Maybe<Scalars['String']['output']>;
  bvn: Scalars['String']['output'];
  date_of_birth: Scalars['String']['output'];
  email?: Maybe<Scalars['String']['output']>;
  enrollment_bank: Scalars['String']['output'];
  enrollment_branch: Scalars['String']['output'];
  first_name?: Maybe<Scalars['String']['output']>;
  gender?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  image_base_64?: Maybe<Scalars['String']['output']>;
  last_name: Scalars['String']['output'];
  lga_of_residence?: Maybe<Scalars['String']['output']>;
  marital_status?: Maybe<Scalars['String']['output']>;
  middle_name?: Maybe<Scalars['String']['output']>;
  nationality?: Maybe<Scalars['String']['output']>;
  phone_number: Scalars['String']['output'];
  registration_date: Scalars['String']['output'];
  state_of_residence?: Maybe<Scalars['String']['output']>;
  watch_listed?: Maybe<Scalars['String']['output']>;
};

export type FlutterwaveResolveBvnDetailsRequestDto = {
  /** This is a valid BVN you want to resolve. */
  bvn: Scalars['String']['input'];
};

export type FlutterwaveResolveBvnDetailsResponseDto = {
  __typename?: 'FlutterwaveResolveBVNDetailsResponseDto';
  data: FlutterwaveResolveBvnDetailsData;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveResolveCardBinData = {
  __typename?: 'FlutterwaveResolveCardBINData';
  card_type: Scalars['String']['output'];
  issuer_info: Scalars['String']['output'];
  issuing_country: Scalars['String']['output'];
};

export type FlutterwaveResolveCardBinRequestDto = {
  /** The first 6 six digits on a debit/credit card */
  bin: Scalars['String']['input'];
};

export type FlutterwaveResolveCardBinResponseDto = {
  __typename?: 'FlutterwaveResolveCardBINResponseDto';
  data: FlutterwaveResolveCardBinData;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type FlutterwaveVerifyTransactionResponseData = {
  __typename?: 'FlutterwaveVerifyTransactionResponseData';
  account_id: Scalars['ID']['output'];
  amount: Scalars['Int']['output'];
  amount_settled: Scalars['Int']['output'];
  app_fee: Scalars['Int']['output'];
  auth_model: Scalars['String']['output'];
  card: FlutterwaveCard;
  charged_amount: Scalars['Int']['output'];
  created_at: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  customer: FlutterwaveCustomer;
  device_fingerprint: Scalars['String']['output'];
  flw_ref: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  ip: Scalars['ID']['output'];
  merchant_fee: Scalars['Int']['output'];
  narration: Scalars['String']['output'];
  payment_type: Scalars['String']['output'];
  processor_response: Scalars['String']['output'];
  status: Scalars['String']['output'];
  tx_ref: Scalars['String']['output'];
};

export type FlutterwaveVerifyTransactionResponseDto = {
  __typename?: 'FlutterwaveVerifyTransactionResponseDto';
  data?: Maybe<FlutterwaveVerifyTransactionResponseData>;
  message: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type ForexRate = {
  __typename?: 'ForexRate';
  createdAt?: Maybe<Scalars['Date']['output']>;
  ghs?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  ngn?: Maybe<Scalars['Float']['output']>;
  updatedAt?: Maybe<Scalars['Date']['output']>;
  zar?: Maybe<Scalars['Float']['output']>;
};

export type ForexRateFilter = {
  createdAt?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
};

export type ForexRateInput = {
  ghs?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  ngn?: InputMaybe<Scalars['Float']['input']>;
  zar?: InputMaybe<Scalars['Float']['input']>;
};

export type GetCustomerInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type GetPaymentByIdRequestDto = {
  id: Scalars['ID']['input'];
};

export type GetPaymentByReferenceRequestDto = {
  reference: Scalars['String']['input'];
};

export type GetPaymentResponseDto = {
  __typename?: 'GetPaymentResponseDto';
  payment?: Maybe<Payment>;
};

export type GetPaymentsResponseDto = {
  __typename?: 'GetPaymentsResponseDto';
  payments: Array<Maybe<Payment>>;
};

export type GetRehookLeaderboardInput = {
  /** Activity ID */
  activity_id?: InputMaybe<Scalars['String']['input']>;
  /** Campaign ID */
  campaign_id: Scalars['String']['input'];
  /** Page number (default: 1) */
  page?: InputMaybe<Scalars['Int']['input']>;
  /** Rehook ID / Source ID of the customer */
  source_id?: InputMaybe<Scalars['String']['input']>;
};

export type GetSalesRequestDto = {
  filter?: InputMaybe<SalesFilter>;
  pagination: Pagination;
};

export type GetSharedProductRequestDto = {
  shared_product_id: Scalars['ID']['input'];
};

export type GetShopResponseDto = {
  __typename?: 'GetShopResponseDto';
  shop?: Maybe<Shop>;
};

export type GetShopsRequestDto = {
  filter?: InputMaybe<ShopFilter>;
  pagination: Pagination;
};

export type GetSupplierPickupLocationInput = {
  supplier_id: Scalars['String']['input'];
};

export type GetTinggCheckoutAuthenticationRequestDto = {
  client_id: Scalars['String']['input'];
  client_secret: Scalars['String']['input'];
  grant_type: Scalars['String']['input'];
};

export type GetTinggCheckoutAuthenticationResponseDto = {
  __typename?: 'GetTinggCheckoutAuthenticationResponseDto';
  access_token: Scalars['String']['output'];
  expires_in: Scalars['Int']['output'];
  refresh_token: Scalars['String']['output'];
  token_type: Scalars['String']['output'];
};

export type IdOperator = {
  eq?: InputMaybe<Scalars['ID']['input']>;
  in?: InputMaybe<Array<Scalars['ID']['input']>>;
  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type InitiateTinggCheckoutRequestDto = {
  /** Customer email the customer wished to pay for. */
  customer_email: Scalars['String']['input'];
  /** Customer first name */
  customer_first_name: Scalars['String']['input'];
  /** Customer last name */
  customer_last_name: Scalars['String']['input'];
  /** Where we will redirect the customer to when the payment time passed above expires. */
  fail_redirect_url?: InputMaybe<Scalars['String']['input']>;
  /** Merchant's invoice number. */
  invoice_number?: InputMaybe<Scalars['String']['input']>;
  /** Mobile number for the customer. */
  msisdn: Scalars['String']['input'];
  /** Amount you wish to start collecting for. */
  request_amount: Scalars['Float']['input'];
  /** Shows the description of the item being purchased. */
  request_description?: InputMaybe<Scalars['String']['input']>;
};

export type Instructions = {
  __typename?: 'Instructions';
  en?: Maybe<TinggCheckoutResponseLang>;
  sw?: Maybe<TinggCheckoutResponseLang>;
};

export type Latlng = {
  lat?: InputMaybe<Scalars['String']['input']>;
  lng?: InputMaybe<Scalars['String']['input']>;
};

export type LatLng = {
  __typename?: 'LatLng';
  lat: Scalars['Float']['output'];
  lng: Scalars['Float']['output'];
};

export type LatLngInput = {
  lat: Scalars['Float']['input'];
  lng: Scalars['Float']['input'];
};

export type Leaderboard = {
  __typename?: 'Leaderboard';
  points?: Maybe<Scalars['Int']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  reseller?: Maybe<User>;
  reward?: Maybe<Scalars['String']['output']>;
  source_id: Scalars['ID']['output'];
};

export type LoadProductToShopify = {
  combination_string?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  media?: InputMaybe<Array<Scalars['String']['input']>>;
  price?: InputMaybe<Scalars['Float']['input']>;
  product_id: Scalars['ID']['input'];
  product_origin: Scalars['String']['input'];
  qty: Scalars['Int']['input'];
  sku: Scalars['String']['input'];
  supplier_generic_name?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  title: Scalars['String']['input'];
  uuid: Scalars['String']['input'];
};

export type LoadProductToShopifyInput = {
  integration_id?: InputMaybe<Scalars['ID']['input']>;
  products?: InputMaybe<Array<LoadProductToShopify>>;
};

export enum LogicalOperator {
  And = 'AND',
  Or = 'OR'
}

export type MakeTinggPaymentRequestDto = {
  customer_email: Scalars['String']['input'];
  customer_first_name: Scalars['String']['input'];
  customer_last_name: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  reasonForPayment: ReasonForPayment;
  request_amount: Scalars['Float']['input'];
};

export type MoneyOperator = {
  between?: InputMaybe<MoneyRange>;
  eq?: InputMaybe<Scalars['Money']['input']>;
  gt?: InputMaybe<Scalars['Money']['input']>;
  gte?: InputMaybe<Scalars['Money']['input']>;
  lt?: InputMaybe<Scalars['Money']['input']>;
  lte?: InputMaybe<Scalars['Money']['input']>;
};

export type MoneyRange = {
  end: Scalars['Money']['input'];
  start: Scalars['Money']['input'];
};

export type Mutation = {
  __typename?: 'Mutation';
  accountRegister: Auth;
  activateShop: Scalars['Boolean']['output'];
  addBusinessDocuments?: Maybe<Scalars['Boolean']['output']>;
  addComment?: Maybe<Scalars['Boolean']['output']>;
  addCommentsToProduct?: Maybe<Scalars['Boolean']['output']>;
  addItemToCart?: Maybe<Scalars['Boolean']['output']>;
  addPluginToUser?: Maybe<UserPlugin>;
  addProductConditionsToDiscount?: Maybe<Scalars['Boolean']['output']>;
  addProductToShop?: Maybe<Scalars['Boolean']['output']>;
  addProductToShopCollection?: Maybe<Scalars['Boolean']['output']>;
  addProductsToCollection?: Maybe<Scalars['Boolean']['output']>;
  addProductsToShopCollection?: Maybe<Scalars['Boolean']['output']>;
  addProductstoDiscount?: Maybe<Scalars['Boolean']['output']>;
  addSupplierAgreementTerms?: Maybe<Scalars['Boolean']['output']>;
  addSupplierBusinessDetails?: Maybe<Scalars['Boolean']['output']>;
  addSupplierCategories: Scalars['Boolean']['output'];
  addSupplierDeviceToken?: Maybe<Scalars['Boolean']['output']>;
  addSupplierLocation?: Maybe<SupplierLocation>;
  addSupplierPaymentDetails?: Maybe<Scalars['Boolean']['output']>;
  addUserPaymentDetails?: Maybe<Scalars['Boolean']['output']>;
  adjustWalletBalance: Scalars['Boolean']['output'];
  allowResellingOfProduct?: Maybe<Scalars['Boolean']['output']>;
  authenticateWithToken: SupplierAuthPayload;
  bobCancelShipment?: Maybe<BobShipment>;
  /** create new orders for accounts */
  bobCreateOrder?: Maybe<BobOrder>;
  bobCreateShipment?: Maybe<BobShipment>;
  bulkCreateProducts?: Maybe<Scalars['Boolean']['output']>;
  cancelCustomerSubscription?: Maybe<CustomerSubscription>;
  changePassword?: Maybe<Scalars['Boolean']['output']>;
  changeResellerSupplierShop?: Maybe<Scalars['Boolean']['output']>;
  changeSupplierEmail?: Maybe<Scalars['Boolean']['output']>;
  changeSupplierPassword?: Maybe<Scalars['Boolean']['output']>;
  checkPasswordAvailability?: Maybe<Scalars['Boolean']['output']>;
  checkTransactionStatus?: Maybe<Scalars['Boolean']['output']>;
  claimCoupon?: Maybe<Scalars['Boolean']['output']>;
  claimDiscount?: Maybe<Scalars['Boolean']['output']>;
  clearCart?: Maybe<Scalars['Boolean']['output']>;
  createAppBanner?: Maybe<Scalars['Boolean']['output']>;
  createCampaign?: Maybe<Campaign>;
  createCatalog?: Maybe<Scalars['Boolean']['output']>;
  createCollectionConfig?: Maybe<Scalars['Boolean']['output']>;
  createCoupon?: Maybe<Scalars['Boolean']['output']>;
  createCustomer?: Maybe<Customer>;
  createCustomerAddress?: Maybe<CustomerAddress>;
  createCustomerSubscription?: Maybe<CustomerSubscription>;
  createDeliveryLocation: Scalars['Boolean']['output'];
  createDeliveryZone?: Maybe<Scalars['Boolean']['output']>;
  createDiscount?: Maybe<Discount>;
  createFeaturedCategory?: Maybe<Scalars['Boolean']['output']>;
  createOrder?: Maybe<Scalars['Boolean']['output']>;
  createPayoutRequest?: Maybe<Scalars['Boolean']['output']>;
  createPickUpLocation: Scalars['Boolean']['output'];
  createPlugin?: Maybe<Plugin>;
  createProduct?: Maybe<Scalars['Boolean']['output']>;
  createProductCategory?: Maybe<Scalars['Boolean']['output']>;
  createProductShipment?: Maybe<Scalars['Boolean']['output']>;
  createPromoBanner?: Maybe<Scalars['Boolean']['output']>;
  createReview: Scalars['Boolean']['output'];
  createSharedProduct: CreateSharedProductResponseDto;
  createShop: CreateShopResponseDto;
  createShopCollection?: Maybe<Scalars['Boolean']['output']>;
  createSubscriptionPackage?: Maybe<SubscriptionPackage>;
  createSupplier?: Maybe<SupplierCreationResponse>;
  createSupplierCustomer?: Maybe<Customer>;
  createTerm: Scalars['Boolean']['output'];
  createTopDeal?: Maybe<Scalars['Boolean']['output']>;
  createTopDealBanner?: Maybe<Scalars['Boolean']['output']>;
  createTrendingProduct?: Maybe<Scalars['Boolean']['output']>;
  creditUserWalletWithDelayedOrders?: Maybe<Scalars['Boolean']['output']>;
  creditWallet: Scalars['Boolean']['output'];
  customerSignIn?: Maybe<CustomerAuthPayload>;
  customerSignUp?: Maybe<CustomerAuthPayload>;
  customerSupplierSignUp?: Maybe<CustomerAuthPayload>;
  debitWallet: Scalars['String']['output'];
  deleteAppBanner?: Maybe<Scalars['Boolean']['output']>;
  deleteCampaign?: Maybe<Scalars['Boolean']['output']>;
  deleteCoupon?: Maybe<Scalars['Boolean']['output']>;
  deleteDeliveryLocation: Scalars['Boolean']['output'];
  deleteDeliveryZone?: Maybe<Scalars['Boolean']['output']>;
  deleteDiscount?: Maybe<Scalars['Boolean']['output']>;
  deleteFeaturedCategory?: Maybe<Scalars['Boolean']['output']>;
  deletePayoutRequest?: Maybe<Scalars['Boolean']['output']>;
  deletePickUpLocation: Scalars['Boolean']['output'];
  deletePlugin?: Maybe<Scalars['Boolean']['output']>;
  deleteTerm: Scalars['Boolean']['output'];
  deleteTopDeal?: Maybe<Scalars['Boolean']['output']>;
  deleteTrendingProduct?: Maybe<Scalars['Boolean']['output']>;
  editProductStat?: Maybe<Scalars['Boolean']['output']>;
  forgotPassword?: Maybe<Scalars['String']['output']>;
  initiateWalletForUser?: Maybe<Wallet>;
  inviteResellerBySupplier?: Maybe<Scalars['Boolean']['output']>;
  joinSupplierResellerNetwork?: Maybe<Scalars['Boolean']['output']>;
  loadProductsToShopify?: Maybe<Scalars['Boolean']['output']>;
  /** Make payment using the tingg infrastructure. */
  makePayment: Scalars['String']['output'];
  makeRequestForProduct?: Maybe<Scalars['Boolean']['output']>;
  markCouponAsExpired: Scalars['Boolean']['output'];
  onPurchaseSharedProduct?: Maybe<OnPurchaseSharedProductResponseDto>;
  opsAttendToProduct?: Maybe<Scalars['Boolean']['output']>;
  /**
   * This method is called when you want to generate a payment URL that will be included in an email or SMS.
   * If you are using this to generate a link that will get used in SMSes, emails or for QR codes you need to pass an extra Boolean variable in the post data object i.e.
   * GenerateShortUrl with a value of true.
   */
  ozowGeneratePaymentUrl: OzowGeneratePaymentUrlResponseDto;
  /** This method is called when you want to query transactions using Ozow's reference. */
  ozowGetTransaction?: Maybe<OzowTransactionResponseDto>;
  /** This method is called when you want to query transactions using the merchant's reference. This method can return multiple results as Ozow does not restrict the merchant from sending duplicate merchant references even though we do advise that a unique reference is sent per transaction. The number of results returned are limited to 10. */
  ozowGetTransactionByReference?: Maybe<Array<Maybe<OzowTransactionResponseDto>>>;
  /** This operation is called after the user confirms his purchase and has chosen Ozow as his preferred payment method */
  ozowPaymentRequest: OzowPaymentRequestResultDto;
  /**
   * The Pay with Bank feature allows customers pay through internet banking portal or by providing their bank account number and authenticating using an OTP sent to their phone or email.
   * This is different from Bank Transfers where customers transfer money into a bank account.
   *
   * If the selected bank is Kuda, you need to make use of phone and token instead of account_number in the bank object:
   */
  paystackBankInitialiseCharge: PaystackBankInitialiseChargeResponseDto;
  /** Create multiple transfer recipients in batches. A duplicate account number will lead to the retrieval of the existing record. */
  paystackBulkCreateTransferRecipient: PaystackBulkCreateTransferRecipientResponseDto;
  /** Creates a new recipient. A duplicate account number will lead to the retrieval of the existing record. */
  paystackCreateTransferRecipient: PaystackCreateTransferRecipientResponseDto;
  /** Deletes a transfer recipient (sets the transfer recipient to inactive) */
  paystackDeleteTransferRecipient: PaystackDeleteTransferRecipientResponseDto;
  /** EFT payments are an instant bank transfer payment method where customers pay merchants through their internet banking interfaces. When the developer specifies an EFT provider, we do a redirect to the providers platform where the customer provides their payment details after which the payment is authorized. */
  paystackEFTInitialiseCharge: PaystackEftInitialiseChargeResponseDto;
  /** Finalize an initiated transfer */
  paystackFinaliseTransfer: PaystackFinaliseTransferResponseDto;
  /** You need to disable the Transfers OTP requirement to use this endpoint. */
  paystackInitiateBulkTransfer: PaystackInitiateBulkTransferResponseDto;
  /** Status of transfer object returned will be pending if OTP is disabled. In the event that an OTP is required, status will read otp. */
  paystackInitiateTransfer: PaystackInitiateTransferResponseDto;
  /** The QR option generates a QR code that allow customers to use a supported mobile app to complete payments. */
  paystackQRInitialiseCharge: PaystackQrInitialiseChargeResponseDto;
  /** Initialize a transaction from your backend */
  paystackTransactionInitialise: PaystackTransactionInitialiseResponseDto;
  /**
   * This Payment method is specifically for Nigerian customers.
   * The Pay via USSD channel allows your Nigerian customers to pay you by dialling a USSD code on their mobile device. This code is usually in the form of * followed by some code and ending with #. The user is prompted to authenticate the transaction with a PIN and then it is confirmed.
   */
  paystackUSSDInitialiseCharge: PaystackUssdInitialiseChargeResponseDto;
  /** Update an existing recipient. An duplicate account number will lead to the retrieval of the existing record. */
  paystackUpdateTransferRecipient: PaystackUpdateTransferRecipientResponseDto;
  processManualProfitPayout?: Maybe<Scalars['Boolean']['output']>;
  processOrder?: Maybe<Scalars['Boolean']['output']>;
  processProfitPayout?: Maybe<Scalars['Boolean']['output']>;
  publishOrUnpublishProduct?: Maybe<Scalars['Boolean']['output']>;
  refundResellerSecurityDeposit?: Maybe<Scalars['Boolean']['output']>;
  refundResellerSecurityDepositBulk?: Maybe<Scalars['Boolean']['output']>;
  removeCatalog?: Maybe<Scalars['Boolean']['output']>;
  removeCategory?: Maybe<Scalars['Boolean']['output']>;
  removeCollectionConfig?: Maybe<Scalars['Boolean']['output']>;
  removeCustomer?: Maybe<Scalars['Boolean']['output']>;
  removeCustomerAddress?: Maybe<Scalars['Boolean']['output']>;
  removeItemFromCart?: Maybe<Scalars['Boolean']['output']>;
  removePluginFromUser?: Maybe<Scalars['Boolean']['output']>;
  removeProduct?: Maybe<Scalars['Boolean']['output']>;
  removeProductCategory?: Maybe<Scalars['Boolean']['output']>;
  removeProductCombination?: Maybe<Scalars['Boolean']['output']>;
  removeProductConditionsFromDiscount?: Maybe<Scalars['Boolean']['output']>;
  removeProductFromCollection?: Maybe<Scalars['Boolean']['output']>;
  removeProductFromShop?: Maybe<Scalars['Boolean']['output']>;
  removeProductImage?: Maybe<Scalars['Boolean']['output']>;
  removePromoBanner?: Maybe<Scalars['Boolean']['output']>;
  removeResellerBySupplier?: Maybe<Scalars['Boolean']['output']>;
  removeReview?: Maybe<Scalars['Boolean']['output']>;
  removeShopCollection?: Maybe<Scalars['Boolean']['output']>;
  removeShopifyShop?: Maybe<Scalars['Boolean']['output']>;
  removeSupplier?: Maybe<Scalars['Boolean']['output']>;
  removeTopDealsBanners?: Maybe<Scalars['Boolean']['output']>;
  removeUser?: Maybe<Scalars['Boolean']['output']>;
  removeVariation?: Maybe<Scalars['Boolean']['output']>;
  requestChangeEmail?: Maybe<Scalars['Boolean']['output']>;
  requestChangePhone?: Maybe<Scalars['Boolean']['output']>;
  requestEmailVerification?: Maybe<Scalars['String']['output']>;
  requestOTP: RequestOtpResponse;
  requestPhoneVerification?: Maybe<PhoneVerificationOutPut>;
  requestSupplierEmailVerification: Scalars['String']['output'];
  requestSupplierOTP?: Maybe<RequestSupplierOtpResponse>;
  requestSupplierPhoneVerification: RequestSupplierPhoneVerificationResponse;
  resetPassword?: Maybe<Scalars['Boolean']['output']>;
  resetSupplierPassword?: Maybe<Scalars['Boolean']['output']>;
  retryProcessingItems?: Maybe<Scalars['Boolean']['output']>;
  reverseProfit?: Maybe<Scalars['Boolean']['output']>;
  reverseTransaction: Scalars['Boolean']['output'];
  sendSupplierResetPasswordMail?: Maybe<Scalars['Boolean']['output']>;
  setSupplierPickupLocation?: Maybe<Scalars['Boolean']['output']>;
  setSupplierProductMarkup?: Maybe<Scalars['Boolean']['output']>;
  setupAccount: RequestOtpResponse;
  supplierSignIn: SupplierAuthPayload;
  syncShopifyProducts?: Maybe<Scalars['Boolean']['output']>;
  /** This is when the merchant wants to acknowledge the request with a final status or a delivered status. This is sent as a JSON POST request. */
  tinggAcknowledgement: TinggAcknowledgementResponseDto;
  /** This function is used by merchants to post a charge request i.e. request to debit amount from customer for the checkout request that was posted earlier in the request/initiate function. */
  tinggChargeRequest: TinggPollPaymentStatusResponseDto;
  /** For this experience the customer controls the payment experience from their end where the customer invokes our APIs in order to facilitate payment. To invoke the payment the customer first generates a token which the customer passes on the headers as described above. */
  tinggCheckoutCharge: Scalars['String']['output'];
  /** For this experience the customer controls the payment experience from their end where the customer invokes our APIs in order to facilitate payment. To invoke the payment the customer first generates a token which the customer passes on the headers as described above. */
  tinggCheckoutRequest: TinggCheckoutResponseDto;
  /** This function will allow billers to charge their customers with a specified amount using both local cards (issued in your country of operations) and International cards. This is sent as a JSON POST request. */
  tinggDirectCardCharge: TinggDirectCardResponseDto;
  /** Call when payment failed after tingg direct card charge */
  tinggOnPaymentFailed: Scalars['Boolean']['output'];
  /** Call when payment is successful after tingg direct card charge */
  tinggOnPaymentSuccessful: Scalars['Boolean']['output'];
  /** Keep polling tinggQueryStatus until a success or failure response is returned */
  tinggPollPaymentStatus: TinggPollPaymentStatusResponseDto;
  /** The query status is used by the merchant if they want to query for the status of the request they raised. In this case this is a GET request where the merchant passes service_code and merchant_transaction_id as part of the query parameters */
  tinggQueryStatus: TinggQueryStatusResponseDto;
  /** This function allows a merchant to refund payments that were already acknowledged as received and processed successsfully */
  tinggRefund: TinggRefundResponseDto;
  tinggWebhook: TinggWebhookResponseDto;
  toggleCategoryState: Scalars['Boolean']['output'];
  toggleFreeDelivery: Scalars['Boolean']['output'];
  unshareProduct: Scalars['Boolean']['output'];
  updateAppBanner?: Maybe<Scalars['Boolean']['output']>;
  updateCampaign?: Maybe<Campaign>;
  updateCatalog?: Maybe<Scalars['Boolean']['output']>;
  updateCollectionConfig?: Maybe<Scalars['Boolean']['output']>;
  updateCoupon?: Maybe<Scalars['Boolean']['output']>;
  updateCustomer?: Maybe<Scalars['Boolean']['output']>;
  updateCustomerAddressOnOrder?: Maybe<Scalars['Boolean']['output']>;
  updateDeliveryLocation: Scalars['Boolean']['output'];
  updateDeliveryZone?: Maybe<Scalars['Boolean']['output']>;
  updateDiscount?: Maybe<Discount>;
  updateForexRate?: Maybe<Scalars['Boolean']['output']>;
  updateOrderDetailsOps?: Maybe<Scalars['Boolean']['output']>;
  updateOrderSKU?: Maybe<Scalars['Boolean']['output']>;
  updatePayoutRequest?: Maybe<Scalars['Boolean']['output']>;
  updatePickUpLocation: Scalars['Boolean']['output'];
  updatePlugin?: Maybe<Scalars['Boolean']['output']>;
  updateProduct?: Maybe<Scalars['Boolean']['output']>;
  updateProductCategories?: Maybe<Scalars['Boolean']['output']>;
  updateProductCategory?: Maybe<Scalars['Boolean']['output']>;
  updateProductCategoryAndTags?: Maybe<Scalars['Boolean']['output']>;
  updateProductCombination?: Maybe<Scalars['Boolean']['output']>;
  updateProductDistribution?: Maybe<Scalars['Boolean']['output']>;
  updateProductInformation?: Maybe<Scalars['Boolean']['output']>;
  updateProductInventory?: Maybe<Scalars['Boolean']['output']>;
  updateProductLikeState?: Maybe<Scalars['Boolean']['output']>;
  updateProductMedia?: Maybe<Scalars['Boolean']['output']>;
  updateProductSaveState?: Maybe<Scalars['Boolean']['output']>;
  updateProductShipment?: Maybe<Scalars['Boolean']['output']>;
  updateProductStock?: Maybe<Scalars['Boolean']['output']>;
  updatePromoBanner?: Maybe<Scalars['Boolean']['output']>;
  updateShopCollection?: Maybe<Scalars['Boolean']['output']>;
  updateShopDetails: UpdateShopDetailsResponseDto;
  updateSubscriptionPackage?: Maybe<SubscriptionPackage>;
  updateSupplier: Scalars['Boolean']['output'];
  updateSupplierBusinessContact?: Maybe<Scalars['Boolean']['output']>;
  updateSupplierBusinessDetails?: Maybe<Scalars['Boolean']['output']>;
  updateSupplierDetails?: Maybe<Scalars['Boolean']['output']>;
  updateSupplierGenericName?: Maybe<Scalars['Boolean']['output']>;
  updateSupplierPayment?: Maybe<SupplierPaymentDetails>;
  updateSupplierProfile?: Maybe<Scalars['Boolean']['output']>;
  updateTerm: Scalars['Boolean']['output'];
  updateUserDetails?: Maybe<Scalars['Boolean']['output']>;
  updateVariation?: Maybe<Scalars['Boolean']['output']>;
  userLogin?: Maybe<Auth>;
  verifyAccountBalance: Scalars['Boolean']['output'];
  verifyEmail?: Maybe<Scalars['Boolean']['output']>;
  verifyOTP?: Maybe<Scalars['Boolean']['output']>;
  verifyPayoutTransaction: Scalars['Boolean']['output'];
  verifyProduct?: Maybe<Scalars['Boolean']['output']>;
  verifySupplierAccount?: Maybe<Scalars['Boolean']['output']>;
  verifySupplierBusiness?: Maybe<Scalars['Boolean']['output']>;
  verifySupplierOTP?: Maybe<Scalars['Boolean']['output']>;
};


export type MutationAccountRegisterArgs = {
  input?: InputMaybe<AccountRegisterInput>;
};


export type MutationActivateShopArgs = {
  data: ActivateShopRequestDto;
};


export type MutationAddBusinessDocumentsArgs = {
  input?: InputMaybe<AddBusinessDocumentInput>;
};


export type MutationAddCommentArgs = {
  input?: InputMaybe<AddCommentInput>;
};


export type MutationAddCommentsToProductArgs = {
  input?: InputMaybe<AddCommentsToProductInput>;
};


export type MutationAddItemToCartArgs = {
  input: AddItemToCartInput;
};


export type MutationAddPluginToUserArgs = {
  data: AddPluginToUserRequestDto;
};


export type MutationAddProductConditionsToDiscountArgs = {
  input: Array<AddProductConditionToDiscountRequestDto>;
};


export type MutationAddProductToShopArgs = {
  product_id: Scalars['ID']['input'];
  profit_added: Scalars['Float']['input'];
  shop_id: Scalars['ID']['input'];
};


export type MutationAddProductToShopCollectionArgs = {
  collection_id: Scalars['ID']['input'];
  product_id: Scalars['ID']['input'];
};


export type MutationAddProductsToCollectionArgs = {
  input?: InputMaybe<AddProductsToCollectionInput>;
};


export type MutationAddProductsToShopCollectionArgs = {
  collection_id: Scalars['ID']['input'];
  product_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
};


export type MutationAddProductstoDiscountArgs = {
  discountId: Scalars['ID']['input'];
  productSKUs: Array<Scalars['String']['input']>;
};


export type MutationAddSupplierAgreementTermsArgs = {
  input?: InputMaybe<AddSupplierAgreementTermsInput>;
};


export type MutationAddSupplierBusinessDetailsArgs = {
  input?: InputMaybe<SupplierBusinessInput>;
};


export type MutationAddSupplierCategoriesArgs = {
  categories: Array<Scalars['ID']['input']>;
  supplier_id: Scalars['ID']['input'];
};


export type MutationAddSupplierDeviceTokenArgs = {
  input?: InputMaybe<SupplierAddDeviceTokenInput>;
};


export type MutationAddSupplierLocationArgs = {
  input?: InputMaybe<AddSupplierLocationInput>;
};


export type MutationAddSupplierPaymentDetailsArgs = {
  input?: InputMaybe<AddSupplierPaymentInput>;
};


export type MutationAddUserPaymentDetailsArgs = {
  input?: InputMaybe<UserPaymentInput>;
};


export type MutationAdjustWalletBalanceArgs = {
  user_id: Scalars['ID']['input'];
};


export type MutationAllowResellingOfProductArgs = {
  id: Scalars['ID']['input'];
};


export type MutationAuthenticateWithTokenArgs = {
  input?: InputMaybe<AuthenticateWithTokenInput>;
};


export type MutationBobCancelShipmentArgs = {
  data: BobCancelShipmentRequestDto;
};


export type MutationBobCreateOrderArgs = {
  data: BobCreateOrderRequestDto;
};


export type MutationBobCreateShipmentArgs = {
  data: BobCreateShipmentRequestDto;
};


export type MutationBulkCreateProductsArgs = {
  products?: InputMaybe<Array<InputMaybe<TempCreateProductInput>>>;
};


export type MutationCancelCustomerSubscriptionArgs = {
  user_id: Scalars['ID']['input'];
};


export type MutationChangePasswordArgs = {
  input?: InputMaybe<ChangePasswordInput>;
};


export type MutationChangeResellerSupplierShopArgs = {
  reseller_id: Scalars['ID']['input'];
  supplier_shop_id: Scalars['ID']['input'];
};


export type MutationChangeSupplierEmailArgs = {
  input?: InputMaybe<SupplierEmailChangeInput>;
};


export type MutationChangeSupplierPasswordArgs = {
  input?: InputMaybe<SupplierPasswordChangeInput>;
};


export type MutationCheckPasswordAvailabilityArgs = {
  input?: InputMaybe<CheckPasswordAvailabilityInput>;
};


export type MutationCheckTransactionStatusArgs = {
  reference: Scalars['String']['input'];
};


export type MutationClaimCouponArgs = {
  input: ClaimCouponInput;
};


export type MutationClaimDiscountArgs = {
  input: ClaimDiscountRequestDto;
};


export type MutationClearCartArgs = {
  user_id: Scalars['ID']['input'];
};


export type MutationCreateAppBannerArgs = {
  input: AppBannerInput;
};


export type MutationCreateCampaignArgs = {
  data: CreateCampaignInput;
};


export type MutationCreateCatalogArgs = {
  input?: InputMaybe<CatalogInput>;
};


export type MutationCreateCollectionConfigArgs = {
  input?: InputMaybe<CatalogConfigInput>;
};


export type MutationCreateCouponArgs = {
  input: CouponInput;
};


export type MutationCreateCustomerArgs = {
  input?: InputMaybe<CustomerInput>;
};


export type MutationCreateCustomerAddressArgs = {
  customer_id: Scalars['ID']['input'];
  input?: InputMaybe<AddressInput>;
};


export type MutationCreateCustomerSubscriptionArgs = {
  input: CreateCustomerSubscriptionRequestDto;
};


export type MutationCreateDeliveryLocationArgs = {
  input: DeliveryInput;
};


export type MutationCreateDeliveryZoneArgs = {
  input?: InputMaybe<DeliveryZonesInput>;
};


export type MutationCreateDiscountArgs = {
  input: CreateDiscountRequestDto;
};


export type MutationCreateFeaturedCategoryArgs = {
  banners?: InputMaybe<Scalars['String']['input']>;
  categoryId: Scalars['ID']['input'];
  color: Scalars['String']['input'];
};


export type MutationCreateOrderArgs = {
  input?: InputMaybe<OrderCreateInput>;
};


export type MutationCreatePayoutRequestArgs = {
  input?: InputMaybe<PayoutInput>;
};


export type MutationCreatePickUpLocationArgs = {
  input: PickUpInput;
};


export type MutationCreatePluginArgs = {
  data: CreatePluginRequestDto;
};


export type MutationCreateProductArgs = {
  input?: InputMaybe<CreateProductInput>;
};


export type MutationCreateProductCategoryArgs = {
  input?: InputMaybe<ProductCategoryInput>;
};


export type MutationCreateProductShipmentArgs = {
  input?: InputMaybe<ProductShipmentInput>;
};


export type MutationCreatePromoBannerArgs = {
  input?: InputMaybe<PromoBannerInput>;
};


export type MutationCreateReviewArgs = {
  input: ReviewInput;
};


export type MutationCreateSharedProductArgs = {
  input: CreateSharedProductRequestDto;
};


export type MutationCreateShopArgs = {
  data: CreateShopRequestDto;
};


export type MutationCreateShopCollectionArgs = {
  input?: InputMaybe<ShopCollectionInput>;
};


export type MutationCreateSubscriptionPackageArgs = {
  input: CreateSubscriptionRequestDto;
};


export type MutationCreateSupplierArgs = {
  input?: InputMaybe<SupplierInput>;
};


export type MutationCreateSupplierCustomerArgs = {
  input?: InputMaybe<CustomerInput>;
  supplier_id: Scalars['ID']['input'];
};


export type MutationCreateTermArgs = {
  input: TermInput;
};


export type MutationCreateTopDealArgs = {
  productId: Scalars['ID']['input'];
};


export type MutationCreateTopDealBannerArgs = {
  input: CreateTopDealBannerInput;
};


export type MutationCreateTrendingProductArgs = {
  productId: Scalars['ID']['input'];
};


export type MutationCreditUserWalletWithDelayedOrdersArgs = {
  orders: Array<InputMaybe<Scalars['ID']['input']>>;
  paid_security_deposit?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreditWalletArgs = {
  amount: Scalars['Float']['input'];
  reference: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  transaction_type?: InputMaybe<Scalars['String']['input']>;
};


export type MutationCustomerSignInArgs = {
  input?: InputMaybe<CustomerLoginInput>;
};


export type MutationCustomerSignUpArgs = {
  input?: InputMaybe<CustomerInput>;
  user_id: Scalars['ID']['input'];
};


export type MutationCustomerSupplierSignUpArgs = {
  input?: InputMaybe<CustomerInput>;
  supplier_id: Scalars['ID']['input'];
};


export type MutationDebitWalletArgs = {
  amount: Scalars['Float']['input'];
  user_id: Scalars['ID']['input'];
};


export type MutationDeleteAppBannerArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteCampaignArgs = {
  filter?: InputMaybe<CampaignFilter>;
};


export type MutationDeleteCouponArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteDeliveryLocationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteDeliveryZoneArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteDiscountArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteFeaturedCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeletePayoutRequestArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeletePickUpLocationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeletePluginArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTermArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteTopDealArgs = {
  productId: Scalars['ID']['input'];
};


export type MutationDeleteTrendingProductArgs = {
  productId: Scalars['ID']['input'];
};


export type MutationEditProductStatArgs = {
  input: EditProductStatInput;
};


export type MutationForgotPasswordArgs = {
  input?: InputMaybe<ForgotPasswordInput>;
};


export type MutationInitiateWalletForUserArgs = {
  user_id: Scalars['ID']['input'];
};


export type MutationInviteResellerBySupplierArgs = {
  email: Scalars['String']['input'];
  supplier_id: Scalars['ID']['input'];
  terms_id: Scalars['ID']['input'];
};


export type MutationJoinSupplierResellerNetworkArgs = {
  reseller_id: Scalars['ID']['input'];
  supplier_id: Scalars['ID']['input'];
  terms_id: Scalars['ID']['input'];
};


export type MutationLoadProductsToShopifyArgs = {
  input?: InputMaybe<LoadProductToShopifyInput>;
};


export type MutationMakePaymentArgs = {
  data?: InputMaybe<MakeTinggPaymentRequestDto>;
};


export type MutationMakeRequestForProductArgs = {
  input?: InputMaybe<MakeRequestForProduct>;
};


export type MutationMarkCouponAsExpiredArgs = {
  id: Scalars['ID']['input'];
};


export type MutationOnPurchaseSharedProductArgs = {
  input?: InputMaybe<OnPurchaseSharedProductRequestDto>;
};


export type MutationOpsAttendToProductArgs = {
  categories?: InputMaybe<Array<Scalars['String']['input']>>;
  id: Scalars['ID']['input'];
  media?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type MutationOzowGeneratePaymentUrlArgs = {
  generateShortUrl?: InputMaybe<Scalars['Boolean']['input']>;
  input: OzowPaymentRequestDto;
};


export type MutationOzowGetTransactionArgs = {
  input: OzowGetTransactionRequestDto;
};


export type MutationOzowGetTransactionByReferenceArgs = {
  input: OzowGetTransactionByReferenceRequestDto;
};


export type MutationOzowPaymentRequestArgs = {
  data?: InputMaybe<OzowPaymentRequestDto>;
};


export type MutationPaystackBankInitialiseChargeArgs = {
  data: PaystackBankInitialiseChargeRequestDto;
};


export type MutationPaystackBulkCreateTransferRecipientArgs = {
  data: PaystackBulkCreateTransferRecipientRequestDto;
};


export type MutationPaystackCreateTransferRecipientArgs = {
  data: PaystackCreateTransferRecipientRequestDto;
};


export type MutationPaystackDeleteTransferRecipientArgs = {
  data: PaystackDeleteTransferRecipientRequestDto;
};


export type MutationPaystackEftInitialiseChargeArgs = {
  data: PaystackEftInitialiseChargeRequestDto;
};


export type MutationPaystackFinaliseTransferArgs = {
  data: PaystackFinaliseTransferRequestDto;
};


export type MutationPaystackInitiateBulkTransferArgs = {
  data: PaystackInitiateBulkTransferRequestDto;
};


export type MutationPaystackInitiateTransferArgs = {
  data: PaystackInitiateTransferRequestDto;
};


export type MutationPaystackQrInitialiseChargeArgs = {
  data: PaystackQrInitialiseChargeRequestDto;
};


export type MutationPaystackTransactionInitialiseArgs = {
  data: PaystackTransactionInitialiseRequestDto;
};


export type MutationPaystackUssdInitialiseChargeArgs = {
  data: PaystackUssdInitialiseChargeRequestDto;
};


export type MutationPaystackUpdateTransferRecipientArgs = {
  data: PaystackUpdateTransferRecipientRequestDto;
};


export type MutationProcessManualProfitPayoutArgs = {
  cart_number: Scalars['String']['input'];
};


export type MutationProcessOrderArgs = {
  id: Scalars['ID']['input'];
  quantity?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};


export type MutationProcessProfitPayoutArgs = {
  orderId: Scalars['ID']['input'];
};


export type MutationPublishOrUnpublishProductArgs = {
  id: Scalars['ID']['input'];
  published: Scalars['Boolean']['input'];
};


export type MutationRefundResellerSecurityDepositArgs = {
  paid?: InputMaybe<Scalars['Boolean']['input']>;
  reference: Scalars['String']['input'];
};


export type MutationRefundResellerSecurityDepositBulkArgs = {
  paid?: InputMaybe<Scalars['Boolean']['input']>;
  references: Array<InputMaybe<Scalars['String']['input']>>;
};


export type MutationRemoveCatalogArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveCategoryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveCollectionConfigArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveCustomerArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveCustomerAddressArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveItemFromCartArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemovePluginFromUserArgs = {
  filter: UserPluginFilter;
};


export type MutationRemoveProductArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveProductCategoryArgs = {
  category_id: Scalars['ID']['input'];
  product_id: Scalars['ID']['input'];
};


export type MutationRemoveProductCombinationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveProductConditionsFromDiscountArgs = {
  productConditionIds: Array<Scalars['ID']['input']>;
};


export type MutationRemoveProductFromCollectionArgs = {
  input?: InputMaybe<AddProductsToCollectionInput>;
};


export type MutationRemoveProductFromShopArgs = {
  product_id: Scalars['ID']['input'];
  shop_id: Scalars['ID']['input'];
};


export type MutationRemoveProductImageArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemovePromoBannerArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveResellerBySupplierArgs = {
  reseller_id: Scalars['ID']['input'];
  supplier_id: Scalars['ID']['input'];
};


export type MutationRemoveReviewArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveShopCollectionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveShopifyShopArgs = {
  supplier_id: Scalars['ID']['input'];
};


export type MutationRemoveSupplierArgs = {
  filter?: InputMaybe<SupplierFilter>;
};


export type MutationRemoveTopDealsBannersArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRemoveVariationArgs = {
  id: Scalars['ID']['input'];
};


export type MutationRequestChangeEmailArgs = {
  input?: InputMaybe<RequestChangeEmailInput>;
};


export type MutationRequestChangePhoneArgs = {
  input?: InputMaybe<RequestChangePhoneInput>;
};


export type MutationRequestEmailVerificationArgs = {
  input?: InputMaybe<RequestEmailVerificationInput>;
};


export type MutationRequestOtpArgs = {
  input?: InputMaybe<RequestOtpInput>;
};


export type MutationRequestPhoneVerificationArgs = {
  input?: InputMaybe<CheckPasswordAvailabilityInput>;
};


export type MutationRequestSupplierEmailVerificationArgs = {
  input?: InputMaybe<RequestEmailVerificationInput>;
};


export type MutationRequestSupplierOtpArgs = {
  input?: InputMaybe<RequestOtpInput>;
};


export type MutationRequestSupplierPhoneVerificationArgs = {
  input?: InputMaybe<RequestSupplierPhoneVerificationInput>;
};


export type MutationResetPasswordArgs = {
  input?: InputMaybe<ResetPasswordInput>;
};


export type MutationResetSupplierPasswordArgs = {
  input?: InputMaybe<SupplierPasswordResetInput>;
};


export type MutationRetryProcessingItemsArgs = {
  country: Scalars['String']['input'];
};


export type MutationReverseProfitArgs = {
  reference: Scalars['String']['input'];
};


export type MutationReverseTransactionArgs = {
  reference: Scalars['String']['input'];
};


export type MutationSendSupplierResetPasswordMailArgs = {
  input?: InputMaybe<SupplierPasswordResetMailInput>;
};


export type MutationSetSupplierPickupLocationArgs = {
  input?: InputMaybe<SetSupplierPickupLocationInput>;
};


export type MutationSetSupplierProductMarkupArgs = {
  input?: InputMaybe<SetSupplierProductMarkupInput>;
};


export type MutationSetupAccountArgs = {
  input?: InputMaybe<SetupAccountInput>;
};


export type MutationSupplierSignInArgs = {
  deviceToken?: InputMaybe<Scalars['String']['input']>;
  emailOrPhone: Scalars['String']['input'];
  password: Scalars['String']['input'];
  type?: InputMaybe<Scalars['String']['input']>;
};


export type MutationSyncShopifyProductsArgs = {
  input: SyncShopifyProductInput;
};


export type MutationTinggAcknowledgementArgs = {
  data: TinggAcknowledgementRequestDto;
};


export type MutationTinggChargeRequestArgs = {
  data: TinggChargeRequestDto;
};


export type MutationTinggCheckoutChargeArgs = {
  data: TinggCheckoutChargeRequestDto;
};


export type MutationTinggCheckoutRequestArgs = {
  data: InitiateTinggCheckoutRequestDto;
};


export type MutationTinggDirectCardChargeArgs = {
  data: TinggDirectCardRequestDto;
};


export type MutationTinggOnPaymentFailedArgs = {
  data: TinggOnPaymentFailedRequestDto;
};


export type MutationTinggOnPaymentSuccessfulArgs = {
  data: TinggOnPaymentSuccessfulRequestDto;
};


export type MutationTinggPollPaymentStatusArgs = {
  data: TinggPollPaymentStatusRequestDto;
};


export type MutationTinggQueryStatusArgs = {
  data: TinggQueryStatusRequestDto;
};


export type MutationTinggRefundArgs = {
  data: TinggRefundRequestDto;
};


export type MutationTinggWebhookArgs = {
  data: TinggWebhookRequestDto;
};


export type MutationToggleCategoryStateArgs = {
  id: Scalars['ID']['input'];
  state: Scalars['Boolean']['input'];
};


export type MutationToggleFreeDeliveryArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUnshareProductArgs = {
  input: UnshareProductRequestDto;
};


export type MutationUpdateAppBannerArgs = {
  input: AppBannerInput;
};


export type MutationUpdateCampaignArgs = {
  data: UpdateCampaignInput;
  filter?: InputMaybe<CampaignFilter>;
};


export type MutationUpdateCatalogArgs = {
  input?: InputMaybe<CatalogInput>;
};


export type MutationUpdateCollectionConfigArgs = {
  input?: InputMaybe<CatalogConfigInput>;
};


export type MutationUpdateCouponArgs = {
  input: CouponInput;
};


export type MutationUpdateCustomerArgs = {
  input?: InputMaybe<CustomerInput>;
};


export type MutationUpdateCustomerAddressOnOrderArgs = {
  customer_address_id: Scalars['ID']['input'];
  order_id: Scalars['ID']['input'];
};


export type MutationUpdateDeliveryLocationArgs = {
  input: DeliveryInput;
};


export type MutationUpdateDeliveryZoneArgs = {
  input?: InputMaybe<DeliveryZonesInput>;
};


export type MutationUpdateDiscountArgs = {
  data: UpdateDiscountData;
  filter: DiscountFilter;
};


export type MutationUpdateForexRateArgs = {
  input?: InputMaybe<ForexRateInput>;
};


export type MutationUpdateOrderDetailsOpsArgs = {
  cart_id: Scalars['ID']['input'];
  delivery_id?: InputMaybe<Scalars['ID']['input']>;
  delivery_price: Scalars['Float']['input'];
  order_id: Scalars['ID']['input'];
  quantity: Scalars['Int']['input'];
};


export type MutationUpdateOrderSkuArgs = {
  id: Scalars['ID']['input'];
  sku: Scalars['ID']['input'];
};


export type MutationUpdatePayoutRequestArgs = {
  input?: InputMaybe<UpdatePayoutInput>;
};


export type MutationUpdatePickUpLocationArgs = {
  input: PickUpInput;
};


export type MutationUpdatePluginArgs = {
  data: UpdatePluginRequestDto;
};


export type MutationUpdateProductArgs = {
  input?: InputMaybe<CreateProductInput>;
};


export type MutationUpdateProductCategoriesArgs = {
  input: UpdateProductCategoriesInput;
};


export type MutationUpdateProductCategoryArgs = {
  input?: InputMaybe<ProductCategoryInput>;
};


export type MutationUpdateProductCategoryAndTagsArgs = {
  input?: InputMaybe<ProductCategoryAndTagsInput>;
};


export type MutationUpdateProductCombinationArgs = {
  input?: InputMaybe<ProductCombinationInput>;
};


export type MutationUpdateProductDistributionArgs = {
  input?: InputMaybe<UpdateProductDistributionInput>;
};


export type MutationUpdateProductInformationArgs = {
  input?: InputMaybe<ProductInformationInput>;
};


export type MutationUpdateProductInventoryArgs = {
  input?: InputMaybe<ProductInventoryInput>;
};


export type MutationUpdateProductLikeStateArgs = {
  input: EditProductStatInput;
};


export type MutationUpdateProductMediaArgs = {
  input?: InputMaybe<ProductMediaInput>;
};


export type MutationUpdateProductSaveStateArgs = {
  input: EditProductStatInput;
};


export type MutationUpdateProductShipmentArgs = {
  input?: InputMaybe<ProductShipmentInput>;
};


export type MutationUpdateProductStockArgs = {
  input: ProductStockInput;
};


export type MutationUpdatePromoBannerArgs = {
  input?: InputMaybe<PromoBannerInput>;
};


export type MutationUpdateShopCollectionArgs = {
  input?: InputMaybe<ShopCollectionInput>;
};


export type MutationUpdateShopDetailsArgs = {
  data: UpdateShopDetailsRequestDto;
  premium_subscription?: InputMaybe<CustomerSubscriptionInput>;
};


export type MutationUpdateSubscriptionPackageArgs = {
  data?: InputMaybe<UpdateSubscriptionPackageData>;
  filter?: InputMaybe<SubscriptionFilter>;
};


export type MutationUpdateSupplierArgs = {
  input?: InputMaybe<SupplierInput>;
};


export type MutationUpdateSupplierBusinessContactArgs = {
  input?: InputMaybe<UpdateSupplierBusinessContactInput>;
};


export type MutationUpdateSupplierBusinessDetailsArgs = {
  input?: InputMaybe<UpdateSupplierBusinessDetailsInput>;
};


export type MutationUpdateSupplierDetailsArgs = {
  input?: InputMaybe<UpdateSupplierDetailsInput>;
};


export type MutationUpdateSupplierGenericNameArgs = {
  input: VerifySupplierBusinessInput;
};


export type MutationUpdateSupplierPaymentArgs = {
  input?: InputMaybe<UpdateSupplierPaymentInput>;
};


export type MutationUpdateSupplierProfileArgs = {
  input?: InputMaybe<SupplierProfileUpdateInput>;
};


export type MutationUpdateTermArgs = {
  input: TermInput;
};


export type MutationUpdateUserDetailsArgs = {
  input?: InputMaybe<UpdateUserDetailsInput>;
};


export type MutationUpdateVariationArgs = {
  input?: InputMaybe<VariationInput>;
};


export type MutationUserLoginArgs = {
  input?: InputMaybe<UserLoginInput>;
};


export type MutationVerifyAccountBalanceArgs = {
  amount: Scalars['Float']['input'];
  user_id: Scalars['ID']['input'];
};


export type MutationVerifyEmailArgs = {
  input?: InputMaybe<VerifyEmailInput>;
};


export type MutationVerifyOtpArgs = {
  input?: InputMaybe<VerifyOtpInput>;
};


export type MutationVerifyPayoutTransactionArgs = {
  reference: Scalars['String']['input'];
  user_id: Scalars['ID']['input'];
};


export type MutationVerifyProductArgs = {
  input: VerifyProductInput;
};


export type MutationVerifySupplierAccountArgs = {
  input?: InputMaybe<VerifySupplierAccountInput>;
};


export type MutationVerifySupplierBusinessArgs = {
  input: VerifySupplierBusinessInput;
};


export type MutationVerifySupplierOtpArgs = {
  input?: InputMaybe<VerifySupplierOtpInput>;
};

export type NumberOperator = {
  between?: InputMaybe<NumberRange>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
};

export type NumberRange = {
  end: Scalars['Float']['input'];
  start: Scalars['Float']['input'];
};

export type OfflineSaleInput = {
  address?: InputMaybe<AddressInput>;
  address_id?: InputMaybe<Scalars['ID']['input']>;
  customer_id?: InputMaybe<Scalars['ID']['input']>;
  delivery_type?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  items?: InputMaybe<Array<InputMaybe<OrderProductInput>>>;
  payment_type?: InputMaybe<Scalars['String']['input']>;
  shop_id?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
  total_amount?: InputMaybe<Scalars['Float']['input']>;
};

export type OnDiscountUseRequestDto = {
  discount_code: Scalars['String']['input'];
  discount_id: Scalars['String']['input'];
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type OnPurchaseSharedProductRequestDto = {
  product_id: Scalars['ID']['input'];
  profit_added_by_reseller: Scalars['Int']['input'];
  total_selling_price: Scalars['Int']['input'];
};

export type OnPurchaseSharedProductResponseDto = {
  __typename?: 'OnPurchaseSharedProductResponseDto';
  productId?: Maybe<Scalars['ID']['output']>;
};

export type Order = {
  __typename?: 'Order';
  address?: Maybe<CustomerAddress>;
  cart_number: Scalars['String']['output'];
  country: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['Date']['output']>;
  customer?: Maybe<Customer>;
  customer_address_id?: Maybe<Scalars['ID']['output']>;
  customer_id: Scalars['ID']['output'];
  customer_paid: Scalars['Boolean']['output'];
  delivery?: Maybe<Delivery>;
  delivery_amount?: Maybe<Scalars['Float']['output']>;
  delivery_id?: Maybe<Scalars['ID']['output']>;
  delivery_instructions?: Maybe<Scalars['String']['output']>;
  delivery_type: Scalars['String']['output'];
  discount?: Maybe<Scalars['Float']['output']>;
  free_delivery?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  orderItems?: Maybe<Array<Maybe<OrderItem>>>;
  order_total: Scalars['Float']['output'];
  payment?: Maybe<Payment>;
  payment_id?: Maybe<Scalars['ID']['output']>;
  payment_status?: Maybe<Scalars['String']['output']>;
  payment_type: Scalars['String']['output'];
  reseller?: Maybe<User>;
  security_deposit?: Maybe<Scalars['Float']['output']>;
  security_deposit_paid?: Maybe<Scalars['Boolean']['output']>;
  source: Scalars['String']['output'];
  supplier?: Maybe<Supplier>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
  tracking_code?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['Date']['output']>;
  user_id: Scalars['ID']['output'];
};

export type OrderByDto = {
  fields: Array<Scalars['String']['input']>;
  values: Array<Scalars['String']['input']>;
};

export type OrderComment = {
  __typename?: 'OrderComment';
  createdAt?: Maybe<Scalars['Date']['output']>;
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  staff_name?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['Date']['output']>;
};

export type OrderCreateInput = {
  address_id?: InputMaybe<Scalars['ID']['input']>;
  couponCode?: InputMaybe<Scalars['String']['input']>;
  customer_id: Scalars['ID']['input'];
  customer_paid: Scalars['Boolean']['input'];
  delivery_amount: Scalars['Float']['input'];
  delivery_id?: InputMaybe<Scalars['ID']['input']>;
  delivery_type?: InputMaybe<Scalars['String']['input']>;
  discount: Scalars['Float']['input'];
  estimate_id?: InputMaybe<Scalars['ID']['input']>;
  free_delivery?: InputMaybe<Scalars['Boolean']['input']>;
  hasPreviousOrder?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  payment_id?: InputMaybe<Scalars['String']['input']>;
  payment_status?: InputMaybe<Scalars['String']['input']>;
  payment_type?: InputMaybe<Scalars['String']['input']>;
  products: Array<OrderProductInput>;
  reseller: Scalars['ID']['input'];
  security_deposit?: InputMaybe<Scalars['Float']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
  total_amount: Scalars['Float']['input'];
};

export type OrderFilter = {
  cart_number?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  customer_id?: InputMaybe<IdOperator>;
  id?: InputMaybe<IdOperator>;
  orderId?: InputMaybe<IdOperator>;
  orderNumber?: InputMaybe<StringOperator>;
  payment_id?: InputMaybe<StringOperator>;
  productId?: InputMaybe<IdOperator>;
  source?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  tracking_code?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type OrderGraphData = {
  __typename?: 'OrderGraphData';
  country?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['String']['output']>;
  month?: Maybe<Scalars['String']['output']>;
  total?: Maybe<Scalars['Int']['output']>;
};

export type OrderHistory = {
  __typename?: 'OrderHistory';
  created_at?: Maybe<Scalars['Date']['output']>;
  id: Scalars['ID']['output'];
  ops_personel?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type OrderInput = {
  cartNumber?: InputMaybe<Scalars['String']['input']>;
  customer_address_id?: InputMaybe<Scalars['ID']['input']>;
  customer_id: Scalars['ID']['input'];
  delivery_id?: InputMaybe<Scalars['ID']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  orderTotal: Scalars['Float']['input'];
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
  user_id: Scalars['ID']['input'];
};

export type OrderItem = {
  __typename?: 'OrderItem';
  comments?: Maybe<Array<Maybe<OrderComment>>>;
  createdAt?: Maybe<Scalars['Date']['output']>;
  history?: Maybe<Array<Maybe<OrderHistory>>>;
  id: Scalars['ID']['output'];
  order?: Maybe<Order>;
  orderNumber?: Maybe<Scalars['String']['output']>;
  order_id?: Maybe<Scalars['ID']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  product?: Maybe<Product>;
  profitAdded?: Maybe<Scalars['Float']['output']>;
  quantity?: Maybe<Scalars['Int']['output']>;
  sku: Scalars['ID']['output'];
  source?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['Date']['output']>;
};

export enum OrderKind {
  Offline = 'OFFLINE',
  Online = 'ONLINE',
  Tendo = 'TENDO'
}

export type OrderProductFilter = {
  created_at?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
  orderId?: InputMaybe<NumberOperator>;
  orderNumber?: InputMaybe<StringOperator>;
  price?: InputMaybe<NumberOperator>;
  profitAdded?: InputMaybe<NumberOperator>;
  quantity?: InputMaybe<NumberOperator>;
  sku?: InputMaybe<StringOperator>;
  source?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
};

export type OrderProductInput = {
  cost_price?: InputMaybe<Scalars['Float']['input']>;
  discount?: InputMaybe<Scalars['Float']['input']>;
  price: Scalars['Float']['input'];
  product_id: Scalars['ID']['input'];
  profitAdded: Scalars['Float']['input'];
  qty: Scalars['Int']['input'];
};

export type OrderReview = {
  __typename?: 'OrderReview';
  comment?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  order_id: Scalars['ID']['output'];
  rating: Scalars['Float']['output'];
};

export type OrderSort = {
  field?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Sort>;
};

export type OrderStats = {
  __typename?: 'OrderStats';
  ordersAllTime: Scalars['Int']['output'];
  ordersMonth: Scalars['Int']['output'];
  ordersToday: Scalars['Int']['output'];
  ordersWeek: Scalars['Int']['output'];
  ordersYear: Scalars['Int']['output'];
};

export type OrderStatsStats = {
  __typename?: 'OrderStatsStats';
  totalCancelled: Scalars['Int']['output'];
  totalDelivered: Scalars['Int']['output'];
  totalPending: Scalars['Int']['output'];
  totalSuccessful: Scalars['Int']['output'];
};

export enum OrderStatus {
  Accepted = 'ACCEPTED',
  Cancelled = 'CANCELLED',
  Delivered = 'DELIVERED',
  Intransit = 'INTRANSIT',
  Paid = 'PAID',
  Pending = 'PENDING',
  Processed = 'PROCESSED',
  Processing = 'PROCESSING',
  Returned = 'RETURNED'
}

export type OrderStatusesStats = {
  __typename?: 'OrderStatusesStats';
  totalCancelled: Scalars['Int']['output'];
  totalDelivered: Scalars['Int']['output'];
  totalPending: Scalars['Int']['output'];
  totalSuccessful: Scalars['Int']['output'];
};

export type OzowGeneratePaymentUrlResponseDto = {
  __typename?: 'OzowGeneratePaymentUrlResponseDto';
  /** Error message generated when validating the request. */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** Ozow's unique identifier for the payment request. */
  paymentRequestId?: Maybe<Scalars['String']['output']>;
  /**
   * Generated URL that allows payment for the posted variables used to create the payment request.
   * The payment Url you'll receive from the API is dynamic, so please don't hard code it into your integrations as it might change
   */
  url?: Maybe<Scalars['String']['output']>;
};

export type OzowGetTransactionByReferenceRequestDto = {
  /** Defaults to false. Use true only to get results for test requests. */
  isTest?: InputMaybe<Scalars['Boolean']['input']>;
  /** The merchant's reference for the transaction */
  transactionReference: Scalars['String']['input'];
};

export type OzowGetTransactionRequestDto = {
  /** Defaults to false. Use true only to get results for test requests. */
  isTest?: InputMaybe<Scalars['Boolean']['input']>;
  /** Ozow's reference for the transaction. This would be passed back to the merchant in the redirect and notification responses. */
  transactionId: Scalars['String']['input'];
};

export type OzowPaymentRequestDto = {
  /** Allow user to change the amount passed through before paying. This option needs to also be enabled for the site in the merchant admin portal to be used. Accepted values are true or false. DO NOT include false in the hash check string, just ignore instead. */
  allowVariableAmount?: InputMaybe<Scalars['Boolean']['input']>;
  /** The transaction amount. The amount is in the currency specified by the currency code posted */
  amount: Scalars['Float']['input'];
  /** The name of to be used for the bank account. Only alphanumeric characters and spaces allowed. */
  bankAccountName?: InputMaybe<Scalars['String']['input']>;
  /** The bank account number the payment should be made to. */
  bankAccountNumber?: InputMaybe<Scalars['String']['input']>;
  /**
   * The bank that the payment should be made to. Merchant needs to be enabled to send through banking details (18 - 21) in the post, for most merchants this is setup when creating the merchant account.
   *   Allowed values are:
   *       • ABSA – 3284A0AD-BA78-4838-8C2B-102981286A2B
   *       • Capitec - 913999FA-3A32-4E3D-82F0-A1DF7E9E4F7B
   *       • FNB - 4816019C-3314-4C80-8B6B-B2CD16DCC4EC
   *       • Nedbank - BF0561FD-4203-4A0C-9174-
   *       CB26FCD87A60
   *       • Standard Bank - AD7D8DA4-1723-4066-94BB-
   *       6662D845E483
   *       • Investec - 4B45BE85-B616-4BD1-9027-F8FCF8F9AF7B
   */
  bankId?: InputMaybe<Scalars['String']['input']>;
  /**
   * The reference that will be prepopulated in the "their reference" field in the customers online banking site.
   * This will be the payment reference that appears on the merchant’s bank statement and can be used for recon purposes.
   * Only alphanumeric characters, spaces and dashes are allowed.
   */
  bankReference?: InputMaybe<Scalars['String']['input']>;
  /** The branch code for the bank account */
  branchCode?: InputMaybe<Scalars['String']['input']>;
  /** The URL that we should post the redirect result to if the customer cancels the payment, this will also be the page the customer gets redirect back to. This URL can also be set for the applicable merchant site in the merchant admin section. If a value is set in the merchant admin and sent in the post, the posted value will be redirected to if the payment is cancelled. */
  cancelUrl?: InputMaybe<Scalars['String']['input']>;
  /** Cart details */
  cart?: InputMaybe<Scalars['Any']['input']>;
  /** Email of the customer */
  customerEmail: Scalars['String']['input'];
  /** Full name of the customer */
  customerFullName: Scalars['String']['input'];
  /** Phone number of the customer */
  customerPhone: Scalars['String']['input'];
  /** The URL that we should post the redirect result to if an error occurred while trying to process the payment, this will also be the page the customer gets redirect back to. This URL can also be set for the applicable merchant site in the merchant admin section. . If a value is set in the merchant admin and sent in the post, the posted value will be redirected to if an error occurred while processing the payment. */
  errorUrl?: InputMaybe<Scalars['String']['input']>;
  /** Payment will not be allowed to be made after this date. Date should be UTC and value should be formatted as yyyy-MM-dd HH:mm e.g. 2015-08-11 16:02 */
  expiryDateUtc?: InputMaybe<Scalars['String']['input']>;
  /** Send true to test your request posting and response handling. If set to true you will be redirected to a page where you can select whether you would like a successful or unsuccessful redirect response sent back. Please note that notification responses are not sent for test transactions and the online banking payment is skipped. Accepted values are true or false. */
  isTest?: InputMaybe<Scalars['Boolean']['input']>;
  /** The URL that we should post the notification result to. The result will post regardless of the outcome of the transaction. This URL can also be set for the applicable merchant site in the merchant admin section. If a value is set in the merchant admin and sent in the post, the notification result will be sent to the posted value. Find out more in the notification response section in step 2. */
  notifyUrl?: InputMaybe<Scalars['String']['input']>;
  /** Name shown on the site as the entity being paid (not in banking screens) */
  payeeDisplayName?: InputMaybe<Scalars['String']['input']>;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** The URL that we should post the redirect result to if the payment was successful, this will also be the page the customer gets redirect back to. This URL can also be set for the applicable merchant site in the merchant admin section. . If a value is set in the merchant admin and sent in the post, the posted value will be redirected to if the payment was successful. Please note that it would not be sufficient to assume the payment was successful just because the customer was redirected back to this page, it highly recommended that you check the response fields and as well as check the transaction status using our check transaction status API call. */
  successUrl?: InputMaybe<Scalars['String']['input']>;
  /** The merchant's reference for the transaction */
  transactionReference?: InputMaybe<Scalars['String']['input']>;
  /** If AllowVariableAmount is passed through as true, this will dictate the highest acceptable amount the user can enter */
  variableAmountMax?: InputMaybe<Scalars['Float']['input']>;
  /** If AllowVariableAmount is passed through as true, this will dictate the lowest acceptable amount the user can enter */
  variableAmountMin?: InputMaybe<Scalars['Float']['input']>;
};

export type OzowPaymentRequestResultDto = {
  __typename?: 'OzowPaymentRequestResultDto';
  htmlResponse?: Maybe<Scalars['String']['output']>;
  referenceCode?: Maybe<Scalars['String']['output']>;
};

export type OzowPaymentResponseDto = {
  __typename?: 'OzowPaymentResponseDto';
  /** The transaction amount. The amount is in the currency specified by the currency code posted. */
  Amount: Scalars['Float']['output'];
  /** The name of the bank the payment was made from. */
  BankName: Scalars['String']['output'];
  /** The transaction currency code sent in the request post. */
  CurrencyCode: Scalars['String']['output'];
  /**
   * SHA512 hash used to ensure that certain fields in the message have not been altered after the hash was generated.
   * Check the generate hash section below for more details on how to validate the response variables using the hash
   */
  Hash: Scalars['String']['output'];
  /** Whether or not the original request was a test request. Possible values are true or false. */
  IsTest: Scalars['Boolean']['output'];
  /**
   * The masked account number the payment was made from.
   * If account number is 12 or more digits then the first and last four digits are unmasked e.g. 1234567898765 will be masked as 1234*****8765
   * If the account number is less than12 digits then the first and last 3 digits are left unmasked e.g. 123456789 will be masked as 123***789
   * This is not available by default and a request by the merchant must be submitted along with the use case for needing this information
   */
  MaskedAccountNumber?: Maybe<Scalars['String']['output']>;
  /** The site code sent to Ozow in the request post. */
  SiteCode: Scalars['String']['output'];
  /**
   *  Some Ozow merchants have requested this information as they use this in their own processes.
   *  The can be ignored unless you have a purpose and application for this information.
   *  The application of these indicators are for the merchant’s discretion and in isolation do not constitute any action to be taken by the merchant.
   * The field will contain a pipe delimited list of the following values if they are applicable e.g. HIGH_VALUE | FIRST_OZOW :
   *     • HIGH_VALUE – If a soft limit is configured on the site and the amount paid is higher or equal to the configured limit.
   *     • FIRST_OZOW – First time a user has paid using Ozow
   *     • FIRST_MERCHANT – First time a user has paid the merchant using Ozow
   *     • NEW_OZOW – User has paid using Ozow for the first time in the past seven days
   *     • NEW_MERCHANT - User has paid the merchant using Ozow for the first time in the past seven days
   */
  SmartIndicators: Scalars['String']['output'];
  /**
   *  The transaction status. Possible values are:
   * • Complete - The payment was successful
   * • Cancelled - The payment was cancelled
   * • Error - An error occurred while processing the payment
   * • Abandoned – The payment was abandoned
   * • PendingInvestigation – An inconclusive result was received by the
   * bank and the payment needs to be verified manually.
   * • Pending – The status cannot be determined as yet but will be
   * reposted to the notification URL as soon as it has been determined.
   * Merchants not using the notification URL will receive a PendingInvestigation status.
   */
  Status: Scalars['String']['output'];
  /**
   * Message regarding the status of the transaction.
   * This field will not always have a value.
   * This is a user friendly message that can be displayed to the user e.g. User cancelled transaction.
   */
  StatusMessage?: Maybe<Scalars['String']['output']>;
  /**
   *  The transaction sub status for failed transactions. The value provides an indication as to why the payment failed.
   * Some examples:
   *     • Unclassified – Failure scenario has not been mapped.
   *     • InsufficientFunds - User did not have sufficient funds available to complete the payment.
   *     There a quite a few other sub statuses and they have not been included here as they are strictly for reporting.
   */
  SubStatus: Scalars['String']['output'];
  /** The transaction identifier generated by Ozow */
  TransactionId: Scalars['String']['output'];
  /** The merchant's transaction reference sent in the request post's TransactionReference variable. */
  TransactionReference: Scalars['String']['output'];
};

export type OzowTransactionResponseDto = {
  __typename?: 'OzowTransactionResponseDto';
  /** The transaction amount. */
  amount: Scalars['Float']['output'];
  /** The masked account number the payment was made from. */
  bankName?: Maybe<Scalars['String']['output']>;
  /** Transaction created date and time */
  createdDate: Scalars['Date']['output'];
  /** The transaction currency code. */
  currencyCode: Scalars['String']['output'];
  /** The name of the bank the payment was made from. */
  maskedAccountNumber?: Maybe<Scalars['String']['output']>;
  /** Unique code assigned to each merchant. */
  merchantCode: Scalars['String']['output'];
  /** Transaction payment date and time */
  paymentDate: Scalars['Date']['output'];
  /** Unique code assigned to each merchant site. */
  siteCode: Scalars['String']['output'];
  /** Refer to SmartIndicators field in notification response */
  smartIndicators?: Maybe<Scalars['String']['output']>;
  /**
   * The transaction status. Possible values are:
   *   • Complete - The payment was successful
   *   • Cancelled - The payment was cancelled
   *   • Error - An error occurred while processing the payment
   *   • Abandoned – The payment was abandoned
   *   • PendingInvestigation – An inconclusive result was received by the
   *   bank and the payment needs to be verified manually.
   *   • Pending – The status cannot be determined as yet but will be
   *   reposted to the notification URL as soon as it has been determined. Merchants not using the notification URL will receive a PendingInvestigation status.
   */
  status: Scalars['String']['output'];
  /** Message regarding the status of the transaction. This field will not always have a value. This is a user friendly message that can be displayed to the user e.g. User cancelled transaction. */
  statusMessage: Scalars['String']['output'];
  /** The transaction sub status for failed transactions. The value provides an indication as to why the payment failed. */
  subStatus?: Maybe<Scalars['String']['output']>;
  /** Ozow's unique reference for the transaction. */
  transactionId: Scalars['String']['output'];
  /** Merchant's transaction reference. */
  transactionReference: Scalars['String']['output'];
};

export enum Psp {
  DukeWallet = 'duke_wallet',
  Ozow = 'ozow',
  Paystack = 'paystack',
  Tingg = 'tingg'
}

export type Pagination = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

export type PastLeaderboardIntervals = {
  __typename?: 'PastLeaderboardIntervals';
  activity_id?: Maybe<Scalars['String']['output']>;
  end_date_time?: Maybe<Scalars['String']['output']>;
  recurrence_type?: Maybe<Scalars['String']['output']>;
  recurrence_type_value?: Maybe<Scalars['Int']['output']>;
  start_date_time?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};

export type PayStackHistory = {
  __typename?: 'PayStackHistory';
  message: Scalars['String']['output'];
  time: Scalars['Int']['output'];
  type: Scalars['String']['output'];
};

export type PayStackLog = {
  __typename?: 'PayStackLog';
  attempts: Scalars['Int']['output'];
  authentication: Scalars['String']['output'];
  authorization: PaystackLogAuthorisation;
  channel: Scalars['String']['output'];
  customer: PaystackLogCustomer;
  errors: Scalars['String']['output'];
  fees: Scalars['String']['output'];
  history: PayStackHistory;
  input?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  mobile: Scalars['Boolean']['output'];
  plan: Scalars['String']['output'];
  requested_amount: Scalars['Int']['output'];
  success: Scalars['Boolean']['output'];
  time_spent: Scalars['Int']['output'];
};

export type Payment = {
  __typename?: 'Payment';
  amount?: Maybe<Scalars['Float']['output']>;
  cart?: Maybe<Scalars['JSON']['output']>;
  createdAt?: Maybe<Scalars['String']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  fullname?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  network?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Order>;
  paidAt?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  psp?: Maybe<Scalars['String']['output']>;
  reasonForPayment?: Maybe<ReasonForPayment>;
  reference: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
};

export type PaymentCurrencyDetails = {
  __typename?: 'PaymentCurrencyDetails';
  conversion_rate?: Maybe<Scalars['Int']['output']>;
  converted_amount?: Maybe<Scalars['Int']['output']>;
  converted_currency?: Maybe<Scalars['String']['output']>;
};

export type PaymentFilter = {
  amount?: InputMaybe<NumberOperator>;
  createdAt?: InputMaybe<DateOperator>;
  currency?: InputMaybe<StringOperator>;
  email?: InputMaybe<StringOperator>;
  fullname?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  message?: InputMaybe<StringOperator>;
  network?: InputMaybe<StringOperator>;
  paidAt?: InputMaybe<DateOperator>;
  phone?: InputMaybe<StringOperator>;
  psp?: InputMaybe<StringOperator>;
  reference?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  updatedAt?: InputMaybe<DateOperator>;
};

export type PaymentInput = {
  amount: Scalars['Float']['input'];
  currency: Scalars['String']['input'];
  email: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  provider: Scalars['String']['input'];
};

export enum PaymentOption {
  Cash = 'Cash',
  Online = 'Online'
}

export type PaymentOptions = {
  __typename?: 'PaymentOptions';
  currency_code?: Maybe<Scalars['String']['output']>;
  instructions?: Maybe<Instructions>;
  maximum_charge_amount?: Maybe<Scalars['Int']['output']>;
  minimum_charge_amount?: Maybe<Scalars['Int']['output']>;
  payment_option_code?: Maybe<Scalars['String']['output']>;
  payment_option_logo?: Maybe<Scalars['String']['output']>;
  payment_option_name?: Maybe<Scalars['String']['output']>;
};

export type PaymentProviderStatusResponseData = {
  __typename?: 'PaymentProviderStatusResponseData';
  page: PaymentProviderStatusResponsePage;
  status: PaymentProviderStatusResponseStatus;
};

export type PaymentProviderStatusResponsePage = {
  __typename?: 'PaymentProviderStatusResponsePage';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  time_zone: Scalars['String']['output'];
  updated_at: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type PaymentProviderStatusResponseStatus = {
  __typename?: 'PaymentProviderStatusResponseStatus';
  description: Scalars['String']['output'];
  indicator: Scalars['String']['output'];
};

export enum PaymentStatus {
  Failed = 'failed',
  Initiated = 'initiated',
  Success = 'success',
  Unknown = 'unknown'
}

export type Payout = {
  __typename?: 'Payout';
  account_name?: Maybe<Scalars['String']['output']>;
  account_number?: Maybe<Scalars['String']['output']>;
  amount?: Maybe<Scalars['Float']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['Date']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  provider?: Maybe<Scalars['String']['output']>;
  reseller?: Maybe<User>;
  status?: Maybe<Scalars['String']['output']>;
  transaction_id?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_id: Scalars['ID']['output'];
};

export type PayoutFilter = {
  account_name?: InputMaybe<StringOperator>;
  account_number?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  currency?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  provider?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  transaction_id?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type PayoutInput = {
  account_name: Scalars['String']['input'];
  account_number: Scalars['String']['input'];
  amount: Scalars['Float']['input'];
  country: Scalars['String']['input'];
  currency: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  provider: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
  transaction_id?: InputMaybe<Scalars['String']['input']>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
};

export type PaysTackChargeBank = {
  /** Account number supplied by customer. */
  account_number?: InputMaybe<Scalars['String']['input']>;
  /**
   * Code of the bank. To fetch the list of supported banks, call the paystack list banks operation with the additional filter pay_with_bank=true.
   *
   * The banks can be listed in a dropdown or any other format that allows the user to easily pick their bank of choice.
   */
  code: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
  /** If the selected bank is Kuda, you need to make use of phone and token instead of account_number */
  token?: InputMaybe<Scalars['String']['input']>;
};

export type PaysTackChargeEft = {
  provider: EftProviders;
};

export type PaysTackChargeMobileMoney = {
  phone: Scalars['String']['input'];
  /** Allowed values 'mtn', 'tgo', 'vod', 'VOD', 'MTN','TGO', 'AIR' */
  provider: Scalars['String']['input'];
};

export type PaysTackChargeQr = {
  provider: QrProviders;
};

export type PaysTackChargeUssd = {
  type: UssdTypes;
};

export type PaystackBankAccount = {
  __typename?: 'PaystackBankAccount';
  active: Scalars['Boolean']['output'];
  code?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['String']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  gateway?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  is_deleted: Scalars['Boolean']['output'];
  longcode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pay_with_bank: Scalars['Boolean']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
};

export type PaystackBankInitialiseChargeRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** Bank details */
  bank: PaysTackChargeBank;
  /** Date in the format YYYY-MM-DD. e.g "1995-12-23" */
  birthday: Scalars['String']['input'];
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** A JSON object */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackBankInitialiseChargeResponseData = {
  __typename?: 'PaystackBankInitialiseChargeResponseData';
  display_text?: Maybe<Scalars['String']['output']>;
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type PaystackBankInitialiseChargeResponseDto = {
  __typename?: 'PaystackBankInitialiseChargeResponseDto';
  data: PaystackBankInitialiseChargeResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackBulkCreateTransferRecipientRequestDto = {
  /** A list of transfer recipient object */
  batch: Array<PaystackCreateTransferRecipientRequestDto>;
};

export type PaystackBulkCreateTransferRecipientResponseData = {
  __typename?: 'PaystackBulkCreateTransferRecipientResponseData';
  error?: Maybe<Array<Scalars['JSON']['output']>>;
  success: Array<PaystackTransferRecipient>;
};

export type PaystackBulkCreateTransferRecipientResponseDto = {
  __typename?: 'PaystackBulkCreateTransferRecipientResponseDto';
  data: PaystackBulkCreateTransferRecipientResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackChargeSubmitOtpRequestDto = {
  /** OTP submitted by user */
  otp: Scalars['String']['input'];
  /** Reference for ongoing transaction */
  reference: Scalars['String']['input'];
};

export type PaystackCreateTransferRecipientDetails = {
  __typename?: 'PaystackCreateTransferRecipientDetails';
  account_name: Scalars['String']['output'];
  account_number: Scalars['String']['output'];
  authorization_code?: Maybe<Scalars['String']['output']>;
  bank_code: Scalars['String']['output'];
  bank_name: Scalars['String']['output'];
};

export type PaystackCreateTransferRecipientRequestDto = {
  /** Required if type is nuban or basa */
  account_number?: InputMaybe<Scalars['String']['input']>;
  /** An authorization code from a previous transaction */
  authorization_code?: InputMaybe<Scalars['String']['input']>;
  /** Required if type is nuban or basa. You can get the list of Bank Codes by calling the List Banks endpoint. */
  bank_code?: InputMaybe<Scalars['String']['input']>;
  /** Currency for the account receiving the transfer */
  currency?: InputMaybe<Scalars['String']['input']>;
  /** A description for this recipient */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Store additional information about your recipient in a structured format, JSON */
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  /** A name for the recipient */
  name: Scalars['String']['input'];
  /** Recipient Type. It could be one of: nuban, mobile_money or basa */
  type: Scalars['String']['input'];
};

export type PaystackCreateTransferRecipientResponseDto = {
  __typename?: 'PaystackCreateTransferRecipientResponseDto';
  data: PaystackTransferRecipient;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackCustomField = {
  display_name: Scalars['String']['input'];
  value: Scalars['String']['input'];
  variable_name: Scalars['String']['input'];
};

export type PaystackCustomFields = {
  /** Stringified card object */
  cart?: InputMaybe<Cart>;
  custom_fields: Array<PaystackCustomField>;
  /** This is the name of the customer making the payment. */
  fullname: Scalars['String']['input'];
  reasonForPayment: ReasonForPayment;
};

export type PaystackDeleteTransferRecipientRequestDto = {
  /** An ID or code for the recipient who you want to delete. */
  id_or_code: Scalars['ID']['input'];
};

export type PaystackDeleteTransferRecipientResponseDto = {
  __typename?: 'PaystackDeleteTransferRecipientResponseDto';
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackEftInitialiseChargeRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** The currency code */
  currency: Scalars['String']['input'];
  /** EFT details */
  eft: PaysTackChargeEft;
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** A JSON object */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackEftInitialiseChargeResponseData = {
  __typename?: 'PaystackEFTInitialiseChargeResponseData';
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type PaystackEftInitialiseChargeResponseDto = {
  __typename?: 'PaystackEFTInitialiseChargeResponseDto';
  data: PaystackEftInitialiseChargeResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackFetchTransferData = {
  __typename?: 'PaystackFetchTransferData';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  failures?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  reason: Scalars['String']['output'];
  recipient: PaystackTransferRecipient;
  source: Scalars['String']['output'];
  source_details?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  transfer_code: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type PaystackFetchTransferRecipientRequestDto = {
  /** An ID or code for the recipient whose details you want to receive. */
  id_or_code: Scalars['ID']['input'];
};

export type PaystackFetchTransferRecipientResponseDto = {
  __typename?: 'PaystackFetchTransferRecipientResponseDto';
  data: PaystackTransferRecipient;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackFetchTransferRequestDto = {
  /** The transfer ID or code you want to fetch */
  id_or_code: Scalars['ID']['input'];
};

export type PaystackFetchTransferResponseDto = {
  __typename?: 'PaystackFetchTransferResponseDto';
  data: PaystackFetchTransferData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackFinaliseTransferData = {
  __typename?: 'PaystackFinaliseTransferData';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  failures?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  integration: Scalars['Int']['output'];
  reason: Scalars['String']['output'];
  recipient: Scalars['Int']['output'];
  reference: Scalars['String']['output'];
  source: Scalars['String']['output'];
  source_details?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  titan_code?: Maybe<Scalars['String']['output']>;
  transfer_code: Scalars['String']['output'];
  transferred_at?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['String']['output'];
};

export type PaystackFinaliseTransferRequestDto = {
  /** OTP sent to business phone to verify transfer */
  otp: Scalars['String']['input'];
  /** The transfer code you want to finalize */
  transfer_code: Scalars['String']['input'];
};

export type PaystackFinaliseTransferResponseDto = {
  __typename?: 'PaystackFinaliseTransferResponseDto';
  data: PaystackFinaliseTransferData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackInitiateBulkTransferRequestDto = {
  /** Where should we transfer from? Only `balance` for now */
  source?: InputMaybe<Scalars['String']['input']>;
  transfers: Array<PaystackInitiateTransferObject>;
};

export type PaystackInitiateBulkTransferResponseDto = {
  __typename?: 'PaystackInitiateBulkTransferResponseDto';
  data: Array<PaystackInitiateTransferData>;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackInitiateTransferData = {
  __typename?: 'PaystackInitiateTransferData';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  integration: Scalars['String']['output'];
  reason: Scalars['String']['output'];
  recipient: Scalars['Int']['output'];
  source: Scalars['String']['output'];
  status: Scalars['String']['output'];
  transfer_code: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type PaystackInitiateTransferObject = {
  /** Amount to transfer in kobo if currency is NGN and pesewas if currency is GHS. */
  amount: Scalars['Int']['input'];
  /** Specify the currency of the transfer. Defaults to NGN */
  currency?: InputMaybe<Scalars['String']['input']>;
  /** The reason for the transfer */
  reason?: InputMaybe<Scalars['String']['input']>;
  /** Code for transfer recipient */
  recipient: Scalars['String']['input'];
  /** If specified, the field should be a unique identifier (in lowercase) for the object. Only -,_ and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackInitiateTransferRequestDto = {
  /** Amount to transfer in kobo if currency is NGN and pesewas if currency is GHS. */
  amount: Scalars['Int']['input'];
  /** Specify the currency of the transfer. Defaults to NGN */
  currency?: InputMaybe<Scalars['String']['input']>;
  /** The reason for the transfer */
  reason?: InputMaybe<Scalars['String']['input']>;
  /** Code for transfer recipient */
  recipient: Scalars['String']['input'];
  /** If specified, the field should be a unique identifier (in lowercase) for the object. Only -,_ and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
  /** Where should we transfer from? Only `balance` for now */
  source?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackInitiateTransferResponseDto = {
  __typename?: 'PaystackInitiateTransferResponseDto';
  data: PaystackInitiateTransferData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackListBanksMetadata = {
  __typename?: 'PaystackListBanksMetadata';
  next?: Maybe<Scalars['String']['output']>;
  perPage?: Maybe<Scalars['Int']['output']>;
  previous?: Maybe<Scalars['String']['output']>;
};

export type PaystackListBanksRequestDto = {
  /** The country from which to obtain the list of supported banks. e.g country=ghana or country=nigeria */
  country: Scalars['String']['input'];
  /** Any of NGN, USD, GHS or ZAR */
  currency?: InputMaybe<Scalars['String']['input']>;
  /** The gateway type of the bank. It can be one of these: [emandate, digitalbankmandate] */
  gateway?: InputMaybe<Scalars['String']['input']>;
  /** A cursor that indicates your place in the list. It can be used to fetch the next page of the list */
  next?: InputMaybe<Scalars['String']['input']>;
  /** A flag to filter for available providers as boolean. e.g. false */
  pay_with_bank_transfer: Scalars['String']['input'];
  /** The number of objects to return per page. Defaults to 50, and limited to 100 records per page. */
  perPage: Scalars['Int']['input'];
  /** A cursor that indicates your place in the list. It should be used to fetch the previous page of the list after an intial next request */
  previous?: InputMaybe<Scalars['String']['input']>;
  /** Type of financial channel. For Ghanaian channels, please use either mobile_money for mobile money channels OR ghipps for bank channels */
  type?: InputMaybe<Scalars['String']['input']>;
  /** Flag to enable cursor pagination on the endpoint as boolean string. e.g. "false" */
  use_cursor: Scalars['String']['input'];
};

export type PaystackListBanksResponseDto = {
  __typename?: 'PaystackListBanksResponseDto';
  data?: Maybe<Array<Maybe<PaystackBankAccount>>>;
  message: Scalars['String']['output'];
  meta?: Maybe<PaystackListBanksMetadata>;
  status: Scalars['Boolean']['output'];
};

export type PaystackListTransferRecipientsRequestDto = {
  /** A timestamp from which to start listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 */
  from?: InputMaybe<Scalars['String']['input']>;
  /** Specify exactly what page you want to retrieve. If not specified we use a default value of 1. */
  page?: InputMaybe<Scalars['Int']['input']>;
  /** Specify how many records you want to retrieve per page. If not specify we use a default value of 50. */
  perPage?: InputMaybe<Scalars['Int']['input']>;
  /** A timestamp at which to stop listing transfer recipients e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 */
  to?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackListTransferRecipientsResponseDto = {
  __typename?: 'PaystackListTransferRecipientsResponseDto';
  data: Array<Maybe<PaystackTransferRecipient>>;
  message: Scalars['String']['output'];
  meta: PaystackPagination;
  status: Scalars['Boolean']['output'];
};

export type PaystackListTransfersData = {
  __typename?: 'PaystackListTransfersData';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  failures?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  integration: Scalars['Int']['output'];
  reason: Scalars['String']['output'];
  recipient: PaystackTransferRecipient;
  source: Scalars['String']['output'];
  source_details?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  transfer_code: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type PaystackListTransfersRequestDto = {
  /** Filter by customer ID */
  customer: Scalars['String']['input'];
  /** A timestamp from which to start listing transfer e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 */
  from?: InputMaybe<Scalars['String']['input']>;
  /** Specify exactly what transfer you want to page. If not specify we use a default value of 1. */
  page?: InputMaybe<Scalars['Int']['input']>;
  /** Specify how many records you want to retrieve per page. If not specify we use a default value of 50. */
  perPage?: InputMaybe<Scalars['Int']['input']>;
  /** A timestamp at which to stop listing transfer e.g. 2016-09-24T00:00:05.000Z, 2016-09-21 */
  to?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackListTransfersResponseDto = {
  __typename?: 'PaystackListTransfersResponseDto';
  data: Array<Maybe<PaystackListTransfersData>>;
  message: Scalars['String']['output'];
  meta: PaystackPagination;
  status: Scalars['Boolean']['output'];
};

export type PaystackLogAuthorisation = {
  __typename?: 'PaystackLogAuthorisation';
  account_name: Scalars['String']['output'];
  authorization_code: Scalars['String']['output'];
  bank: Scalars['String']['output'];
  bin: Scalars['Int']['output'];
  card_type: Scalars['String']['output'];
  channel: Scalars['String']['output'];
  country_code: Scalars['String']['output'];
  exp_month: Scalars['Int']['output'];
  exp_year: Scalars['Int']['output'];
  last4: Scalars['Int']['output'];
  reusable: Scalars['Boolean']['output'];
  signature: Scalars['String']['output'];
};

export type PaystackLogCustomer = {
  __typename?: 'PaystackLogCustomer';
  customer_code: Scalars['String']['output'];
  email: Scalars['String']['output'];
  first_name: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  last_name: Scalars['String']['output'];
};

export type PaystackMobileMoneyInitialiseChargeRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** Currency code */
  currency: Scalars['String']['input'];
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** A JSON object */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** Mobile details (don't send if charging an authorization code, bank or card) */
  mobile_money: PaysTackChargeMobileMoney;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackMobileMoneyInitialiseChargeResponseData = {
  __typename?: 'PaystackMobileMoneyInitialiseChargeResponseData';
  display_text?: Maybe<Scalars['String']['output']>;
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
};

export type PaystackMobileMoneyInitialiseChargeResponseDto = {
  __typename?: 'PaystackMobileMoneyInitialiseChargeResponseDto';
  data: PaystackMobileMoneyInitialiseChargeResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackMobileMoneyResponseData = {
  __typename?: 'PaystackMobileMoneyResponseData';
  amount: Scalars['Int']['output'];
  channel: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  gateway_response: Scalars['String']['output'];
  ip_address: Scalars['String']['output'];
  log?: Maybe<PayStackLog>;
  message?: Maybe<Scalars['String']['output']>;
  metadata: Scalars['JSONObject']['output'];
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
  transaction_date: Scalars['String']['output'];
};

export type PaystackMobileMoneyResponseDto = {
  __typename?: 'PaystackMobileMoneyResponseDto';
  data: PaystackMobileMoneyResponseData;
  message?: Maybe<Scalars['String']['output']>;
  status: Scalars['Boolean']['output'];
};

export type PaystackPagination = {
  __typename?: 'PaystackPagination';
  page: Scalars['Int']['output'];
  pageCount: Scalars['Int']['output'];
  perPage: Scalars['Int']['output'];
  skipped: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export enum PaystackPaymentChannels {
  Bank = 'bank',
  BankTransfer = 'bank_transfer',
  Card = 'card',
  Eft = 'eft',
  MobileMoney = 'mobile_money',
  Qr = 'qr',
  Ussd = 'ussd'
}

export type PaystackQrInitialiseChargeRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** The currency code */
  currency: Scalars['String']['input'];
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** A JSON object */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** QR details */
  qr: PaysTackChargeQr;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type PaystackQrInitialiseChargeResponseData = {
  __typename?: 'PaystackQRInitialiseChargeResponseData';
  qr_code: Scalars['String']['output'];
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type PaystackQrInitialiseChargeResponseDto = {
  __typename?: 'PaystackQRInitialiseChargeResponseDto';
  data: PaystackQrInitialiseChargeResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackResolveAccountData = {
  __typename?: 'PaystackResolveAccountData';
  account_name: Scalars['String']['output'];
  account_number: Scalars['String']['output'];
};

export type PaystackResolveAccountNumberRequestDto = {
  /** Account Number */
  account_number: Scalars['String']['input'];
  /** You can get the list of bank codes by calling the List Bank endpoint */
  bank_code: Scalars['String']['input'];
};

export type PaystackResolveAccountNumberResponseDto = {
  __typename?: 'PaystackResolveAccountNumberResponseDto';
  data: PaystackResolveAccountData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackResolveCardBinData = {
  __typename?: 'PaystackResolveCardBINData';
  bank: Scalars['String']['output'];
  bin: Scalars['String']['output'];
  brand: Scalars['String']['output'];
  card_type: Scalars['String']['output'];
  country_code: Scalars['String']['output'];
  country_name: Scalars['String']['output'];
  linked_bank_id: Scalars['String']['output'];
  sub_brand: Scalars['String']['output'];
};

export type PaystackResolveCardBinRequestDto = {
  /** First 6 characters of card */
  bin: Scalars['String']['input'];
};

export type PaystackResolveCardBinResponseDto = {
  __typename?: 'PaystackResolveCardBINResponseDto';
  data: PaystackResolveCardBinData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export enum PaystackTransactionBearer {
  Account = 'account',
  Subaccount = 'subaccount'
}

export type PaystackTransactionInitialiseRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** Who bears Paystack charges? account or subaccount (defaults to account). */
  bearer?: InputMaybe<PaystackTransactionBearer>;
  /** Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction */
  callback_url?: InputMaybe<Scalars['String']['input']>;
  /** An array of payment channels to control what channels you want to make available to the user to make a payment with. Available channels include: ["card", "bank", "ussd", "qr", "mobile_money", "bank_transfer", "eft"] */
  channels?: InputMaybe<Array<InputMaybe<PaystackPaymentChannels>>>;
  /** The transaction currency (NGN, GHS, ZAR or USD). Defaults to your integration currency. */
  currency?: InputMaybe<Scalars['String']['input']>;
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** Number of times to charge customer during subscription to plan */
  invoice_limit?: InputMaybe<Scalars['Int']['input']>;
  /** Stringified JSON object of custom data. Kindly check the Paystack Metadata input for more information. */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** If transaction is to create a subscription to a predefined plan, provide plan code here. This would invalidate the value provided in amount */
  plan?: InputMaybe<Scalars['String']['input']>;
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
  /** The split code of the transaction split. e.g. SPL_98WF13Eb3w */
  split_code?: InputMaybe<Scalars['String']['input']>;
  /** The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj */
  subaccount?: InputMaybe<Scalars['String']['input']>;
  /** An amount used to override the split configuration for a single split payment. If set, the amount specified goes to the main account regardless of the split configuration. */
  transaction_charge?: InputMaybe<Scalars['Int']['input']>;
};

export type PaystackTransactionInitialiseResponseData = {
  __typename?: 'PaystackTransactionInitialiseResponseData';
  access_code: Scalars['String']['output'];
  authorization_url: Scalars['String']['output'];
  reference: Scalars['String']['output'];
};

export type PaystackTransactionInitialiseResponseDto = {
  __typename?: 'PaystackTransactionInitialiseResponseDto';
  data: PaystackTransactionInitialiseResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackTransferRecipient = {
  __typename?: 'PaystackTransferRecipient';
  active: Scalars['Boolean']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  details: PaystackCreateTransferRecipientDetails;
  domain: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  integration: Scalars['Int']['output'];
  is_deleted: Scalars['Boolean']['output'];
  metadata?: Maybe<Scalars['JSON']['output']>;
  name: Scalars['String']['output'];
  recipient_code: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
};

export type PaystackUssdInitialiseChargeRequestDto = {
  /** Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
  amount: Scalars['Int']['input'];
  /** Customer's email address */
  email: Scalars['String']['input'];
  /** A JSON object */
  metadata?: InputMaybe<PaystackCustomFields>;
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
  /** Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
  reference?: InputMaybe<Scalars['String']['input']>;
  /** USSD details */
  ussd: PaysTackChargeUssd;
};

export type PaystackUssdInitialiseChargeResponseData = {
  __typename?: 'PaystackUSSDInitialiseChargeResponseData';
  display_text?: Maybe<Scalars['String']['output']>;
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
  ussd_code: Scalars['String']['output'];
};

export type PaystackUssdInitialiseChargeResponseDto = {
  __typename?: 'PaystackUSSDInitialiseChargeResponseDto';
  data: PaystackUssdInitialiseChargeResponseData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackUpdateTransferRecipientRequestDto = {
  /** Email address of the recipient */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Transfer Recipient's ID or code */
  id_or_code: Scalars['ID']['input'];
  /** A name for the recipient */
  name: Scalars['String']['input'];
};

export type PaystackUpdateTransferRecipientResponseDto = {
  __typename?: 'PaystackUpdateTransferRecipientResponseDto';
  data: PaystackTransferRecipient;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackValidateAccountData = {
  __typename?: 'PaystackValidateAccountData';
  verificationMessage: Scalars['String']['output'];
  verified: Scalars['Boolean']['output'];
};

export type PaystackValidateAccountRequestDto = {
  /** Customer's first and last name registered with their bank */
  account_name: Scalars['String']['input'];
  /** Customer’s account number */
  account_number: Scalars['String']['input'];
  /** This can take one of: [ personal, business ] */
  account_type: Scalars['String']['input'];
  /** The bank code of the customer’s bank. You can fetch the bank codes by using our List Bank endpoint */
  bank_code: Scalars['String']['input'];
  /** The two digit ISO code of the customer’s bank. e.g GH */
  country_code: Scalars['String']['input'];
  /** ID number for specified custmer's mode of identity */
  document_number: Scalars['String']['input'];
  /** Customer’s mode of identity. This could be one of: [ identityNumber, passportNumber, businessRegistrationNumber ] */
  document_type: Scalars['String']['input'];
};

export type PaystackValidateAccountResponseDto = {
  __typename?: 'PaystackValidateAccountResponseDto';
  data: PaystackValidateAccountData;
  message: Scalars['String']['output'];
  status: Scalars['Boolean']['output'];
};

export type PaystackVerifyTransferData = {
  __typename?: 'PaystackVerifyTransferData';
  amount: Scalars['Int']['output'];
  createdAt: Scalars['String']['output'];
  currency: Scalars['String']['output'];
  domain: Scalars['String']['output'];
  failures?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  integration: Scalars['Int']['output'];
  reason: Scalars['String']['output'];
  recipient: PaystackTransferRecipient;
  reference: Scalars['String']['output'];
  source: Scalars['String']['output'];
  source_details?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  titan_code?: Maybe<Scalars['String']['output']>;
  transfer_code: Scalars['String']['output'];
  transferred_at?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['String']['output'];
};

export type PaystackVerifyTransferRequestDto = {
  /** Transfer reference */
  reference: Scalars['String']['input'];
};

export type PaystackVerifyTransferResponseDto = {
  __typename?: 'PaystackVerifyTransferResponseDto';
  data: PaystackVerifyTransferData;
  message?: Maybe<Scalars['String']['output']>;
  status: Scalars['Boolean']['output'];
};

export type PhoneVerificationOutPut = {
  __typename?: 'PhoneVerificationOutPut';
  code?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
};

export type PickUpInput = {
  google_location: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  latitude: Scalars['String']['input'];
  location: Scalars['String']['input'];
  longitude: Scalars['String']['input'];
  remarks?: InputMaybe<Scalars['String']['input']>;
};

export type Pickup = {
  __typename?: 'Pickup';
  country?: Maybe<Scalars['String']['output']>;
  google_location?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  latitude?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  longitude?: Maybe<Scalars['String']['output']>;
  remarks?: Maybe<Scalars['String']['output']>;
};

export type Plugin = {
  __typename?: 'Plugin';
  banner_image?: Maybe<Scalars['String']['output']>;
  category: Scalars['String']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  developer?: Maybe<Scalars['String']['output']>;
  endpoint: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  logo: Scalars['String']['output'];
  name: Scalars['String']['output'];
  updated_at?: Maybe<Scalars['Date']['output']>;
  verified: Scalars['Boolean']['output'];
};

export type PluginFilter = {
  banner_image?: InputMaybe<StringOperator>;
  category?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<DateOperator>;
  description?: InputMaybe<StringOperator>;
  developer?: InputMaybe<StringOperator>;
  endpoint?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  logo?: InputMaybe<StringOperator>;
  name?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
  verified?: InputMaybe<BooleanOperator>;
};

export type Product = {
  __typename?: 'Product';
  attended_to?: Maybe<Scalars['Boolean']['output']>;
  avatar: Scalars['String']['output'];
  categories?: Maybe<Array<Maybe<ProductCategory>>>;
  combination_string?: Maybe<Scalars['String']['output']>;
  combinations?: Maybe<Array<Maybe<ProductCombination>>>;
  comments?: Maybe<Array<Maybe<ProductComment>>>;
  cost_price: Scalars['Float']['output'];
  country?: Maybe<CountryCode>;
  created_at?: Maybe<Scalars['Date']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  discount?: Maybe<Discount>;
  distributionChannels?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  extra_information?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  inhouse?: Maybe<Scalars['Boolean']['output']>;
  likesCount?: Maybe<Scalars['Float']['output']>;
  limited_stock?: Maybe<Scalars['Boolean']['output']>;
  main_stock?: Maybe<Scalars['Int']['output']>;
  media?: Maybe<Array<Maybe<ProductAvatar>>>;
  minimumOrderQuantity?: Maybe<Scalars['Int']['output']>;
  overalReview: Scalars['Float']['output'];
  price: Scalars['Float']['output'];
  profit_added?: Maybe<Scalars['Float']['output']>;
  published: Scalars['Boolean']['output'];
  qty?: Maybe<Scalars['Int']['output']>;
  resell: Scalars['Boolean']['output'];
  reviewBreakDown: ReviewBreakDown;
  reviews?: Maybe<Array<Review>>;
  savesCount?: Maybe<Scalars['Float']['output']>;
  sharesCount?: Maybe<Scalars['Float']['output']>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  sku: Scalars['String']['output'];
  supplier?: Maybe<Supplier>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  title: Scalars['String']['output'];
  transit_stock?: Maybe<Scalars['Int']['output']>;
  uuid?: Maybe<Scalars['String']['output']>;
  variations?: Maybe<Array<Maybe<Variation>>>;
  verified?: Maybe<Scalars['Boolean']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type ProductAvatar = {
  __typename?: 'ProductAvatar';
  avatar?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  product_id?: Maybe<Scalars['ID']['output']>;
};

export type ProductCategory = {
  __typename?: 'ProductCategory';
  avatar?: Maybe<Scalars['String']['output']>;
  children?: Maybe<Array<Maybe<ProductCategory>>>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  parent?: Maybe<Scalars['ID']['output']>;
};

export type ProductCategoryAndTagsInput = {
  categories?: InputMaybe<Array<Scalars['String']['input']>>;
  product_id: Scalars['ID']['input'];
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProductCategoryCount = {
  __typename?: 'ProductCategoryCount';
  category: Scalars['String']['output'];
  count: Scalars['Int']['output'];
};

export type ProductCategoryFilter = {
  country?: InputMaybe<StringOperator>;
  description?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  parent?: InputMaybe<NumberOperator>;
  random?: InputMaybe<Scalars['Boolean']['input']>;
  shop_id?: InputMaybe<IdOperator>;
  supplier_id?: InputMaybe<IdOperator>;
};

export type ProductCategoryInput = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  parent?: InputMaybe<Scalars['ID']['input']>;
};

export type ProductCollection = {
  __typename?: 'ProductCollection';
  collection?: Maybe<Catalog>;
  id?: Maybe<Scalars['ID']['output']>;
  product?: Maybe<Product>;
};

export type ProductCombination = {
  __typename?: 'ProductCombination';
  available_stock: Scalars['Int']['output'];
  combination_string: Scalars['String']['output'];
  id?: Maybe<Scalars['ID']['output']>;
  price: Scalars['Float']['output'];
  sku: Scalars['String']['output'];
};

export type ProductCombinationFilter = {
  available_stock?: InputMaybe<NumberOperator>;
  combination_string?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  price?: InputMaybe<MoneyOperator>;
  sku?: InputMaybe<StringOperator>;
};

export type ProductCombinationInput = {
  avatar: Scalars['String']['input'];
  categories?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  combination_string: Scalars['String']['input'];
  cost_price: Scalars['Float']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  media?: InputMaybe<Array<Scalars['String']['input']>>;
  price: Scalars['Float']['input'];
  qty: Scalars['Int']['input'];
  sku: Scalars['String']['input'];
};

export type ProductComment = {
  __typename?: 'ProductComment';
  created_at?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  staff_number?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['String']['output']>;
};

export enum ProductCondition {
  In = 'IN',
  NotIn = 'NOT_IN'
}

export enum ProductDistinctField {
  AttendedTo = 'attended_to',
  Avatar = 'avatar',
  CombinationString = 'combination_string',
  CostPrice = 'cost_price',
  Country = 'country',
  Currency = 'currency',
  Description = 'description',
  Id = 'id',
  Inhouse = 'inhouse',
  LimitedStock = 'limited_stock',
  Price = 'price',
  Published = 'published',
  Qty = 'qty',
  ShopId = 'shop_id',
  Sku = 'sku',
  Title = 'title',
  Uuid = 'uuid',
  Verified = 'verified',
  Weight = 'weight'
}

export type ProductInformationInput = {
  cost_price?: InputMaybe<Scalars['Float']['input']>;
  country?: InputMaybe<CountryCode>;
  currency?: InputMaybe<CurrencyCode>;
  description?: InputMaybe<Scalars['String']['input']>;
  extra_information?: InputMaybe<Scalars['String']['input']>;
  minimumOrderQuantity?: InputMaybe<Scalars['Int']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  product_id: Scalars['ID']['input'];
  sku: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type ProductInventoryInput = {
  limited_stock?: InputMaybe<Scalars['Boolean']['input']>;
  product_id: Scalars['ID']['input'];
  qty?: InputMaybe<Scalars['Int']['input']>;
};

export type ProductMediaInput = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  media?: InputMaybe<Array<Scalars['String']['input']>>;
  product_id: Scalars['ID']['input'];
};

export enum ProductOrigin {
  InHouse = 'IN_HOUSE',
  Shopify = 'SHOPIFY'
}

export enum ProductPolicy {
  Resell = 'RESELL',
  Supplier = 'SUPPLIER'
}

export type ProductRequest = {
  __typename?: 'ProductRequest';
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  qty?: Maybe<Scalars['Int']['output']>;
  shop_id?: Maybe<Scalars['ID']['output']>;
  status?: Maybe<ProductRequestStatus>;
};

export enum ProductRequestStatus {
  Approved = 'APPROVED',
  Pending = 'PENDING',
  Rejected = 'REJECTED'
}

export type ProductShipment = {
  __typename?: 'ProductShipment';
  id: Scalars['ID']['output'];
  items?: Maybe<Array<Maybe<ShipmentItem>>>;
  shipmentCode?: Maybe<Scalars['String']['output']>;
  shipmentDescription?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};

export type ProductShipmentFilter = {
  id?: InputMaybe<IdOperator>;
  sku?: InputMaybe<StringOperator>;
};

export type ProductShipmentInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  items?: InputMaybe<Array<InputMaybe<ShipmentItemItem>>>;
  shipmentCode?: InputMaybe<Scalars['String']['input']>;
  shipmentDescription?: InputMaybe<Scalars['String']['input']>;
};

export enum ProductStat {
  Likes = 'LIKES',
  Saves = 'SAVES'
}

export enum ProductStatEditType {
  Decrement = 'DECREMENT',
  Increment = 'INCREMENT'
}

export type ProductStockInput = {
  id: Scalars['ID']['input'];
  price?: InputMaybe<Scalars['Float']['input']>;
  qty: Scalars['Int']['input'];
};

export type ProductsStats = {
  __typename?: 'ProductsStats';
  total_in_stock: Scalars['Int']['output'];
  total_in_transit: Scalars['Int']['output'];
  total_out_stock: Scalars['Int']['output'];
  total_unique_products: Scalars['Int']['output'];
};

export type ProfitRevenueStats = {
  __typename?: 'ProfitRevenueStats';
  allTimeRevenue?: Maybe<Scalars['Float']['output']>;
  dayRevenue?: Maybe<Scalars['Float']['output']>;
  monthRevenue?: Maybe<Scalars['Float']['output']>;
  weekRevenue?: Maybe<Scalars['Float']['output']>;
  yearRevenue?: Maybe<Scalars['Float']['output']>;
};

export enum ProfitType {
  Amount = 'amount',
  Percent = 'percent'
}

export type PromoBanner = {
  __typename?: 'PromoBanner';
  active: Scalars['Boolean']['output'];
  country: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  screen: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type PromoBannerFilter = {
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
};

export type PromoBannerInput = {
  active: Scalars['Boolean']['input'];
  country: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  screen: Scalars['String']['input'];
  url: Scalars['String']['input'];
};

export enum QrProviders {
  /** Availability: Nigeria */
  Masterpass = 'masterpass',
  /** Availability: South Africa */
  Visa = 'visa'
}

export type Query = {
  __typename?: 'Query';
  appBanner?: Maybe<AppBanner>;
  appBanners?: Maybe<Array<AppBanner>>;
  bobGetCourierRates?: Maybe<BobGetCourierRatesResponseDto>;
  /** Get order fulfillments */
  bobGetOrderFulfillments?: Maybe<BobGetOrderFulfillmentsResponseDto>;
  bobGetOrders?: Maybe<BobGetOrdersResponseDto>;
  bobGetRateRequests?: Maybe<BobGetRateRequestsResponseDto>;
  /** Get rates at checkout */
  bobGetRatesAtCheckout?: Maybe<BobGetRatesAtCheckoutResponseDto>;
  bobGetShipmentWaybill?: Maybe<BobShipmentWaybill>;
  bobGetShipments?: Maybe<BobGetShipmentsResponseDto>;
  bobGetTrackingEvents?: Maybe<Array<Maybe<BobTrackingEvent>>>;
  /** Submit OTP to complete a charge */
  chargeSubmitOTP: PaystackMobileMoneyResponseDto;
  deliveryLocation?: Maybe<Delivery>;
  deliveryLocations?: Maybe<Array<Maybe<Delivery>>>;
  deliveryLocationsLength: Scalars['Int']['output'];
  doesShopDomainExist: SokoWorldDomainExistsResponseDto;
  doesShopExist: DoesShopExistResponseDto;
  featuredCategories?: Maybe<Array<FeaturedCategories>>;
  findDeliveryZone?: Maybe<DeliveryZone>;
  /** This payment method allows you to recieve GHS payments via Mobile Money: flutterwave. */
  flutterwaveCharge: FlutterwaveMobileMoneyInitialiseChargeResponseDto;
  /** This endpoint allows you to carry out background checks on users before you onboard them or grant them access to your applications. */
  flutterwaveCheckUserBackground: FlutterwaveCheckUserBackgroundResponseDto;
  /** This section describes how to get bank branch details for the specified Bank. */
  flutterwaveListBankBranches: FlutterwaveListBankBranchesResponseDto;
  /** This section describes how to get bank details for all Banks in the specified Country. This API returns all the Banks information in a country. To get Bank Branch information, please make use of the /branches endpoint. */
  flutterwaveListBanks: FlutterwaveListBanksResponseDto;
  /** This endpoint helps you to resolve the details of a bank account from an account number. Please note that only Nigerian bank details can be resolved using this endpoint. You can also resolve MPesa details and Flutterwave account details with this endpoint. */
  flutterwaveResolveAccountNumber: FlutterwaveResolveAccountNumberResponseDto;
  /** Bank Verification Number or BVN is a biometric identification widely used by Banks in Nigeria. This endpoint allows you to fetch a user's information from their BVN. It supports only BVNs generated by Nigerian Banks. */
  flutterwaveResolveBVNDetails: FlutterwaveResolveBvnDetailsResponseDto;
  /** This endpoint will help you to resolve issuer information from the card bins on Flutterwave. Card Bins (or Bank Identification Numbers) are usually the first six digits of a card number. */
  flutterwaveResolveCardBIN: FlutterwaveResolveCardBinResponseDto;
  /** Confirm the status of a flutterwave transaction */
  flutterwaveVerifyTransaction: FlutterwaveVerifyTransactionResponseDto;
  getAllDelayedProfitPayoutDeliveredOrders?: Maybe<Array<Maybe<DeliveredOrders>>>;
  getAllTimeActiveUsers?: Maybe<Scalars['Any']['output']>;
  getCampaign?: Maybe<Campaign>;
  getCampaigns?: Maybe<Array<Maybe<Campaign>>>;
  getCart?: Maybe<Order>;
  getCarts?: Maybe<Array<Maybe<Order>>>;
  getCartsLength: Scalars['Int']['output'];
  getCatalog: Catalog;
  getCatalogs?: Maybe<Array<Maybe<Catalog>>>;
  getCatalogsLength: Scalars['Int']['output'];
  getCategoryMedia: Array<Maybe<ProductAvatar>>;
  getCollectionProducts?: Maybe<Array<Maybe<Product>>>;
  getCoupon?: Maybe<Coupon>;
  getCoupons?: Maybe<Array<Coupon>>;
  getCouponsLength: Scalars['Int']['output'];
  getCurentForexRate?: Maybe<ForexRate>;
  getCustomer?: Maybe<Customer>;
  getCustomerSubscription?: Maybe<CustomerSubscription>;
  getCustomerSubscriptions?: Maybe<Array<Maybe<CustomerSubscription>>>;
  getCustomers?: Maybe<Array<Maybe<Customer>>>;
  getCustomersLength: Scalars['Int']['output'];
  getDailyActiveUsers?: Maybe<Scalars['Any']['output']>;
  getDailyOrdersSummary?: Maybe<Scalars['Any']['output']>;
  getDelayedProfitPayouts?: Maybe<Array<Maybe<OrderItem>>>;
  getDelayedProfitPayoutsLength: Scalars['Int']['output'];
  getDeliveredOrders?: Maybe<Array<Maybe<DeliveredOrders>>>;
  getDeliveryPrices?: Maybe<Array<AutogeneratedMainType>>;
  getDeliveryZone?: Maybe<DeliveryZone>;
  getDeliveryZones?: Maybe<Array<DeliveryZone>>;
  getDeliveryZonesLength: Scalars['Int']['output'];
  getDiscount?: Maybe<Discount>;
  getDiscountProductCondition?: Maybe<DiscountProductCondition>;
  getDiscountProductConditions?: Maybe<Array<Maybe<DiscountProductCondition>>>;
  getDiscounts?: Maybe<Array<Maybe<Discount>>>;
  getExpiredCustomerSubscriptions?: Maybe<Array<Maybe<CustomerSubscription>>>;
  getForexRates?: Maybe<Array<ForexRate>>;
  getInAppCart?: Maybe<Array<Maybe<CartItem>>>;
  getMainCategories?: Maybe<Array<Maybe<ProductCategory>>>;
  getMonthlyActiveUsers?: Maybe<Scalars['Any']['output']>;
  getNineMonthsActiveUsers?: Maybe<Scalars['Any']['output']>;
  getNumberOfTimesDiscountWasUsed?: Maybe<Scalars['Int']['output']>;
  getOrder?: Maybe<OrderItem>;
  getOrderStatusesStats?: Maybe<OrderStatsStats>;
  getOrders?: Maybe<Array<Maybe<OrderItem>>>;
  getOrdersLength: Scalars['Int']['output'];
  getPayment?: Maybe<Payment>;
  /** Get a single payment record by id */
  getPaymentById: GetPaymentResponseDto;
  /** Get a payment record by the reference used to initialise the payment */
  getPaymentByReference: GetPaymentResponseDto;
  /** Get a list of payment records */
  getPayments?: Maybe<Array<Payment>>;
  getPaymentsLength: Scalars['Int']['output'];
  getPayoutRequests?: Maybe<Array<Maybe<Payout>>>;
  getPayoutRequestsLength?: Maybe<Scalars['Int']['output']>;
  getPickUpLocation?: Maybe<Pickup>;
  getPickUpLocations?: Maybe<Array<Pickup>>;
  getPickUpLocationsLength: Scalars['Int']['output'];
  getPlugin?: Maybe<Plugin>;
  getPlugins?: Maybe<Array<Maybe<Plugin>>>;
  getProduct?: Maybe<Product>;
  getProductAssignedCategories?: Maybe<Array<ProductCategory>>;
  getProductCategories?: Maybe<Array<Maybe<ProductCategory>>>;
  getProductCategoriesLength: Scalars['Int']['output'];
  getProductCategory?: Maybe<ProductCategory>;
  getProductCombination: Scalars['Int']['output'];
  getProductCombinations?: Maybe<Array<Maybe<ProductCombination>>>;
  getProductCombinationsLength: Scalars['Int']['output'];
  getProductDiscount?: Maybe<Discount>;
  getProductMargins?: Maybe<Scalars['Any']['output']>;
  getProductRequests?: Maybe<Array<Maybe<ProductRequest>>>;
  getProducts?: Maybe<Array<Maybe<Product>>>;
  getProductsCountByCategories?: Maybe<Array<Maybe<ProductCategoryCount>>>;
  getProductsLength?: Maybe<Scalars['Int']['output']>;
  getProductsLikedByUser: Array<Maybe<Product>>;
  getProductsMetrics?: Maybe<ProductsStats>;
  getProductsSavedByUser: Array<Maybe<Product>>;
  getProductsSharedByUser: Array<Maybe<SharedProduct>>;
  getProductsShipments?: Maybe<Array<Maybe<ProductShipment>>>;
  getPromoBanner?: Maybe<PromoBanner>;
  getPromoBanners?: Maybe<Array<Maybe<PromoBanner>>>;
  getPromoBannersLength: Scalars['Int']['output'];
  getRandomProducts?: Maybe<Array<Maybe<Product>>>;
  getRehookLeaderboard?: Maybe<RehookLeaderboard>;
  getResellerWalletSummary?: Maybe<WalletSumary>;
  getRevenueFromProfit?: Maybe<ProfitRevenueStats>;
  getReview: Review;
  getReviews?: Maybe<Array<Maybe<Review>>>;
  getReviewsLength: Scalars['Int']['output'];
  getSales?: Maybe<Array<Maybe<Sales>>>;
  getSelfCheckoutCustomer?: Maybe<Customer>;
  getSelfCheckoutLink?: Maybe<Scalars['String']['output']>;
  getSharedProduct: SharedProduct;
  getSharedProducts?: Maybe<Array<Maybe<SharedProduct>>>;
  getShop?: Maybe<Shop>;
  getShopCollection?: Maybe<ShopCollection>;
  getShopCollectionProducts?: Maybe<Array<Maybe<Product>>>;
  getShopCollections?: Maybe<Array<ShopCollection>>;
  getShopCollectionsLength: Scalars['Int']['output'];
  getShopifyShop?: Maybe<ShopifyShop>;
  getShopifyShops?: Maybe<Array<Maybe<ShopifyShop>>>;
  getShops?: Maybe<Array<Shop>>;
  getShopsLength: Scalars['Int']['output'];
  getSixMonthsActiveUsers?: Maybe<Scalars['Any']['output']>;
  getSubCategories?: Maybe<Array<Maybe<ProductCategory>>>;
  getSubscriptionPackage?: Maybe<SubscriptionPackage>;
  getSubscriptionPackages?: Maybe<Array<Maybe<SubscriptionPackage>>>;
  getSubscriptionPayment?: Maybe<SubscriptionPaymentHistory>;
  getSubscriptionPayments?: Maybe<Array<Maybe<SubscriptionPaymentHistory>>>;
  getSupplier?: Maybe<Supplier>;
  getSupplierBusinessPickupLocations?: Maybe<Array<Maybe<SupplierLocation>>>;
  getSupplierDailyOrdersSummary?: Maybe<Scalars['Any']['output']>;
  getSupplierOrdersByStatusSummary?: Maybe<OrderStatusesStats>;
  getSupplierPickupLocation?: Maybe<SupplierLocation>;
  getSupplierStats?: Maybe<SupplierStats>;
  getSupplierWalletSummary?: Maybe<SupplierWalletSumary>;
  getSuppliers?: Maybe<Array<Supplier>>;
  getSuppliersLength: Scalars['Int']['output'];
  getTerm?: Maybe<Terms>;
  getTerms?: Maybe<Array<Terms>>;
  getTermsLength: Scalars['Int']['output'];
  getThreeMonthsActiveUsers?: Maybe<Scalars['Any']['output']>;
  /** This section would return the payment methods for Tingg */
  getTinggPaymentMethods?: Maybe<Array<Maybe<TinggQueryStatusResponsePaymentOptions>>>;
  getTopProducts: TopProductsResponseDto;
  getTopResellersForTheWeek?: Maybe<Array<Maybe<TopReseller>>>;
  getUnverifiedProducts?: Maybe<Array<Maybe<Product>>>;
  getUser?: Maybe<User>;
  getUserCoupons?: Maybe<Array<CouponRedemption>>;
  getUserCouponsLength: Scalars['Int']['output'];
  getUserDelayedOrders?: Maybe<Array<Maybe<OrderItem>>>;
  getUserPaymentDetails?: Maybe<Array<UserPayment>>;
  getUserPlugins?: Maybe<Array<Maybe<UserPlugin>>>;
  getUserReferralsMetrics?: Maybe<UserReferralMetrics>;
  getUsers?: Maybe<Array<Maybe<User>>>;
  getUsersLength: Scalars['Int']['output'];
  getVariation: Scalars['Int']['output'];
  getVariations?: Maybe<Array<Maybe<Variation>>>;
  getVariationsLength: Scalars['Int']['output'];
  getWalletCashRewardsHistory?: Maybe<Array<Maybe<CashRewardHistory>>>;
  getWalletHistory?: Maybe<WalletHistory>;
  getWalletTopupPayments?: Maybe<Array<Maybe<WalletTopupPayment>>>;
  getWeeklyActiveUsers?: Maybe<Scalars['Any']['output']>;
  getWeeklyActiveUsersGraph?: Maybe<Scalars['Any']['output']>;
  getYearActiveUsers?: Maybe<Scalars['Any']['output']>;
  getYesterDayActiveUser?: Maybe<Scalars['Any']['output']>;
  isProductInShop?: Maybe<Scalars['Boolean']['output']>;
  isProductLikedByUser?: Maybe<Scalars['Boolean']['output']>;
  isProductSavedByUser?: Maybe<Scalars['Boolean']['output']>;
  isProductSharedByUser?: Maybe<Scalars['Boolean']['output']>;
  isSkuAvailable?: Maybe<Scalars['Boolean']['output']>;
  loadShopifyProducts?: Maybe<Array<Maybe<ShopifyLoadedProduct>>>;
  me?: Maybe<User>;
  onBoardingCouponExistsAndNotConsumed?: Maybe<Scalars['Boolean']['output']>;
  orderGraphStats?: Maybe<Array<Maybe<OrderGraphData>>>;
  orderStats?: Maybe<OrderStats>;
  /** This payment method allows you to recieve GHS payments via Mobile Money: paystack. */
  paystackCharge: PaystackMobileMoneyInitialiseChargeResponseDto;
  /** Get details of a transfer on your integration. */
  paystackFetchTransfer: PaystackFetchTransferResponseDto;
  /** Fetch the details of a transfer recipient */
  paystackFetchTransferRecipient: PaystackFetchTransferRecipientResponseDto;
  /** Get a list of all supported banks and their properties */
  paystackListBanks: PaystackListBanksResponseDto;
  /** List transfer recipients available on your integration */
  paystackListTransferRecipients: PaystackListTransferRecipientsResponseDto;
  /** List the transfers made on your integration. */
  paystackListTransfers: PaystackListTransfersResponseDto;
  /** Confirm an account belongs to the right customer */
  paystackResolveAccountNumber: PaystackResolveAccountNumberResponseDto;
  /** Get more information about a customer's card */
  paystackResolveCardBIN: PaystackResolveCardBinResponseDto;
  /** Confirm the authenticity of a customer's account number before sending money */
  paystackValidateAccount: PaystackValidateAccountResponseDto;
  /** Confirm the status of a paystack transaction */
  paystackVerifyTransaction: PaystackMobileMoneyResponseDto;
  /** Verify the status of a transfer on your integration. */
  paystackVerifyTransfer: PaystackVerifyTransferResponseDto;
  topDeals?: Maybe<Array<Product>>;
  topDealsBanners?: Maybe<Array<TopDealBanner>>;
  topDealsLength: Scalars['Int']['output'];
  trendingProducts?: Maybe<Array<Product>>;
  user?: Maybe<User>;
  userGraphStats?: Maybe<Array<Maybe<UserGraphData>>>;
  userStats?: Maybe<UserStats>;
  users?: Maybe<Array<Maybe<User>>>;
  verifyAuth: Auth;
  wallet?: Maybe<Wallet>;
  walletHistory?: Maybe<Array<Maybe<WalletHistory>>>;
  walletHistoryLength: Scalars['Int']['output'];
};


export type QueryAppBannerArgs = {
  filter: AppBannerFilter;
};


export type QueryAppBannersArgs = {
  filter?: InputMaybe<AppBannerFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryBobGetCourierRatesArgs = {
  data: BobGetCourierRatesRequestDto;
};


export type QueryBobGetOrderFulfillmentsArgs = {
  data: BobGetOrderFulfillmentsRequestDto;
};


export type QueryBobGetOrdersArgs = {
  data: BobGetOrdersRequestDto;
};


export type QueryBobGetRateRequestsArgs = {
  data: BobGetRateRequestsRequestDto;
};


export type QueryBobGetRatesAtCheckoutArgs = {
  data: BobGetRatesAtCheckoutRequestDto;
};


export type QueryBobGetShipmentWaybillArgs = {
  data: BobGetShipmentWaybillRequestDto;
};


export type QueryBobGetShipmentsArgs = {
  data: BobGetShipmentsRequestDto;
};


export type QueryBobGetTrackingEventsArgs = {
  data: BobGetTrackingEventsRequestDto;
};


export type QueryChargeSubmitOtpArgs = {
  data: PaystackChargeSubmitOtpRequestDto;
};


export type QueryDeliveryLocationArgs = {
  filter: DeliveryFilter;
};


export type QueryDeliveryLocationsArgs = {
  filter?: InputMaybe<DeliveryFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryDeliveryLocationsLengthArgs = {
  filter?: InputMaybe<DeliveryFilter>;
};


export type QueryDoesShopDomainExistArgs = {
  data: SokoWorldDomainExistsRequestDto;
};


export type QueryDoesShopExistArgs = {
  filter: ShopFilter;
};


export type QueryFeaturedCategoriesArgs = {
  filter?: InputMaybe<FeaturedCategoriesFilter>;
};


export type QueryFindDeliveryZoneArgs = {
  location?: InputMaybe<LatLngInput>;
};


export type QueryFlutterwaveChargeArgs = {
  data: FlutterwaveMobileMoneyInitialiseChargeRequestDto;
};


export type QueryFlutterwaveCheckUserBackgroundArgs = {
  data: FlutterwaveCheckUserBackgroundRequestDto;
};


export type QueryFlutterwaveListBankBranchesArgs = {
  data: FlutterwaveListBankBranchesRequestDto;
};


export type QueryFlutterwaveListBanksArgs = {
  data: FlutterwaveListBanksRequestDto;
};


export type QueryFlutterwaveResolveAccountNumberArgs = {
  data: FlutterwaveResolveAccountNumberRequestDto;
};


export type QueryFlutterwaveResolveBvnDetailsArgs = {
  data: FlutterwaveResolveBvnDetailsRequestDto;
};


export type QueryFlutterwaveResolveCardBinArgs = {
  data: FlutterwaveResolveCardBinRequestDto;
};


export type QueryFlutterwaveVerifyTransactionArgs = {
  data: Scalars['String']['input'];
};


export type QueryGetCampaignArgs = {
  filter?: InputMaybe<CampaignFilter>;
};


export type QueryGetCampaignsArgs = {
  filter?: InputMaybe<CampaignFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCartArgs = {
  filter?: InputMaybe<CartFilter>;
};


export type QueryGetCartsArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<CartFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCartsLengthArgs = {
  filter?: InputMaybe<CartFilter>;
};


export type QueryGetCatalogArgs = {
  filter?: InputMaybe<CatalogFilter>;
};


export type QueryGetCatalogsArgs = {
  filter?: InputMaybe<CatalogFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCatalogsLengthArgs = {
  filter?: InputMaybe<CatalogFilter>;
};


export type QueryGetCategoryMediaArgs = {
  filter: ProductCategoryFilter;
  pagination: Pagination;
};


export type QueryGetCollectionProductsArgs = {
  filter?: InputMaybe<CatalogFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCouponArgs = {
  filter: CouponFilter;
};


export type QueryGetCouponsArgs = {
  filter?: InputMaybe<CouponFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCouponsLengthArgs = {
  filter?: InputMaybe<CouponFilter>;
};


export type QueryGetCustomerArgs = {
  filter?: InputMaybe<CustomerFilter>;
};


export type QueryGetCustomerSubscriptionArgs = {
  filter?: InputMaybe<CustomerSubscriptionFilter>;
};


export type QueryGetCustomerSubscriptionsArgs = {
  filter?: InputMaybe<CustomerSubscriptionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCustomersArgs = {
  filter?: InputMaybe<CustomerFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetCustomersLengthArgs = {
  filter?: InputMaybe<CustomerFilter>;
};


export type QueryGetDailyOrdersSummaryArgs = {
  country: Scalars['String']['input'];
  from: Scalars['Date']['input'];
  to: Scalars['Date']['input'];
};


export type QueryGetDelayedProfitPayoutsArgs = {
  country: Scalars['String']['input'];
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetDelayedProfitPayoutsLengthArgs = {
  country: Scalars['String']['input'];
};


export type QueryGetDeliveredOrdersArgs = {
  filter?: InputMaybe<DeliveredOrdersFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetDeliveryPricesArgs = {
  input?: InputMaybe<DeliveryPricesInput>;
};


export type QueryGetDeliveryZoneArgs = {
  filter?: InputMaybe<DeliveryZonesFilter>;
};


export type QueryGetDeliveryZonesArgs = {
  filter?: InputMaybe<DeliveryZonesFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetDeliveryZonesLengthArgs = {
  filter?: InputMaybe<DeliveryZonesFilter>;
};


export type QueryGetDiscountArgs = {
  filter: DiscountFilter;
};


export type QueryGetDiscountProductConditionArgs = {
  filter: DiscountProductConditionFilter;
};


export type QueryGetDiscountProductConditionsArgs = {
  filter?: InputMaybe<DiscountProductConditionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetDiscountsArgs = {
  filter?: InputMaybe<DiscountFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetExpiredCustomerSubscriptionsArgs = {
  filter?: InputMaybe<CustomerSubscriptionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetForexRatesArgs = {
  filter?: InputMaybe<ForexRateFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetInAppCartArgs = {
  user_id: Scalars['ID']['input'];
};


export type QueryGetMainCategoriesArgs = {
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetNumberOfTimesDiscountWasUsedArgs = {
  input: DiscountUseFilter;
};


export type QueryGetOrderArgs = {
  filter?: InputMaybe<OrderFilter>;
};


export type QueryGetOrderStatusesStatsArgs = {
  country: Scalars['String']['input'];
};


export type QueryGetOrdersArgs = {
  filter?: InputMaybe<OrderFilter>;
  pagination?: InputMaybe<Pagination>;
  sort?: InputMaybe<OrderSort>;
};


export type QueryGetOrdersLengthArgs = {
  filter?: InputMaybe<OrderFilter>;
};


export type QueryGetPaymentArgs = {
  filter?: InputMaybe<PaymentFilter>;
};


export type QueryGetPaymentByIdArgs = {
  data: GetPaymentByIdRequestDto;
};


export type QueryGetPaymentByReferenceArgs = {
  data: GetPaymentByReferenceRequestDto;
};


export type QueryGetPaymentsArgs = {
  filter?: InputMaybe<PaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetPaymentsLengthArgs = {
  filter?: InputMaybe<PaymentFilter>;
};


export type QueryGetPayoutRequestsArgs = {
  filter?: InputMaybe<PayoutFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetPayoutRequestsLengthArgs = {
  filter?: InputMaybe<PayoutFilter>;
};


export type QueryGetPickUpLocationArgs = {
  filter?: InputMaybe<DeliveryFilter>;
};


export type QueryGetPickUpLocationsArgs = {
  filter?: InputMaybe<DeliveryFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetPickUpLocationsLengthArgs = {
  filter?: InputMaybe<DeliveryFilter>;
};


export type QueryGetPluginArgs = {
  filter: PluginFilter;
};


export type QueryGetPluginsArgs = {
  filter?: InputMaybe<PluginFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetProductArgs = {
  filter?: InputMaybe<ProductFilter>;
};


export type QueryGetProductAssignedCategoriesArgs = {
  product_id: Scalars['ID']['input'];
};


export type QueryGetProductCategoriesArgs = {
  filter?: InputMaybe<ProductCategoryFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetProductCategoriesLengthArgs = {
  filter?: InputMaybe<ProductCategoryFilter>;
};


export type QueryGetProductCategoryArgs = {
  filter?: InputMaybe<ProductCategoryFilter>;
};


export type QueryGetProductCombinationArgs = {
  filter?: InputMaybe<ProductCombinationFilter>;
};


export type QueryGetProductCombinationsArgs = {
  filter?: InputMaybe<ProductCombinationFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetProductCombinationsLengthArgs = {
  filter?: InputMaybe<ProductCombinationFilter>;
};


export type QueryGetProductDiscountArgs = {
  productSKU?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetProductRequestsArgs = {
  filter?: InputMaybe<ProductRequestFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetProductsArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<ProductFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetProductsCountByCategoriesArgs = {
  supplier_id: Scalars['ID']['input'];
};


export type QueryGetProductsLengthArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<ProductFilter>;
};


export type QueryGetProductsLikedByUserArgs = {
  userId: Scalars['ID']['input'];
};


export type QueryGetProductsMetricsArgs = {
  country: Scalars['String']['input'];
};


export type QueryGetProductsSavedByUserArgs = {
  userId: Scalars['ID']['input'];
};


export type QueryGetProductsSharedByUserArgs = {
  userId: Scalars['ID']['input'];
};


export type QueryGetProductsShipmentsArgs = {
  filter?: InputMaybe<ProductShipmentFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetPromoBannerArgs = {
  screen: Scalars['String']['input'];
};


export type QueryGetPromoBannersArgs = {
  filter?: InputMaybe<PromoBannerFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetPromoBannersLengthArgs = {
  filter?: InputMaybe<PromoBannerFilter>;
};


export type QueryGetRandomProductsArgs = {
  filter?: InputMaybe<ProductFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetRehookLeaderboardArgs = {
  input: GetRehookLeaderboardInput;
};


export type QueryGetResellerWalletSummaryArgs = {
  user_id: Scalars['ID']['input'];
};


export type QueryGetRevenueFromProfitArgs = {
  country: Scalars['String']['input'];
};


export type QueryGetReviewArgs = {
  filter: ReviewFilter;
};


export type QueryGetReviewsArgs = {
  filter?: InputMaybe<ReviewFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetReviewsLengthArgs = {
  filter: ReviewFilter;
};


export type QueryGetSalesArgs = {
  filter?: InputMaybe<SalesFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSelfCheckoutCustomerArgs = {
  input: GetCustomerInput;
};


export type QueryGetSelfCheckoutLinkArgs = {
  shared_product_id: Scalars['ID']['input'];
};


export type QueryGetSharedProductArgs = {
  input: GetSharedProductRequestDto;
};


export type QueryGetSharedProductsArgs = {
  filter?: InputMaybe<SharedProductFilter>;
  pagination?: InputMaybe<Pagination>;
  productFilter?: InputMaybe<ProductFilter>;
};


export type QueryGetShopArgs = {
  filter: ShopFilter;
};


export type QueryGetShopCollectionArgs = {
  filter: ShopCollectionFilter;
};


export type QueryGetShopCollectionProductsArgs = {
  filter: ShopCollectionProductsFilter;
};


export type QueryGetShopCollectionsArgs = {
  filter?: InputMaybe<ShopCollectionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetShopCollectionsLengthArgs = {
  filter?: InputMaybe<ShopCollectionFilter>;
};


export type QueryGetShopifyShopArgs = {
  input?: InputMaybe<FetchShopifyShopInput>;
};


export type QueryGetShopifyShopsArgs = {
  input?: InputMaybe<FetchShopifyShopsInput>;
};


export type QueryGetShopsArgs = {
  filter?: InputMaybe<ShopFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetShopsLengthArgs = {
  filter?: InputMaybe<ShopFilter>;
};


export type QueryGetSubCategoriesArgs = {
  filter?: InputMaybe<ProductCategoryFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSubscriptionPackageArgs = {
  filter?: InputMaybe<SubscriptionFilter>;
};


export type QueryGetSubscriptionPackagesArgs = {
  filter?: InputMaybe<SubscriptionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSubscriptionPaymentArgs = {
  filter?: InputMaybe<SubscriptionPaymentFilter>;
};


export type QueryGetSubscriptionPaymentsArgs = {
  filter?: InputMaybe<SubscriptionPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSupplierArgs = {
  filter?: InputMaybe<SupplierFilter>;
};


export type QueryGetSupplierBusinessPickupLocationsArgs = {
  filter?: InputMaybe<SupplierLocationFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSupplierDailyOrdersSummaryArgs = {
  from: Scalars['Date']['input'];
  id: Scalars['ID']['input'];
  to: Scalars['Date']['input'];
};


export type QueryGetSupplierOrdersByStatusSummaryArgs = {
  from: Scalars['Date']['input'];
  suuplier_id: Scalars['ID']['input'];
  to: Scalars['Date']['input'];
};


export type QueryGetSupplierPickupLocationArgs = {
  input?: InputMaybe<GetSupplierPickupLocationInput>;
};


export type QueryGetSupplierStatsArgs = {
  supplier_id: Scalars['ID']['input'];
};


export type QueryGetSupplierWalletSummaryArgs = {
  supplier_id: Scalars['ID']['input'];
};


export type QueryGetSuppliersArgs = {
  filter?: InputMaybe<SupplierFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetSuppliersLengthArgs = {
  filter?: InputMaybe<SupplierFilter>;
};


export type QueryGetTermArgs = {
  filter?: InputMaybe<TermsFilter>;
};


export type QueryGetTermsArgs = {
  filter?: InputMaybe<TermsFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetTermsLengthArgs = {
  filter?: InputMaybe<TermsFilter>;
};


export type QueryGetTinggPaymentMethodsArgs = {
  country: Scalars['String']['input'];
  currency: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};


export type QueryGetTopProductsArgs = {
  input: TopProductsRequestDto;
};


export type QueryGetTopResellersForTheWeekArgs = {
  country: Scalars['String']['input'];
};


export type QueryGetUnverifiedProductsArgs = {
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetUserArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<UserFilter>;
};


export type QueryGetUserCouponsArgs = {
  filter?: InputMaybe<CouponRedemptionFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetUserCouponsLengthArgs = {
  filter?: InputMaybe<CouponRedemptionFilter>;
};


export type QueryGetUserDelayedOrdersArgs = {
  user_id?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryGetUserPaymentDetailsArgs = {
  filter?: InputMaybe<UserPaymentFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetUserPluginsArgs = {
  filter?: InputMaybe<UserPluginFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetUserReferralsMetricsArgs = {
  username: Scalars['String']['input'];
};


export type QueryGetUsersArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<UserFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetUsersLengthArgs = {
  condition?: InputMaybe<Condition>;
  filter?: InputMaybe<UserFilter>;
};


export type QueryGetVariationArgs = {
  filter?: InputMaybe<VariationFilter>;
};


export type QueryGetVariationsArgs = {
  filter?: InputMaybe<VariationFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetVariationsLengthArgs = {
  filter?: InputMaybe<VariationFilter>;
};


export type QueryGetWalletCashRewardsHistoryArgs = {
  filter?: InputMaybe<CashRewardsFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryGetWalletHistoryArgs = {
  filter?: InputMaybe<WalletHistoryFilter>;
};


export type QueryGetWalletTopupPaymentsArgs = {
  filter?: InputMaybe<WalletTopupFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryIsProductInShopArgs = {
  product_id: Scalars['ID']['input'];
  shop_id: Scalars['ID']['input'];
};


export type QueryIsProductLikedByUserArgs = {
  input: IsProductLikedByUserInput;
};


export type QueryIsProductSavedByUserArgs = {
  input: IsProductSavedByUserInput;
};


export type QueryIsProductSharedByUserArgs = {
  input: IsProductSharedByUserInput;
};


export type QueryIsSkuAvailableArgs = {
  sku: Scalars['String']['input'];
};


export type QueryLoadShopifyProductsArgs = {
  integrationId: Scalars['ID']['input'];
};


export type QueryOrderStatsArgs = {
  country: Scalars['String']['input'];
};


export type QueryPaystackChargeArgs = {
  data: PaystackMobileMoneyInitialiseChargeRequestDto;
};


export type QueryPaystackFetchTransferArgs = {
  data: PaystackFetchTransferRequestDto;
};


export type QueryPaystackFetchTransferRecipientArgs = {
  data: PaystackFetchTransferRecipientRequestDto;
};


export type QueryPaystackListBanksArgs = {
  data: PaystackListBanksRequestDto;
};


export type QueryPaystackListTransferRecipientsArgs = {
  data: PaystackListTransferRecipientsRequestDto;
};


export type QueryPaystackListTransfersArgs = {
  data: PaystackListTransfersRequestDto;
};


export type QueryPaystackResolveAccountNumberArgs = {
  data: PaystackResolveAccountNumberRequestDto;
};


export type QueryPaystackResolveCardBinArgs = {
  data: PaystackResolveCardBinRequestDto;
};


export type QueryPaystackValidateAccountArgs = {
  data: PaystackValidateAccountRequestDto;
};


export type QueryPaystackVerifyTransactionArgs = {
  data: Scalars['String']['input'];
};


export type QueryPaystackVerifyTransferArgs = {
  data: PaystackVerifyTransferRequestDto;
};


export type QueryTopDealsArgs = {
  filter?: InputMaybe<ProductFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryTopDealsBannersArgs = {
  filter?: InputMaybe<FeaturedCategoriesFilter>;
};


export type QueryTopDealsLengthArgs = {
  filter?: InputMaybe<ProductFilter>;
};


export type QueryTrendingProductsArgs = {
  filter?: InputMaybe<TrendingProductsFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUserStatsArgs = {
  country: Scalars['String']['input'];
};


export type QueryUsersArgs = {
  input?: InputMaybe<FetchUserInput>;
};


export type QueryVerifyAuthArgs = {
  input?: InputMaybe<VerifyEmailInput>;
};


export type QueryWalletArgs = {
  filter?: InputMaybe<WalletFilter>;
};


export type QueryWalletHistoryArgs = {
  filter?: InputMaybe<WalletHistoryFilter>;
  pagination?: InputMaybe<Pagination>;
};


export type QueryWalletHistoryLengthArgs = {
  filter?: InputMaybe<WalletHistoryFilter>;
};

export enum ReasonForPayment {
  /** payment record created when a customer makes payment for an order on either the storefront or the self-checkout(future) */
  OrderPurchase = 'order_purchase',
  /** payment record created when a reseller or supplier withdraws money into their physical wallet */
  PayoutWithdrawal = 'payout_withdrawal',
  /** payment record created when supplier makes payment for a plugin to be added to their account */
  PluginPurchase = 'plugin_purchase',
  /** payment record created when reseller makes payment to be credited to their wallet */
  WalletTopup = 'wallet_topup'
}

export enum ReductionType {
  Amount = 'amount',
  Percentage = 'percentage'
}

export enum RefundType {
  FullRefund = 'full_refund',
  PartRefund = 'part_refund'
}

export type RehookLeaderboard = {
  __typename?: 'RehookLeaderboard';
  leaderboard?: Maybe<Array<Maybe<Leaderboard>>>;
  leaderboard_reward_given?: Maybe<Scalars['Boolean']['output']>;
  my_rank?: Maybe<Leaderboard>;
  number_of_participants?: Maybe<Scalars['Int']['output']>;
  page?: Maybe<Scalars['Int']['output']>;
  past_leaderboard_intervals?: Maybe<Array<Maybe<PastLeaderboardIntervals>>>;
  reward_brackets?: Maybe<Array<Maybe<RewardBrackets>>>;
};

export type RequestOtpResponse = {
  __typename?: 'RequestOTPResponse';
  token?: Maybe<Scalars['String']['output']>;
};

export type RequestSupplierOtpResponse = {
  __typename?: 'RequestSupplierOTPResponse';
  token?: Maybe<Scalars['String']['output']>;
};

export type RequestSupplierPhoneVerificationResponse = {
  __typename?: 'RequestSupplierPhoneVerificationResponse';
  code: Scalars['String']['output'];
  token: Scalars['String']['output'];
};

export type Results = {
  __typename?: 'Results';
  account_number?: Maybe<Scalars['String']['output']>;
  amount_paid?: Maybe<Scalars['Int']['output']>;
  conversion_rate?: Maybe<Scalars['Int']['output']>;
  converted_amount?: Maybe<Scalars['Int']['output']>;
  converted_currency_code?: Maybe<Scalars['String']['output']>;
  currency_code?: Maybe<Scalars['String']['output']>;
  current_country_code?: Maybe<Scalars['String']['output']>;
  failed_payments?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  gateway_reference_id?: Maybe<Scalars['String']['output']>;
  merchant_transaction_id?: Maybe<Scalars['String']['output']>;
  msisdn?: Maybe<Scalars['Int']['output']>;
  original_country_code?: Maybe<Scalars['String']['output']>;
  original_currency_code?: Maybe<Scalars['String']['output']>;
  overall_status?: Maybe<Scalars['Int']['output']>;
  payment_currency_details?: Maybe<Array<Maybe<PaymentCurrencyDetails>>>;
  payment_options?: Maybe<Array<Maybe<PaymentOptions>>>;
  payments?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  request_amount?: Maybe<Scalars['Int']['output']>;
  short_url?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
};

export type Review = {
  __typename?: 'Review';
  comment?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  rating: Scalars['Float']['output'];
  reseller: User;
  user_id: Scalars['ID']['output'];
};

export type ReviewBreakDown = {
  __typename?: 'ReviewBreakDown';
  breakDown: BreakDownItems;
  totalReviews: Scalars['Int']['output'];
};

export type ReviewFilter = {
  id?: InputMaybe<IdOperator>;
  product_id?: InputMaybe<IdOperator>;
};

export type ReviewInput = {
  comment?: InputMaybe<Scalars['String']['input']>;
  product_id: Scalars['ID']['input'];
  rating: Scalars['Int']['input'];
  user_id: Scalars['ID']['input'];
};

export type RewardBrackets = {
  __typename?: 'RewardBrackets';
  is_minimum_value?: Maybe<Scalars['Boolean']['output']>;
  position?: Maybe<Scalars['String']['output']>;
  range?: Maybe<Array<Maybe<Scalars['Int']['output']>>>;
  reward_value?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['Int']['output']>;
};

export type Root = {
  __typename?: 'Root';
  name: Scalars['String']['output'];
};

export enum Sort {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type Sales = {
  __typename?: 'Sales';
  country?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['String']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  order_date?: Maybe<Scalars['String']['output']>;
  order_id?: Maybe<Scalars['ID']['output']>;
  order_value: Scalars['Int']['output'];
  payment_reference?: Maybe<Scalars['ID']['output']>;
  product_cost: Scalars['Int']['output'];
  product_price?: Maybe<Scalars['Float']['output']>;
  profit_added: Scalars['Int']['output'];
  reseller_id?: Maybe<Scalars['ID']['output']>;
  sku?: Maybe<Scalars['String']['output']>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['String']['output']>;
};

export type SalesFilter = {
  country?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<StringOperator>;
  currency?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  order_date?: InputMaybe<StringOperator>;
  order_id?: InputMaybe<IdOperator>;
  order_value?: InputMaybe<NumberOperator>;
  payment_reference?: InputMaybe<IdOperator>;
  product_cost?: InputMaybe<NumberOperator>;
  product_price?: InputMaybe<NumberOperator>;
  profit_added?: InputMaybe<NumberOperator>;
  reseller_id?: InputMaybe<IdOperator>;
  sku?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  updated_at?: InputMaybe<StringOperator>;
};

export type SetSupplierPickupLocationInput = {
  location_id: Scalars['String']['input'];
  supplier_id: Scalars['String']['input'];
};

export type SetSupplierProductMarkupInput = {
  markup_amount: Scalars['Float']['input'];
  markup_value: Scalars['Float']['input'];
  product_id: Scalars['ID']['input'];
  supplier_agreement: SupplierAgreement;
  supplier_id: Scalars['ID']['input'];
};

export enum Settlement {
  Commission = 'Commission',
  Markup = 'Markup'
}

export type SharedProduct = {
  __typename?: 'SharedProduct';
  created_at?: Maybe<Scalars['Date']['output']>;
  id: Scalars['ID']['output'];
  long_url: Scalars['String']['output'];
  number_of_times_sold: Scalars['Int']['output'];
  product?: Maybe<Product>;
  product_cost_price: Scalars['Float']['output'];
  product_id: Scalars['ID']['output'];
  profit_added_by_reseller: Scalars['Float']['output'];
  reseller?: Maybe<User>;
  self_checkout_link?: Maybe<Scalars['String']['output']>;
  shared_by: Scalars['ID']['output'];
  short_url: Scalars['String']['output'];
  total_accumulated_profit: Scalars['Float']['output'];
  total_accumulated_sales: Scalars['Float']['output'];
  total_selling_price: Scalars['Float']['output'];
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type SharedProductFilter = {
  id?: InputMaybe<IdOperator>;
  long_url?: InputMaybe<StringOperator>;
  number_of_times_sold?: InputMaybe<NumberOperator>;
  product_cost_price?: InputMaybe<NumberOperator>;
  product_id?: InputMaybe<IdOperator>;
  profit_added_by_reseller?: InputMaybe<NumberOperator>;
  shared_by?: InputMaybe<IdOperator>;
  short_url?: InputMaybe<StringOperator>;
  total_accumulated_profit?: InputMaybe<NumberOperator>;
  total_accumulated_sales?: InputMaybe<NumberOperator>;
  total_selling_price?: InputMaybe<NumberOperator>;
};

export type ShipmentItem = {
  __typename?: 'ShipmentItem';
  id: Scalars['ID']['output'];
  price: Scalars['Float']['output'];
  quantity: Scalars['Int']['output'];
  sku: Scalars['String']['output'];
};

export type ShipmentItemItem = {
  price: Scalars['Float']['input'];
  quantity: Scalars['Int']['input'];
  sku: Scalars['String']['input'];
};

export type Shop = {
  __typename?: 'Shop';
  avatar?: Maybe<Scalars['String']['output']>;
  /** The public-facing contact email address for the shop. Customers will use this email to communicate with the shop owner. */
  contactEmail?: Maybe<Scalars['String']['output']>;
  country?: Maybe<CountryCode>;
  coverImage?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['String']['output']>;
  /** The three letter code for the shop's currency. */
  currency?: Maybe<CurrencyCode>;
  /** Domain(s) the user has linked to their soko.world domain */
  customDomains?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  deliveryAgent?: Maybe<DeliveryAgent>;
  deliveryOption?: Maybe<DeliveryOption>;
  /** The shop's meta description used in search engine results. */
  description?: Maybe<Scalars['String']['output']>;
  /** The shop owner's email address. Tendo will use this email address to communicate with the shop owner. */
  email?: Maybe<Scalars['String']['output']>;
  /** Indicates whether shop has undergone onboarding and setup */
  hasBeenSetup?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  /** Indicates whether shop is still receiving traffic. Use case: freeing up .tendo.com domain for other users. */
  isActive?: Maybe<Scalars['Boolean']['output']>;
  locations?: Maybe<Array<Maybe<ShopLocationModel>>>;
  /** Full name of the shop */
  name?: Maybe<Scalars['String']['output']>;
  ownerId: Scalars['ID']['output'];
  paymentOptions?: Maybe<Array<PaymentOption>>;
  phone?: Maybe<Scalars['String']['output']>;
  /** The primary domain of the shop's online store. */
  primaryDomain?: Maybe<Scalars['String']['output']>;
  shopId?: Maybe<Scalars['ID']['output']>;
  /** Tags associated with shop to aid shop SEO */
  shopTags?: Maybe<Array<Scalars['String']['output']>>;
  shortUrl?: Maybe<Scalars['String']['output']>;
  /** auto-generated slug. Not to be sent as input payload */
  slug?: Maybe<Scalars['String']['output']>;
  /** The shop's .tendo.com domain name */
  sokoWorldDomain?: Maybe<Scalars['String']['output']>;
  supplierId?: Maybe<Scalars['ID']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  /** Alias for primary domain */
  url?: Maybe<Scalars['String']['output']>;
};

export type ShopCollection = {
  __typename?: 'ShopCollection';
  banner: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  is_active?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
};

export type ShopCollectionFilter = {
  id?: InputMaybe<IdOperator>;
  shop_id?: InputMaybe<IdOperator>;
};

export type ShopCollectionInput = {
  banner: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  is_active?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  shop_id: Scalars['ID']['input'];
};

export type ShopCollectionProductFilter = {
  collection_id?: InputMaybe<IdOperator>;
};

export type ShopCollectionProductsFilter = {
  collection_id?: InputMaybe<IdOperator>;
};

export type ShopFilter = {
  avatar?: InputMaybe<StringOperator>;
  contactEmail?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  coverImage?: InputMaybe<StringOperator>;
  createdAt?: InputMaybe<DateOperator>;
  currency?: InputMaybe<StringOperator>;
  deliveryAgent?: InputMaybe<StringOperator>;
  deliveryOption?: InputMaybe<StringOperator>;
  description?: InputMaybe<StringOperator>;
  email?: InputMaybe<StringOperator>;
  hasBeenSetup?: InputMaybe<BooleanOperator>;
  id?: InputMaybe<IdOperator>;
  isActive?: InputMaybe<BooleanOperator>;
  name?: InputMaybe<StringOperator>;
  ownerId?: InputMaybe<StringOperator>;
  phone?: InputMaybe<StringOperator>;
  primaryDomain?: InputMaybe<StringOperator>;
  shortUrl?: InputMaybe<StringOperator>;
  slug?: InputMaybe<StringOperator>;
  sokoWorldDomain?: InputMaybe<StringOperator>;
  supplierId?: InputMaybe<IdOperator>;
  updatedAt?: InputMaybe<DateOperator>;
  url?: InputMaybe<StringOperator>;
};

export type ShopLocationModel = {
  __typename?: 'ShopLocationModel';
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lat: Scalars['Float']['output'];
  long: Scalars['Float']['output'];
  shop: Shop;
  updatedAt?: Maybe<Scalars['String']['output']>;
};

export type ShopLocationRequestDto = {
  lat: Scalars['Float']['input'];
  long: Scalars['Float']['input'];
};

export type ShopProductFilter = {
  shop_id?: InputMaybe<IdOperator>;
};

export type ShopifyImage = {
  __typename?: 'ShopifyImage';
  created_at?: Maybe<Scalars['String']['output']>;
  height?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  position?: Maybe<Scalars['Int']['output']>;
  product_id?: Maybe<Scalars['ID']['output']>;
  src?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['String']['output']>;
  variant_ids?: Maybe<Array<Maybe<Scalars['ID']['output']>>>;
  width?: Maybe<Scalars['Int']['output']>;
};

export type ShopifyLoadedProduct = {
  __typename?: 'ShopifyLoadedProduct';
  body_html?: Maybe<Scalars['String']['output']>;
  handle?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  images?: Maybe<Array<Maybe<ShopifyImage>>>;
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type ShopifyShop = {
  __typename?: 'ShopifyShop';
  access_token?: Maybe<Scalars['String']['output']>;
  country_code?: Maybe<Scalars['String']['output']>;
  country_name?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  products?: Maybe<Array<Maybe<SyncShopifyProduct>>>;
  redirect_url?: Maybe<Scalars['String']['output']>;
  scope?: Maybe<Scalars['String']['output']>;
  shop: Scalars['String']['output'];
  shop_currency?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type ShopifyShopFilter = {
  id?: InputMaybe<IdOperator>;
  shop?: InputMaybe<StringOperator>;
};

export type SokoWorldDomainExistsRequestDto = {
  /** format should be [domain].com, eg.www.mysoko.shop. Omit http:// or https:// */
  sokoWorldDomain?: InputMaybe<Scalars['String']['input']>;
};

export type SokoWorldDomainExistsResponseDto = {
  __typename?: 'SokoWorldDomainExistsResponseDto';
  domainExists?: Maybe<Scalars['Boolean']['output']>;
};

export enum SortOrder {
  Ascending = 'ascending',
  Descending = 'descending'
}

export type Status = {
  __typename?: 'Status';
  status_code?: Maybe<Scalars['Int']['output']>;
  status_description?: Maybe<Scalars['String']['output']>;
};

export type StringOperator = {
  eq?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  like?: InputMaybe<Scalars['String']['input']>;
  notContains?: InputMaybe<Scalars['String']['input']>;
  notEq?: InputMaybe<Scalars['String']['input']>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  regex?: InputMaybe<Scalars['String']['input']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  annual_plan_cost: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  id: Scalars['ID']['output'];
  monthly_plan_cost: Scalars['Float']['output'];
  name: SubscriptionType;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type SubscriptionFilter = {
  annual_plan_cost?: InputMaybe<NumberOperator>;
  created_at?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
  monthly_plan_cost?: InputMaybe<NumberOperator>;
  name?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
};

export type SubscriptionInput = {
  annual_plan_cost: Scalars['Float']['input'];
  created_at?: InputMaybe<Scalars['Date']['input']>;
  id: Scalars['ID']['input'];
  monthly_plan_cost: Scalars['Float']['input'];
  name: SubscriptionType;
  updated_at?: InputMaybe<Scalars['Date']['input']>;
};

export type SubscriptionPackage = {
  __typename?: 'SubscriptionPackage';
  annual_plan_cost: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  id: Scalars['ID']['output'];
  monthly_plan_cost: Scalars['Float']['output'];
  name: SubscriptionType;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type SubscriptionPaymentFilter = {
  amount_paid?: InputMaybe<NumberOperator>;
  created_at?: InputMaybe<DateOperator>;
  customer_subscription_id?: InputMaybe<IdOperator>;
  id?: InputMaybe<IdOperator>;
  payment_reference?: InputMaybe<StringOperator>;
  payment_status?: InputMaybe<StringOperator>;
  refund_deadline?: InputMaybe<DateOperator>;
  refund_request_reason?: InputMaybe<StringOperator>;
  refund_requested?: InputMaybe<BooleanOperator>;
  refunded?: InputMaybe<BooleanOperator>;
  updated_at?: InputMaybe<DateOperator>;
  user_email?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type SubscriptionPaymentHistory = {
  __typename?: 'SubscriptionPaymentHistory';
  amount_paid: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  customer_subscription_id: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  payment_reference: Scalars['String']['output'];
  payment_status: SubscriptionPaymentStatus;
  refund_deadline: Scalars['Date']['output'];
  refund_request_reason?: Maybe<Scalars['String']['output']>;
  refund_requested?: Maybe<Scalars['Boolean']['output']>;
  refunded?: Maybe<Scalars['Boolean']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_email: Scalars['String']['output'];
  user_id: Scalars['ID']['output'];
};

export type SubscriptionPaymentRefund = {
  __typename?: 'SubscriptionPaymentRefund';
  amount_refunded: Scalars['Float']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  customer_subscription_payment_id: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  refund_type: RefundType;
  refunded_by_user_id: Scalars['ID']['output'];
  updated_at?: Maybe<Scalars['Date']['output']>;
  user_id: Scalars['ID']['output'];
};

export enum SubscriptionPaymentStatus {
  Failed = 'failed',
  Paid = 'paid',
  Pending = 'pending'
}

export enum SubscriptionStatus {
  Active = 'active',
  Cancelled = 'cancelled',
  Expired = 'expired',
  Initialised = 'initialised'
}

export enum SubscriptionType {
  Basic = 'basic',
  Enterprise = 'enterprise',
  Pro = 'pro'
}

export type Supplier = {
  __typename?: 'Supplier';
  agreement_terms?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  business_details?: Maybe<SupplierBusiness>;
  country?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['Date']['output']>;
  deletedAt?: Maybe<Scalars['Date']['output']>;
  device_token?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  generic_name?: Maybe<Scalars['String']['output']>;
  has_verified_email: Scalars['Boolean']['output'];
  has_verified_phonenumber: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  payment_details?: Maybe<SupplierPaymentDetails>;
  permissions: Array<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  setup_complete: Scalars['Boolean']['output'];
  shop?: Maybe<Shop>;
  social_platform?: Maybe<Scalars['String']['output']>;
  social_platform_token?: Maybe<Scalars['String']['output']>;
};

export type SupplierAddDeviceTokenInput = {
  deviceToken: Scalars['String']['input'];
  id: Scalars['ID']['input'];
};

export enum SupplierAgreement {
  Commission = 'COMMISSION',
  Markup = 'MARKUP'
}

export enum SupplierAgreementTerms {
  Commission = 'COMMISSION',
  Markup = 'MARKUP'
}

export type SupplierAuthPayload = {
  __typename?: 'SupplierAuthPayload';
  supplier?: Maybe<Supplier>;
  token?: Maybe<Scalars['String']['output']>;
};

export type SupplierBusiness = {
  __typename?: 'SupplierBusiness';
  business_address?: Maybe<Scalars['String']['output']>;
  business_name?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  delivery_option?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documents?: Maybe<Array<Maybe<SupplierBusinessDocument>>>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  industry?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  postal_code?: Maybe<Scalars['String']['output']>;
  registered?: Maybe<Scalars['Boolean']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  supplier_business_verified?: Maybe<Scalars['Boolean']['output']>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
};

export type SupplierBusinessDocument = {
  __typename?: 'SupplierBusinessDocument';
  business_id?: Maybe<Scalars['ID']['output']>;
  document?: Maybe<Scalars['String']['output']>;
  document_name?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
};

export type SupplierBusinessInput = {
  business_address?: InputMaybe<Scalars['String']['input']>;
  business_name: Scalars['String']['input'];
  city: Scalars['String']['input'];
  country?: InputMaybe<Scalars['String']['input']>;
  delivery_option?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  industry: Scalars['String']['input'];
  logo?: InputMaybe<Scalars['String']['input']>;
  phone: Scalars['String']['input'];
  postal_code?: InputMaybe<Scalars['String']['input']>;
  referred_by?: InputMaybe<Scalars['String']['input']>;
  registered: Scalars['Boolean']['input'];
  state?: InputMaybe<Scalars['String']['input']>;
  supplier_id: Scalars['ID']['input'];
};

export type SupplierCheckList = {
  __typename?: 'SupplierCheckList';
  supplier_id: Scalars['ID']['output'];
};

export type SupplierCreationResponse = {
  __typename?: 'SupplierCreationResponse';
  created: Scalars['Boolean']['output'];
  verification_token?: Maybe<Scalars['String']['output']>;
};

export type SupplierEmailChangeInput = {
  id: Scalars['ID']['input'];
  newEmail: Scalars['String']['input'];
};

export type SupplierFilter = {
  country?: InputMaybe<StringOperator>;
  email?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  phone?: InputMaybe<StringOperator>;
};

export type SupplierInput = {
  country: Scalars['String']['input'];
  email: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  onboardingType?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  phone: Scalars['String']['input'];
};

export type SupplierLocation = {
  __typename?: 'SupplierLocation';
  address: Scalars['String']['output'];
  address_ext?: Maybe<Scalars['String']['output']>;
  business_id: Scalars['ID']['output'];
  city: Scalars['String']['output'];
  created_at?: Maybe<Scalars['Date']['output']>;
  deleted_at?: Maybe<Scalars['Date']['output']>;
  gmap_data: Scalars['String']['output'];
  id?: Maybe<Scalars['Int']['output']>;
  lat: Scalars['String']['output'];
  lng: Scalars['String']['output'];
  name: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  postal_code: Scalars['String']['output'];
  state: Scalars['String']['output'];
  state_code: Scalars['String']['output'];
  supplier_id?: Maybe<Scalars['ID']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type SupplierLocationFilter = {
  business_id?: InputMaybe<IdOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
};

export type SupplierPasswordChangeInput = {
  id: Scalars['ID']['input'];
  newPassword: Scalars['String']['input'];
  oldPassword: Scalars['String']['input'];
};

export type SupplierPasswordResetInput = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type SupplierPasswordResetMailInput = {
  email: Scalars['String']['input'];
};

export type SupplierPaymentDetails = {
  __typename?: 'SupplierPaymentDetails';
  account_name?: Maybe<Scalars['String']['output']>;
  account_number?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  method?: Maybe<Scalars['String']['output']>;
  provider?: Maybe<Scalars['String']['output']>;
  supplier_id?: Maybe<Scalars['ID']['output']>;
};

export type SupplierProfileUpdateInput = {
  id: Scalars['ID']['input'];
  key: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type SupplierStats = {
  __typename?: 'SupplierStats';
  supplier_id: Scalars['ID']['output'];
  total_active_orders: Scalars['Int']['output'];
  total_customers: Scalars['Int']['output'];
  total_finished_orders: Scalars['Int']['output'];
  total_orders: Scalars['Int']['output'];
  total_products: Scalars['Int']['output'];
  total_products_in_stock: Scalars['Int']['output'];
  total_products_in_transit: Scalars['Int']['output'];
  total_products_out_of_stock: Scalars['Int']['output'];
  total_resellers: Scalars['Int']['output'];
  total_unverified_products: Scalars['Int']['output'];
  total_verified_products: Scalars['Int']['output'];
};

export type SupplierWalletSumary = {
  __typename?: 'SupplierWalletSumary';
  balance: Scalars['Float']['output'];
  pendingPayoutRequests: Scalars['Int']['output'];
  totalRevenueGenerated: Scalars['Float']['output'];
  totalWithdrawals: Scalars['Float']['output'];
};

export type SyncShopifyProduct = {
  __typename?: 'SyncShopifyProduct';
  body_html?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['Date']['output']>;
  handle?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  product_id?: Maybe<Scalars['ID']['output']>;
  shop?: Maybe<Scalars['String']['output']>;
  shopify_id?: Maybe<Scalars['ID']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updated_at?: Maybe<Scalars['Date']['output']>;
};

export type SyncShopifyProductInput = {
  distributionChannel?: InputMaybe<Array<InputMaybe<DistributionChannel>>>;
  integration_id: Scalars['ID']['input'];
  product_ids?: InputMaybe<Array<Scalars['ID']['input']>>;
  supplier_country: Scalars['String']['input'];
};

export type TempCategoryInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  shop_id: Scalars['ID']['input'];
};

export type TermInput = {
  ShippingLocations?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  cancellationPolicy?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  estimatedDeliveryTime?: InputMaybe<Scalars['Int']['input']>;
  estimatedDeliveryTimeUnit?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  returnPeriod?: InputMaybe<Scalars['Int']['input']>;
  returnPolicy?: InputMaybe<Scalars['String']['input']>;
  settlementCurrency?: InputMaybe<Scalars['String']['input']>;
  settlementPeriod?: InputMaybe<Scalars['Int']['input']>;
  settlementType: Settlement;
  settlementValue: Scalars['Float']['input'];
  shipTo?: InputMaybe<Scalars['String']['input']>;
  shippingPolicy?: InputMaybe<Scalars['String']['input']>;
  supplier_id: Scalars['ID']['input'];
};

export type Terms = {
  __typename?: 'Terms';
  cancellationPolicy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  estimatedDeliveryTime?: Maybe<Scalars['Int']['output']>;
  estimatedDeliveryTimeUnit?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  returnPeriod?: Maybe<Scalars['Int']['output']>;
  returnPolicy?: Maybe<Scalars['String']['output']>;
  settlementCurrency?: Maybe<Scalars['String']['output']>;
  settlementPeriod?: Maybe<Scalars['Int']['output']>;
  settlementType: Settlement;
  settlementValue: Scalars['Float']['output'];
  shipTo?: Maybe<Scalars['String']['output']>;
  shippingLocations?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  shippingPolicy?: Maybe<Scalars['String']['output']>;
};

export type TermsFilter = {
  description?: InputMaybe<StringOperator>;
  estimatedDeliveryTime?: InputMaybe<NumberOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  returnPeriod?: InputMaybe<NumberOperator>;
  settlementCurrency?: InputMaybe<StringOperator>;
  settlementPeriod?: InputMaybe<NumberOperator>;
  settlementType?: InputMaybe<Settlement>;
  shipTo?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
};

export type TinggAcknowledgementRequestDto = {
  /** Amount to be acknowledged.Compulsory if type is PARTIAL */
  acknowledgement_amount: Scalars['Float']['input'];
  /** Narration of acknowledgement initiated by a merchant. */
  acknowledgement_narration: Scalars['String']['input'];
  /** Full or Partial */
  acknowledgement_type?: InputMaybe<Scalars['String']['input']>;
  /** Unique identifier for acknowledgement initiated by customer. */
  acknowledgment_reference?: InputMaybe<Scalars['String']['input']>;
  /** 3 letter ISO currency code. */
  currency_code: Scalars['String']['input'];
  /** Unique identifier from the merchant. */
  merchant_transaction_id: Scalars['String']['input'];
  /** The service code assigned to the merchant on the tingg portal */
  service_code?: InputMaybe<Scalars['String']['input']>;
  /**
   * The status code indicating status of the transaction on the merchant’s end
   *  * 180 - Payment rejected by merchant system
   *  * 183 - Payment accepted by the merchant system.
   *  * 188 - Payment delivered by the merchant system
   */
  status_code: TinggAcknowledgementStatusCode;
};

export type TinggAcknowledgementResponseDto = {
  __typename?: 'TinggAcknowledgementResponseDto';
  results: TinggAcknowledgementResponseResults;
  status: TinggResponseStatus;
};

export type TinggAcknowledgementResponsePayment = {
  __typename?: 'TinggAcknowledgementResponsePayment';
  /** Amount customer paid for */
  amount_paid: Scalars['Any']['output'];
  /** ISO Currency code of the payment made */
  currency_code: Scalars['String']['output'];
  /** Unique transaction id on the Cellulant Payment Gateway */
  gateway_transaction_id: Scalars['String']['output'];
  gateway_transaction_status: Scalars['String']['output'];
  /** Unique id the MNO or bank generated for the transaction */
  payer_transaction_id: Scalars['String']['output'];
};

export type TinggAcknowledgementResponseResults = {
  __typename?: 'TinggAcknowledgementResponseResults';
  /** ID of the transaction to be acknowledged */
  checkout_request_id: Scalars['String']['output'];
  /** Unique transaction ID identifying the transaction as given by the merchant. */
  merchant_transaction_id: Scalars['String']['output'];
  payments: Array<Maybe<TinggAcknowledgementResponsePayment>>;
  /** A status indicating the result of payment processing. */
  request_status_code: Scalars['Any']['output'];
};

export enum TinggAcknowledgementStatusCode {
  Accepted = 'ACCEPTED',
  Delivered = 'DELIVERED',
  Rejected = 'REJECTED'
}

export enum TinggAcknowledgementType {
  Full = 'Full',
  Partial = 'Partial'
}

export type TinggAddress = {
  /** Billing address, City. */
  city: Scalars['String']['input'];
  /** Billing address, Country. */
  country_code: Scalars['String']['input'];
};

export type TinggBillingDetails = {
  /** Billing Customer Details. */
  address: TinggAddress;
  /** Billing Address Details. */
  customer: TinggCustomer;
};

export type TinggBrowserDetails = {
  /** This represents the http data format. */
  accept_header?: InputMaybe<Scalars['String']['input']>;
  /** This uniquely identifies the device on the internet. */
  ip_address: Scalars['String']['input'];
  /** This specifies if browser supports java or not. */
  java_enabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** This specifies if browser supports javascript or not. */
  javascript_enabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** This indicates browser language. */
  language?: InputMaybe<Scalars['String']['input']>;
  /** This is the maximum number of colors that can be displayed. */
  screen_color_depth?: InputMaybe<Scalars['String']['input']>;
  /** This is the height value of the browser window layout viewport */
  screen_height?: InputMaybe<Scalars['String']['input']>;
  /** This is the width value of browser window layout viewport. */
  screen_width?: InputMaybe<Scalars['String']['input']>;
  /** This is the browser region where the same standard time is used. */
  timezone: Scalars['String']['input'];
  /** This field contains the exact content of the HTTP User-Agent header. */
  user_agent: Scalars['String']['input'];
};

export type TinggChargeBeneficiary = {
  /** Amount we should settle the service provider above */
  amount: Scalars['Float']['input'];
  /** This is the client who we are to settle to on behalf of the customer. */
  charge_beneficiary_code: Scalars['String']['input'];
};

export type TinggChargeRequestDto = {
  /** Payment the customer wished to pay. */
  charge_amount: Scalars['Float']['input'];
  /** Mobile number used to raise the request */
  charge_msisdn: Scalars['String']['input'];
  /** ISO country code you wish to charge the request in */
  country_code?: InputMaybe<CountryCode>;
  /** ISO Country code to initiate the payment in */
  currency_code?: InputMaybe<CurrencyCode>;
  /** this is customer email */
  customer_email: Scalars['String']['input'];
  /** Customer first name */
  customer_first_name: Scalars['String']['input'];
  /** Customer last name */
  customer_last_name: Scalars['String']['input'];
  /** Initial checkout request transaction id raised by merchant */
  merchant_transaction_id?: InputMaybe<Scalars['String']['input']>;
  /** Actual mode to initiate the payment for e.g. STK_PUSH, INSTRUCTIONS */
  payment_mode_code: Scalars['String']['input'];
  /** The actual payer client code the merchant initiates the request for. */
  payment_option_code: Scalars['String']['input'];
  /** The reason for making payment */
  reasonForPayment: ReasonForPayment;
};

export type TinggChargeResponseDto = {
  __typename?: 'TinggChargeResponseDto';
  results: TinggChargeResults;
  status: TinggResponseStatus;
};

export type TinggChargeResults = {
  __typename?: 'TinggChargeResults';
  /** Amount initiated for the transaction */
  charge_amount: Scalars['Int']['output'];
  /** Mobile number the customer initiates the request for. */
  charge_msisdn: Scalars['String']['output'];
  /** Date is UTC when the charge was initiated. */
  charge_request_date: Scalars['String']['output'];
  /** Unique id tied to the initial payment request. */
  charge_request_id: Scalars['Int']['output'];
  checkout_request_id: Scalars['String']['output'];
  /** Language code you wish to display instructions for payment for. E.g fr - French, en - English, ar - Arabic, pt - Portuguese */
  language_code: Scalars['String']['output'];
  /** Merchant requestid tied to the transaction */
  merchant_transaction_id: Scalars['String']['output'];
  /** Payment option instructions to provide to the customer. */
  payment_instructions: Scalars['String']['output'];
};

export type TinggCheckoutChargeRequestDto = {
  /** Account number for the customer on the merchant system. This is the reference the customer will pay to. */
  account_number?: InputMaybe<Scalars['String']['input']>;
  /** String of the endpoint we are to send the webhook request to. */
  callback_url: Scalars['String']['input'];
  /** 3 digit ISO code of the country you wish to collect payment for */
  country_code?: InputMaybe<Scalars['String']['input']>;
  /** 3 digit ISO code of the currency the merchant is invoicing for. */
  currency_code?: InputMaybe<Scalars['String']['input']>;
  /** Customer email the customer wished to pay for. */
  customer_email: Scalars['String']['input'];
  /** Customer first name */
  customer_first_name: Scalars['String']['input'];
  /** Customer last name */
  customer_last_name: Scalars['String']['input'];
  /** Date when the request expires in UTC.Date format is YYYY-MM-DD HH:mm:ss */
  due_date?: InputMaybe<Scalars['String']['input']>;
  /** Extra Information */
  extra_data?: InputMaybe<Scalars['String']['input']>;
  /** Where we will redirect the customer to when the payment time passed above expires. */
  fail_redirect_url: Scalars['String']['input'];
  /** Merchant's invoice number. */
  invoice_number: Scalars['String']['input'];
  is_offline: Scalars['Boolean']['input'];
  /** Unique Id the merchant raised for the request */
  merchant_transaction_id: Scalars['String']['input'];
  /** Mobile number for the customer. */
  msisdn: Scalars['String']['input'];
  /** Payment option code of the payment options the merchant wishes to collect for */
  payment_option_code?: InputMaybe<Scalars['String']['input']>;
  /** Amount you wish to start collecting for. */
  request_amount: Scalars['Float']['input'];
  /** Shows the description of the item being purchased. */
  request_description: Scalars['String']['input'];
  /** The service code assigned to the merchant on the tingg portal */
  service_code?: InputMaybe<Scalars['String']['input']>;
  /** Where we will redirect the customer to after a successful payment is made. */
  success_redirect_url: Scalars['String']['input'];
};

export type TinggCheckoutResponseDto = {
  __typename?: 'TinggCheckoutResponseDto';
  results?: Maybe<Results>;
  status?: Maybe<Status>;
};

export type TinggCheckoutResponseLang = {
  __typename?: 'TinggCheckoutResponseLang';
  instructions?: Maybe<Scalars['String']['output']>;
  language_code?: Maybe<Scalars['String']['output']>;
  language_id?: Maybe<Scalars['Int']['output']>;
  language_name?: Maybe<Scalars['String']['output']>;
};

export type TinggCustomer = {
  /** This is the customer’s email address that is tied to the card token generated. */
  email_address: Scalars['String']['input'];
  /** This is the customer’s first name. */
  first_name: Scalars['String']['input'];
  /** This is the customer’s mobile number. */
  mobile_number: Scalars['String']['input'];
  /** This is the customer’s last name. */
  surname: Scalars['String']['input'];
};

export type TinggDirectCardRequestDto = {
  /** Billing details. */
  billing_details: TinggBillingDetails;
  /** Browser details. */
  browser_details: TinggBrowserDetails;
  /** 3 digit ISO code of the country you wish to collect payment for. */
  country_code: Scalars['String']['input'];
  /** Extra data */
  extra_data: TinggExtraData;
  is_cvv_less?: InputMaybe<Scalars['Boolean']['input']>;
  /** This is the language used for the transaction. */
  locale?: InputMaybe<Scalars['String']['input']>;
  /** Unique Id the merchant raised for the request. */
  merchant_transaction_id?: InputMaybe<Scalars['String']['input']>;
  /** Order Details. */
  order: TinggOrder;
  /** Payment option code of the payment options the merchant wishes to collect for. */
  payment_option_code?: InputMaybe<Scalars['String']['input']>;
  /** The service code assigned to the merchant on the tingg portal. */
  service_code?: InputMaybe<Scalars['String']['input']>;
  /** Encrypted card details. */
  source_Of_funds: Scalars['String']['input'];
};

export type TinggDirectCardResponseDto = {
  __typename?: 'TinggDirectCardResponseDto';
  merchant_transaction_id: Scalars['String']['output'];
  /** Null when request fails */
  results?: Maybe<TinggDirectCardResults>;
  /** Status Details */
  status?: Maybe<TinggDirectCardStatus>;
};

export type TinggDirectCardResults = {
  __typename?: 'TinggDirectCardResults';
  /** Redirect URL or page to redirect your client for payment authentication by your issuing bank. */
  redirectUrl?: Maybe<Scalars['String']['output']>;
  /** The type of response */
  type?: Maybe<Scalars['String']['output']>;
};

export type TinggDirectCardStatus = {
  __typename?: 'TinggDirectCardStatus';
  /** The response status code */
  status_code?: Maybe<Scalars['Int']['output']>;
  /** Exact description of the status */
  status_description?: Maybe<Scalars['String']['output']>;
};

export type TinggExtraData = {
  checkout_request_id?: InputMaybe<Scalars['String']['input']>;
};

export type TinggOnPaymentFailedRequestDto = {
  currencyCode: CurrencyCode;
  customerEmail: Scalars['String']['input'];
  merchantTransactionId: Scalars['String']['input'];
};

export type TinggOnPaymentSuccessfulRequestDto = {
  currencyCode: CurrencyCode;
  customerEmail: Scalars['String']['input'];
  merchantTransactionId: Scalars['String']['input'];
  reasonForPayment: ReasonForPayment;
};

export type TinggOrder = {
  /** This is the unique reference of the order. */
  account_number?: InputMaybe<Scalars['String']['input']>;
  /** This is the amount to be charged on the card. */
  amount: Scalars['Float']['input'];
  /** This is the currency of the amount being transacted / charged. */
  currency_code: Scalars['String']['input'];
  /** This contains a description of the transaction. */
  description?: InputMaybe<Scalars['String']['input']>;
};

export type TinggPollPaymentStatusRequestDto = {
  merchant_transaction_id: Scalars['String']['input'];
};

export type TinggPollPaymentStatusResponseDto = {
  __typename?: 'TinggPollPaymentStatusResponseDto';
  /** The reason why the payment failed when it fails */
  reasonIfFailed?: Maybe<Scalars['String']['output']>;
  /** The payment reference or merchant_transaction_id */
  reference: Scalars['String']['output'];
  status: PaymentStatus;
};

export type TinggQueryStatusRequestDto = {
  /** Unique identifier from the merchant concerning the request raised to Cellulant. */
  merchant_transaction_id: Scalars['String']['input'];
};

export type TinggQueryStatusResponseDto = {
  __typename?: 'TinggQueryStatusResponseDto';
  results?: Maybe<TinggQueryStatusResult>;
  status?: Maybe<TinggQueryStatusResponseStatus>;
};

export type TinggQueryStatusResponseInstructions = {
  __typename?: 'TinggQueryStatusResponseInstructions';
  en?: Maybe<TinggQueryStatusResponseLang>;
};

export type TinggQueryStatusResponseLang = {
  __typename?: 'TinggQueryStatusResponseLang';
  instructions?: Maybe<Scalars['String']['output']>;
  language_code?: Maybe<Scalars['String']['output']>;
  language_id?: Maybe<Scalars['Int']['output']>;
  language_name?: Maybe<Scalars['String']['output']>;
};

export type TinggQueryStatusResponsePaymentCurrencyDetails = {
  __typename?: 'TinggQueryStatusResponsePaymentCurrencyDetails';
  conversion_rate?: Maybe<Scalars['Int']['output']>;
  converted_amount?: Maybe<Scalars['Int']['output']>;
  converted_currency?: Maybe<Scalars['String']['output']>;
};

export type TinggQueryStatusResponsePaymentOptions = {
  __typename?: 'TinggQueryStatusResponsePaymentOptions';
  currency_code?: Maybe<Scalars['String']['output']>;
  instructions?: Maybe<TinggQueryStatusResponseInstructions>;
  maximum_charge_amount?: Maybe<Scalars['Int']['output']>;
  minimum_charge_amount?: Maybe<Scalars['Int']['output']>;
  payment_option_code?: Maybe<Scalars['String']['output']>;
  payment_option_logo?: Maybe<Scalars['String']['output']>;
  payment_option_mode?: Maybe<Scalars['String']['output']>;
  payment_option_name?: Maybe<Scalars['String']['output']>;
};

export type TinggQueryStatusResponseStatus = {
  __typename?: 'TinggQueryStatusResponseStatus';
  status_code?: Maybe<Scalars['String']['output']>;
  status_description?: Maybe<Scalars['String']['output']>;
};

export type TinggQueryStatusResult = {
  __typename?: 'TinggQueryStatusResult';
  account_number?: Maybe<Scalars['String']['output']>;
  amount_paid?: Maybe<Scalars['Int']['output']>;
  conversion_rate?: Maybe<Scalars['Int']['output']>;
  converted_amount?: Maybe<Scalars['Int']['output']>;
  converted_currency_code?: Maybe<Scalars['String']['output']>;
  currency_code?: Maybe<Scalars['String']['output']>;
  current_country_code?: Maybe<Scalars['String']['output']>;
  failed_payments?: Maybe<Array<Maybe<Scalars['Any']['output']>>>;
  gateway_reference_id?: Maybe<Scalars['String']['output']>;
  merchant_transaction_id?: Maybe<Scalars['String']['output']>;
  msisdn?: Maybe<Scalars['Any']['output']>;
  original_country_code?: Maybe<Scalars['String']['output']>;
  original_currency_code?: Maybe<Scalars['String']['output']>;
  overall_status?: Maybe<Scalars['Int']['output']>;
  payment_currency_details?: Maybe<Array<Maybe<TinggQueryStatusResponsePaymentCurrencyDetails>>>;
  payment_options?: Maybe<Array<Maybe<TinggQueryStatusResponsePaymentOptions>>>;
  payments?: Maybe<Array<Maybe<Scalars['Any']['output']>>>;
  request_amount?: Maybe<Scalars['Int']['output']>;
  short_url?: Maybe<Scalars['String']['output']>;
  token?: Maybe<Scalars['String']['output']>;
};

export type TinggRefundRequestDto = {
  /** Amount to be refunded. Compulsory for partial */
  amount: Scalars['Float']['input'];
  /** 3 letter currency code for the transaction */
  currency_code?: InputMaybe<Scalars['String']['input']>;
  /** Unique transaction ID identifying the transaction as given by the merchant. */
  merchant_transaction_id: Scalars['String']['input'];
  /** Unique payment reference on the Cellulant Payment Gateway */
  payment_id: Scalars['String']['input'];
  /** A reason for the refund. */
  refund_narration: Scalars['String']['input'];
  /** Reference number for the transaction. */
  refund_reference: Scalars['String']['input'];
  /** A flag indicating the type of refund to be done; can either be Full or Partial. */
  refund_type: Scalars['String']['input'];
  /** The merchant's service code. */
  service_code: Scalars['String']['input'];
};

export type TinggRefundResponseDto = {
  __typename?: 'TinggRefundResponseDto';
  results: TinggRefundResponseResults;
  status: TinggResponseStatus;
};

export type TinggRefundResponseResults = {
  __typename?: 'TinggRefundResponseResults';
  /** ID of the transaction to be acknowledged */
  checkout_request_id: Scalars['String']['output'];
  /** Unique transaction ID identifying the transaction as given by the merchant. */
  merchant_transaction_id: Scalars['String']['output'];
};

export type TinggResponseStatus = {
  __typename?: 'TinggResponseStatus';
  /** Status of the request initiated during. 200 -- status given for successful payment */
  status_code: Scalars['Int']['output'];
  /** Status description */
  status_description: Scalars['String']['output'];
};

export type TinggWebhookPayment = {
  /** Merchant reference the customer was paying for. */
  account_number: Scalars['String']['input'];
  /** Amount customer paid for */
  amount_paid: Scalars['Float']['input'];
  /** Unique cellulant identity */
  cpg_transaction_id: Scalars['String']['input'];
  /** ISO Currency code of the payment made */
  currency_code: Scalars['String']['input'];
  /** Customer name of person who made the payment */
  customer_name: Scalars['String']['input'];
  /** When the payment was made and received */
  date_payment_received: Scalars['String']['input'];
  /** The overall status of the payment made as described on the status code table below */
  hub_overall_status: Scalars['String']['input'];
  /** Mobile number customer is paying for */
  msisdn: Scalars['String']['input'];
  /** Payment option customer paid with e.g. Airtel */
  payer_client_code: Scalars['String']['input'];
  /** Payment option customer name */
  payer_client_name: Scalars['String']['input'];
  /** Payment description given by MNO, bank or card acquirer. */
  payer_narration: Scalars['String']['input'];
  /** Unique id the MNO or bank generated for the transaction */
  payer_transaction_id: Scalars['String']['input'];
  /** Code of service paid to */
  service_code: Scalars['String']['input'];
};

export type TinggWebhookRequestDto = {
  /** Merchant reference the customer was paying for. */
  account_number: Scalars['String']['input'];
  /** Amount the customer paid for the request. */
  amount_paid: Scalars['Float']['input'];
  /** Unique identifier on Cellulant’s end. */
  checkout_request_id: Scalars['Int']['input'];
  /** Abbreveiation of the country */
  country_abbrv: Scalars['String']['input'];
  /** ISO Currency code of the payment made */
  currency_code: Scalars['String']['input'];
  /** meta data. */
  extra_data: Scalars['String']['input'];
  /** Array of any payment initiated but was not successfully authorized. */
  failed_payments: Array<InputMaybe<TinggWebhookPayment>>;
  /** Unique Id the merchant raised for the request */
  merchant_transaction_id: Scalars['String']['input'];
  /** Mobile number the person came with from the merchant site. */
  msisdn: Scalars['String']['input'];
  /** Original request amount raised by the merchant in the invoice currency */
  original_request_amount: Scalars['Float']['input'];
  /** ISO Code of the currency code the merchant raised the request in. */
  original_request_currency_code: Scalars['String']['input'];
  /** Array of successful payments made to the request. */
  payments: Array<InputMaybe<TinggWebhookPayment>>;
  /** Converted amount for the request raised by the merchant. */
  request_amount: Scalars['Float']['input'];
  /** Converted currency for the request the customer made the payment in. */
  request_currency_code: Scalars['String']['input'];
  /** Date when the request was raised in. */
  request_date: Scalars['String']['input'];
  /**
   * Overall request code indicating whether a service was successful or paid for..
   * 177 - partially paid requests
   * 178 - indicating request was fully paid for and
   * 179 - indicating the request was partially paid for but expired.
   * 129 - Request expired without payments.
   * 180 - Request rejected by merchant
   * 183 - Request accepted by merchant we can settle the funds
   * 188 - Request received by merchant.
   */
  request_status_code: Scalars['String']['input'];
  /** Description of the status given back on webhook request. */
  request_status_description: Scalars['String']['input'];
  /** Charges added to the service for the request initiated. */
  service_charge_amount: Scalars['Float']['input'];
  /** Unique service code identifying service the payment request was raised for. */
  service_code: Scalars['String']['input'];
};

export type TinggWebhookResponseDto = {
  __typename?: 'TinggWebhookResponseDto';
  /** the unique cellulant ID on the database */
  checkout_request_id: Scalars['Int']['output'];
  /** Unique Id the merchant raised for the request */
  merchant_transaction_id: Scalars['String']['output'];
  /** Unique identifier of the acknowledgement response given back. */
  receipt_number: Scalars['String']['output'];
  /** Status code to indicate if a request is received successfully, failed or accepted */
  status_code: Scalars['String']['output'];
  /**
   *   Status code explanation.
   * 183 means successful
   * 180 means payment rejected.
   * 188 means payment received.
   */
  status_description: Scalars['String']['output'];
};

export type TopDealBanner = {
  __typename?: 'TopDealBanner';
  id: Scalars['ID']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type TopProduct = {
  __typename?: 'TopProduct';
  numberOfTimesOrdered?: Maybe<Scalars['Float']['output']>;
  orderValue?: Maybe<Scalars['Float']['output']>;
  product?: Maybe<Product>;
  productSKU: Scalars['String']['output'];
  totalQuantityOrdered?: Maybe<Scalars['Float']['output']>;
};

export type TopProductsOrderFilter = {
  cart_number?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  created_at?: InputMaybe<DateOperator>;
  customer_address_id?: InputMaybe<NumberOperator>;
  customer_id?: InputMaybe<NumberOperator>;
  delivery_id?: InputMaybe<NumberOperator>;
  delivery_instructions?: InputMaybe<StringOperator>;
  delivery_type?: InputMaybe<StringOperator>;
  discount?: InputMaybe<NumberOperator>;
  free_delivery?: InputMaybe<BooleanOperator>;
  id?: InputMaybe<IdOperator>;
  order_total?: InputMaybe<NumberOperator>;
  payment_id?: InputMaybe<StringOperator>;
  payment_method?: InputMaybe<StringOperator>;
  payment_status?: InputMaybe<StringOperator>;
  source?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<NumberOperator>;
  updated_at?: InputMaybe<DateOperator>;
  user_id?: InputMaybe<NumberOperator>;
};

export type TopProductsRequestDto = {
  /** The top (x) number of products to fetch */
  limit?: InputMaybe<Scalars['Int']['input']>;
  /** Additional filters for orders */
  orderFilter?: InputMaybe<TopProductsOrderFilter>;
  /** Additional filters for order products */
  productFilter?: InputMaybe<OrderProductFilter>;
};

export type TopProductsResponseDto = {
  __typename?: 'TopProductsResponseDto';
  products?: Maybe<Array<Maybe<TopProduct>>>;
  totalOrderValue?: Maybe<Scalars['Float']['output']>;
};

export type TopReseller = {
  __typename?: 'TopReseller';
  highest_amount: Scalars['Float']['output'];
  order_count: Scalars['Int']['output'];
  reseller?: Maybe<User>;
  total_amount: Scalars['Float']['output'];
  user_id: Scalars['ID']['output'];
  week?: Maybe<Scalars['String']['output']>;
};

export type TrendingProductsFilter = {
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
};

export enum UssdTypes {
  GuarantyTrustBank = 'guaranty_trust_bank',
  SterlingBank = 'sterling_bank',
  UnitedBankOfAfrica = 'united_bank_of_africa',
  ZenithBank = 'zenith_bank'
}

export type UnshareProductRequestDto = {
  product_id: Scalars['ID']['input'];
  shared_by: Scalars['ID']['input'];
};

export type UpdateCampaignInput = {
  campaign_count?: InputMaybe<Scalars['Int']['input']>;
  campaign_image_url?: InputMaybe<Scalars['String']['input']>;
  campaign_text?: InputMaybe<Scalars['String']['input']>;
  campaign_type?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  code_redemption_is_unlimited?: InputMaybe<Scalars['Boolean']['input']>;
  customer_count?: InputMaybe<Scalars['Int']['input']>;
  days?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  end_time?: InputMaybe<Scalars['Date']['input']>;
  expiration_date?: InputMaybe<Scalars['Date']['input']>;
  has_advance_time?: InputMaybe<Scalars['Boolean']['input']>;
  leader_board_id?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  per_customer_per_day?: InputMaybe<Scalars['Int']['input']>;
  per_customer_per_month?: InputMaybe<Scalars['Int']['input']>;
  per_customer_total_limit?: InputMaybe<Scalars['Int']['input']>;
  start_date?: InputMaybe<Scalars['Date']['input']>;
  start_time?: InputMaybe<Scalars['Date']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateDiscountData = {
  amount?: InputMaybe<Scalars['Float']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  created_by?: InputMaybe<UserType>;
  description?: InputMaybe<Scalars['String']['input']>;
  expiry_date?: InputMaybe<Scalars['String']['input']>;
  fixed_amount_allocation?: InputMaybe<FixedAmountAllocation>;
  is_draft?: InputMaybe<Scalars['Boolean']['input']>;
  locations?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  percentage?: InputMaybe<Scalars['Float']['input']>;
  redemptions_limit?: InputMaybe<Scalars['Int']['input']>;
  start_date?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<DiscountType>;
  user_id?: InputMaybe<Scalars['ID']['input']>;
  valid_country?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateDiscountProductConditionRequestDto = {
  condition?: InputMaybe<ProductCondition>;
  id: Scalars['ID']['input'];
  product_sku?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatePayoutInput = {
  id: Scalars['ID']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatePluginRequestDto = {
  banner_image?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  developer?: InputMaybe<Scalars['String']['input']>;
  endpoint?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  logo?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  verified?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateProductCategoriesInput = {
  categories?: InputMaybe<Array<Scalars['ID']['input']>>;
  product_id: Scalars['ID']['input'];
};

export type UpdateProductDistributionInput = {
  distributionChannels: Array<Scalars['String']['input']>;
  product_id: Scalars['ID']['input'];
};

export type UpdateShopDetailsRequestDto = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<CountryCode>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  currency?: InputMaybe<CurrencyCode>;
  customDomains?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  deliveryAgent?: InputMaybe<DeliveryAgent>;
  deliveryOption?: InputMaybe<DeliveryOption>;
  description?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<ShopLocationRequestDto>;
  name?: InputMaybe<Scalars['String']['input']>;
  paymentOptions?: InputMaybe<Array<InputMaybe<PaymentOption>>>;
  phone?: InputMaybe<Scalars['String']['input']>;
  primaryDomain?: InputMaybe<Scalars['String']['input']>;
  shopId: Scalars['ID']['input'];
  shopTags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  sokoWorldDomain?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateShopDetailsResponseDto = {
  __typename?: 'UpdateShopDetailsResponseDto';
  shopId?: Maybe<Scalars['ID']['output']>;
};

export type UpdateSubscriptionPackageData = {
  annual_plan_cost?: InputMaybe<Scalars['Float']['input']>;
  monthly_plan_cost?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<SubscriptionType>;
};

export type UpdateSupplierBusinessContactInput = {
  input: UpdateSupplierBusinessContactInputOption;
  supplier_id: Scalars['ID']['input'];
};

export type UpdateSupplierBusinessContactInputOption = {
  business_address?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSupplierBusinessDetailsInput = {
  input: UpdateSupplierBusinessDetailsInputOptions;
  supplier_id: Scalars['ID']['input'];
};

export type UpdateSupplierBusinessDetailsInputOptions = {
  description?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSupplierDetailsData = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSupplierDetailsInput = {
  data?: InputMaybe<UpdateSupplierDetailsData>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type UpdateSupplierPaymentInput = {
  input: UpdateSupplierPaymentInputOptions;
  supplier_id: Scalars['ID']['input'];
};

export type UpdateSupplierPaymentInputOptions = {
  account_name: Scalars['String']['input'];
  account_number: Scalars['String']['input'];
  method: Scalars['String']['input'];
  provider: Scalars['String']['input'];
};

export type User = {
  __typename?: 'User';
  country: Scalars['String']['output'];
  customers?: Maybe<Array<Maybe<UserCustomers>>>;
  details?: Maybe<UserDetails>;
  deviceToken?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  facebook_id?: Maybe<Scalars['String']['output']>;
  first_order_created: Scalars['Boolean']['output'];
  google_id?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  paymentDetails?: Maybe<UserPayment>;
  phone: Scalars['String']['output'];
  premium_subscription?: Maybe<CustomerSubscription>;
  shop?: Maybe<Shop>;
  supplier_shop_id?: Maybe<Scalars['ID']['output']>;
  twitter_id?: Maybe<Scalars['String']['output']>;
  user_type?: Maybe<UserAccountType>;
  username: Scalars['String']['output'];
  verified: Scalars['Boolean']['output'];
  verifiedDetails?: Maybe<VerifiedDetails>;
};

export enum UserAccountType {
  Customer = 'CUSTOMER',
  Manager = 'MANAGER',
  Reseller = 'RESELLER',
  Supplier = 'SUPPLIER'
}

export type UserCustomers = {
  __typename?: 'UserCustomers';
  address?: Maybe<Address>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type UserDetails = {
  __typename?: 'UserDetails';
  dob?: Maybe<Scalars['Date']['output']>;
  email_verified?: Maybe<Scalars['Boolean']['output']>;
  gender?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  phone_verified?: Maybe<Scalars['Boolean']['output']>;
  referred_by?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type UserFilter = {
  country?: InputMaybe<StringOperator>;
  email?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  name?: InputMaybe<StringOperator>;
  phone?: InputMaybe<StringOperator>;
  referred_by?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  user_type?: InputMaybe<StringOperator>;
  username?: InputMaybe<StringOperator>;
  verified?: InputMaybe<BooleanOperator>;
};

export type UserGraphData = {
  __typename?: 'UserGraphData';
  country?: Maybe<Scalars['String']['output']>;
  created_at?: Maybe<Scalars['String']['output']>;
  month?: Maybe<Scalars['String']['output']>;
  total?: Maybe<Scalars['Int']['output']>;
};

export type UserPayment = {
  __typename?: 'UserPayment';
  account_name?: Maybe<Scalars['String']['output']>;
  account_number?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  method?: Maybe<Scalars['String']['output']>;
  provider?: Maybe<Scalars['String']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type UserPaymentFilter = {
  account_name?: InputMaybe<StringOperator>;
  account_number?: InputMaybe<StringOperator>;
  method?: InputMaybe<StringOperator>;
  provider?: InputMaybe<StringOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type UserPaymentInput = {
  account_name: Scalars['String']['input'];
  account_number: Scalars['String']['input'];
  method: Scalars['String']['input'];
  provider: Scalars['String']['input'];
  user_id: Scalars['ID']['input'];
};

export type UserPlugin = {
  __typename?: 'UserPlugin';
  id: Scalars['ID']['output'];
  plugin_id: Scalars['ID']['output'];
  plugin_name?: Maybe<Scalars['String']['output']>;
  user_id: Scalars['ID']['output'];
};

export type UserPluginFilter = {
  id?: InputMaybe<IdOperator>;
  plugin_id?: InputMaybe<IdOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type UserReferralMetrics = {
  __typename?: 'UserReferralMetrics';
  total_referrals: Scalars['Int']['output'];
  total_succesful_referrals: Scalars['Int']['output'];
};

export type UserStats = {
  __typename?: 'UserStats';
  usersAllTime: Scalars['Int']['output'];
  usersMonth: Scalars['Int']['output'];
  usersToday: Scalars['Int']['output'];
  usersWeek: Scalars['Int']['output'];
  usersYear: Scalars['Int']['output'];
};

export enum UserType {
  InHouse = 'IN_HOUSE',
  Reseller = 'RESELLER',
  Supplier = 'SUPPLIER'
}

export type Variation = {
  __typename?: 'Variation';
  id?: Maybe<Scalars['ID']['output']>;
  variation_name: Scalars['String']['output'];
  variation_options: Array<Maybe<VariationOption>>;
};

export type VariationFilter = {
  id?: InputMaybe<IdOperator>;
};

export type VariationInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  variation_name: Scalars['String']['input'];
  variation_options?: InputMaybe<Array<InputMaybe<VariationOptionInput>>>;
};

export type VariationOption = {
  __typename?: 'VariationOption';
  id?: Maybe<Scalars['ID']['output']>;
  variation_value?: Maybe<Scalars['String']['output']>;
};

export type VariationOptionInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  variation_value?: InputMaybe<Scalars['String']['input']>;
};

export type VerifiedDetails = {
  __typename?: 'VerifiedDetails';
  has_verified_email?: Maybe<Scalars['Boolean']['output']>;
  has_verified_phonenumber?: Maybe<Scalars['Boolean']['output']>;
  setup_complete?: Maybe<Scalars['Boolean']['output']>;
};

export type VerifyPaymentInput = {
  reference: Scalars['String']['input'];
};

export type VerifyProductInput = {
  id: Scalars['ID']['input'];
  markup_amount?: InputMaybe<Scalars['Float']['input']>;
  markup_value?: InputMaybe<Scalars['Float']['input']>;
  supplier_agreement: SupplierAgreement;
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
};

export type Wallet = {
  __typename?: 'Wallet';
  balance: Scalars['Float']['output'];
  deliveries: Scalars['Int']['output'];
  history?: Maybe<Array<WalletHistory>>;
  id: Scalars['ID']['output'];
  points: Scalars['Float']['output'];
  supplier_id?: Maybe<Scalars['ID']['output']>;
  user_id?: Maybe<Scalars['ID']['output']>;
};

export type WalletFilter = {
  id?: InputMaybe<IdOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  user_id?: InputMaybe<IdOperator>;
};

export type WalletHistory = {
  __typename?: 'WalletHistory';
  amount: Scalars['Float']['output'];
  created_at: Scalars['Date']['output'];
  id: Scalars['ID']['output'];
  previous_balance: Scalars['Float']['output'];
  reference: Scalars['String']['output'];
  status: Scalars['String']['output'];
  transaction_type: Scalars['String']['output'];
};

export type WalletHistoryFilter = {
  amount?: InputMaybe<MoneyOperator>;
  id?: InputMaybe<IdOperator>;
  reference?: InputMaybe<StringOperator>;
  status?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  user_id?: InputMaybe<IdOperator>;
  wallet_id?: InputMaybe<IdOperator>;
};

export type WalletSumary = {
  __typename?: 'WalletSumary';
  balance: Scalars['Float']['output'];
  pendingPayoutRequests: Scalars['Int']['output'];
  points: Scalars['Float']['output'];
  totalRevenueGenerated: Scalars['Float']['output'];
};

export type WalletTopupFilter = {
  created_at?: InputMaybe<DateOperator>;
  id?: InputMaybe<IdOperator>;
  message?: InputMaybe<StringOperator>;
  paymentReference?: InputMaybe<StringOperator>;
  updated_at?: InputMaybe<DateOperator>;
  walletTopUpStatus?: InputMaybe<StringOperator>;
};

export type WalletTopupPayment = {
  __typename?: 'WalletTopupPayment';
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  payment?: Maybe<Payment>;
  paymentReference: Scalars['String']['output'];
  walletTopUpStatus: WalletTopupStatus;
};

export enum WalletTopupStatus {
  Failed = 'failed',
  Initiated = 'initiated',
  Success = 'success'
}

export type AccountRegisterInput = {
  country: Scalars['String']['input'];
  details?: InputMaybe<Details>;
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  referred_by?: InputMaybe<Scalars['String']['input']>;
  social_login?: InputMaybe<Scalars['Boolean']['input']>;
  supplier_shop_id?: InputMaybe<Scalars['ID']['input']>;
};

export type AddBusinessDocumentInput = {
  business_id?: InputMaybe<Scalars['String']['input']>;
  documents?: InputMaybe<Array<DocumentInput>>;
};

export type AddCommentInput = {
  id: Scalars['ID']['input'];
  message: Scalars['String']['input'];
  staff_name: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

export type AddCommentsToProductInput = {
  message: Scalars['String']['input'];
  product_id: Scalars['ID']['input'];
  staff_number: Scalars['String']['input'];
};

export type AddSupplierPaymentInput = {
  account_name: Scalars['String']['input'];
  account_number: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  method: Scalars['String']['input'];
  provider: Scalars['String']['input'];
  supplier_id: Scalars['ID']['input'];
};

export type AuthenticateWithTokenInput = {
  token: Scalars['String']['input'];
};

export type ChangePasswordInput = {
  confirmPassword?: InputMaybe<Scalars['String']['input']>;
  newPassword: Scalars['String']['input'];
  oldPassword: Scalars['String']['input'];
};

export type CheckPasswordAvailabilityInput = {
  channel?: InputMaybe<ChannelType>;
  phone: Scalars['String']['input'];
};

export type CreateProductInput = {
  avatar: Scalars['String']['input'];
  catalog_id?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  combination_string?: InputMaybe<Scalars['String']['input']>;
  combinations?: InputMaybe<Array<InputMaybe<ProductCombinationInput>>>;
  cost_price: Scalars['Float']['input'];
  country: CountryCode;
  currency: CurrencyCode;
  description: Scalars['String']['input'];
  distributionChannels?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  extra_information?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  inhouse?: InputMaybe<Scalars['Boolean']['input']>;
  limited_stock?: InputMaybe<Scalars['Boolean']['input']>;
  media: Array<Scalars['String']['input']>;
  minimumOrderQuantity?: InputMaybe<Scalars['Int']['input']>;
  price: Scalars['Float']['input'];
  product_origin?: InputMaybe<ProductOrigin>;
  published: Scalars['Boolean']['input'];
  qty?: InputMaybe<Scalars['Int']['input']>;
  shop_id?: InputMaybe<Scalars['ID']['input']>;
  sku: Scalars['String']['input'];
  supplier_id?: InputMaybe<Scalars['ID']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  title: Scalars['String']['input'];
  user_id?: InputMaybe<Scalars['ID']['input']>;
  uuid: Scalars['String']['input'];
  variations?: InputMaybe<Array<InputMaybe<VariationInput>>>;
  verified: Scalars['Boolean']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export enum DistributionChannel {
  MarketPlace = 'MarketPlace',
  ResellerNetwork = 'ResellerNetwork',
  SupplierStorefront = 'SupplierStorefront',
  TendoNetwork = 'TendoNetwork'
}

export type DocumentInput = {
  file?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type EditProductStatInput = {
  editType: ProductStatEditType;
  product_id: Scalars['ID']['input'];
  stat: ProductStat;
  user_id: Scalars['ID']['input'];
};

export type ForgotPasswordInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type IsProductLikedByUserInput = {
  product_id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type IsProductSavedByUserInput = {
  product_id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type IsProductSharedByUserInput = {
  product_id: Scalars['ID']['input'];
  user_id: Scalars['ID']['input'];
};

export type MakeRequestForProduct = {
  product_id: Scalars['ID']['input'];
  qty: Scalars['Int']['input'];
  shop_id: Scalars['ID']['input'];
};

export type MigrationUserCreateInput = {
  country: Scalars['String']['input'];
  details?: InputMaybe<Details>;
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  referred_by?: InputMaybe<Scalars['String']['input']>;
  social_login?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type ProductFilter = {
  attended_to?: InputMaybe<BooleanOperator>;
  catalog?: InputMaybe<CatalogFilter>;
  category?: InputMaybe<ProductCategoryFilter>;
  combination_string?: InputMaybe<StringOperator>;
  country?: InputMaybe<StringOperator>;
  id?: InputMaybe<IdOperator>;
  inhouse?: InputMaybe<BooleanOperator>;
  main_stock?: InputMaybe<NumberOperator>;
  price?: InputMaybe<MoneyOperator>;
  published?: InputMaybe<BooleanOperator>;
  qty?: InputMaybe<NumberOperator>;
  random?: InputMaybe<Scalars['Boolean']['input']>;
  shop?: InputMaybe<ShopProductFilter>;
  shopCollection?: InputMaybe<ShopCollectionProductFilter>;
  sku?: InputMaybe<StringOperator>;
  supplier_id?: InputMaybe<IdOperator>;
  tags?: InputMaybe<StringOperator>;
  title?: InputMaybe<StringOperator>;
  transit_stock?: InputMaybe<NumberOperator>;
  uuid?: InputMaybe<StringOperator>;
  verified?: InputMaybe<BooleanOperator>;
};

export type ProductRequestFilter = {
  product?: InputMaybe<ProductFilter>;
  qty?: InputMaybe<NumberOperator>;
  shop_id?: InputMaybe<IdOperator>;
};

export type RequestChangeEmailInput = {
  email: Scalars['String']['input'];
  newEmail: Scalars['String']['input'];
};

export type RequestChangePhoneInput = {
  newPhone: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type RequestEmailVerificationInput = {
  email: Scalars['String']['input'];
};

export type RequestOtpInput = {
  channel?: InputMaybe<ChannelType>;
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type RequestSupplierEmailVerificationInput = {
  email: Scalars['String']['input'];
};

export type RequestSupplierPhoneVerificationInput = {
  phone: Scalars['String']['input'];
};

export type ResetPasswordInput = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type SetupAccountInput = {
  confirm_password: Scalars['String']['input'];
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  phone: Scalars['String']['input'];
};

export type TempCreateProductInput = {
  avatar: Scalars['String']['input'];
  catalog_id?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  categories?: InputMaybe<Array<InputMaybe<TempCategoryInput>>>;
  combination_string?: InputMaybe<Scalars['String']['input']>;
  combinations?: InputMaybe<Array<InputMaybe<ProductCombinationInput>>>;
  cost_price: Scalars['Float']['input'];
  country: CountryCode;
  currency: CurrencyCode;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  inhouse?: InputMaybe<Scalars['Boolean']['input']>;
  limited_stock?: InputMaybe<Scalars['Boolean']['input']>;
  media: Array<Scalars['String']['input']>;
  price: Scalars['Float']['input'];
  published: Scalars['Boolean']['input'];
  qty?: InputMaybe<Scalars['Int']['input']>;
  shop_id: Scalars['ID']['input'];
  sku: Scalars['String']['input'];
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  title: Scalars['String']['input'];
  user_id?: InputMaybe<Scalars['ID']['input']>;
  uuid: Scalars['String']['input'];
  variations?: InputMaybe<Array<InputMaybe<VariationInput>>>;
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UpdateUserDetailsInput = {
  dob?: InputMaybe<Scalars['Date']['input']>;
  gender?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  referred_by?: InputMaybe<Scalars['String']['input']>;
  user_id: Scalars['Int']['input'];
};

export type UserLoginInput = {
  deviceToken?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type VerifyEmailInput = {
  token: Scalars['String']['input'];
};

export type VerifyOtpInput = {
  code: Scalars['String']['input'];
  medium: Scalars['String']['input'];
  token: Scalars['String']['input'];
  update?: InputMaybe<Scalars['Boolean']['input']>;
};

export type VerifySupplierAccountInput = {
  action: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type VerifySupplierBusinessInput = {
  agreed_term?: InputMaybe<SupplierAgreementTerms>;
  genericName: Scalars['String']['input'];
  supplier_id: Scalars['ID']['input'];
};

export type VerifySupplierEmailInput = {
  token: Scalars['String']['input'];
};

export type VerifySupplierOtpInput = {
  code: Scalars['String']['input'];
  medium: Scalars['String']['input'];
  token: Scalars['String']['input'];
  update?: InputMaybe<Scalars['Boolean']['input']>;
};
